<?php
/**
 * PlaylistsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PlaylistsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlaylistsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addToPlaylist' => [
            'application/json',
        ],
        'createPlaylist' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getPlaylistItems' => [
            'application/json',
        ],
        'moveItem' => [
            'application/json',
        ],
        'removeFromPlaylist' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addToPlaylist
     *
     * Adds items to a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $ids Item id, comma delimited. (optional)
     * @param  string $user_id The userId. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addToPlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addToPlaylist($playlist_id, $ids = null, $user_id = null, string $contentType = self::contentTypes['addToPlaylist'][0])
    {
        $this->addToPlaylistWithHttpInfo($playlist_id, $ids, $user_id, $contentType);
    }

    /**
     * Operation addToPlaylistWithHttpInfo
     *
     * Adds items to a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $ids Item id, comma delimited. (optional)
     * @param  string $user_id The userId. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addToPlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addToPlaylistWithHttpInfo($playlist_id, $ids = null, $user_id = null, string $contentType = self::contentTypes['addToPlaylist'][0])
    {
        $request = $this->addToPlaylistRequest($playlist_id, $ids, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addToPlaylistAsync
     *
     * Adds items to a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $ids Item id, comma delimited. (optional)
     * @param  string $user_id The userId. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addToPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addToPlaylistAsync($playlist_id, $ids = null, $user_id = null, string $contentType = self::contentTypes['addToPlaylist'][0])
    {
        return $this->addToPlaylistAsyncWithHttpInfo($playlist_id, $ids, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addToPlaylistAsyncWithHttpInfo
     *
     * Adds items to a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $ids Item id, comma delimited. (optional)
     * @param  string $user_id The userId. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addToPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addToPlaylistAsyncWithHttpInfo($playlist_id, $ids = null, $user_id = null, string $contentType = self::contentTypes['addToPlaylist'][0])
    {
        $returnType = '';
        $request = $this->addToPlaylistRequest($playlist_id, $ids, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addToPlaylist'
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $ids Item id, comma delimited. (optional)
     * @param  string $user_id The userId. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addToPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addToPlaylistRequest($playlist_id, $ids = null, $user_id = null, string $contentType = self::contentTypes['addToPlaylist'][0])
    {

        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling addToPlaylist'
            );
        }




        $resourcePath = '/Playlists/{playlistId}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPlaylist
     *
     * Creates a new playlist.
     *
     * @param  string $name The playlist name. (optional) (deprecated)
     * @param  string[] $ids The item ids. (optional) (deprecated)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  string $media_type The media type. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\CreatePlaylistRequest $create_playlist_request The create playlist payload. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaylistCreationResult
     */
    public function createPlaylist($name = null, $ids = null, $user_id = null, $media_type = null, $create_playlist_request = null, string $contentType = self::contentTypes['createPlaylist'][0])
    {
        list($response) = $this->createPlaylistWithHttpInfo($name, $ids, $user_id, $media_type, $create_playlist_request, $contentType);
        return $response;
    }

    /**
     * Operation createPlaylistWithHttpInfo
     *
     * Creates a new playlist.
     *
     * @param  string $name The playlist name. (optional) (deprecated)
     * @param  string[] $ids The item ids. (optional) (deprecated)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  string $media_type The media type. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\CreatePlaylistRequest $create_playlist_request The create playlist payload. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaylistCreationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlaylistWithHttpInfo($name = null, $ids = null, $user_id = null, $media_type = null, $create_playlist_request = null, string $contentType = self::contentTypes['createPlaylist'][0])
    {
        $request = $this->createPlaylistRequest($name, $ids, $user_id, $media_type, $create_playlist_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaylistCreationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaylistCreationResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaylistCreationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlaylistCreationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaylistCreationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPlaylistAsync
     *
     * Creates a new playlist.
     *
     * @param  string $name The playlist name. (optional) (deprecated)
     * @param  string[] $ids The item ids. (optional) (deprecated)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  string $media_type The media type. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\CreatePlaylistRequest $create_playlist_request The create playlist payload. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlaylistAsync($name = null, $ids = null, $user_id = null, $media_type = null, $create_playlist_request = null, string $contentType = self::contentTypes['createPlaylist'][0])
    {
        return $this->createPlaylistAsyncWithHttpInfo($name, $ids, $user_id, $media_type, $create_playlist_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlaylistAsyncWithHttpInfo
     *
     * Creates a new playlist.
     *
     * @param  string $name The playlist name. (optional) (deprecated)
     * @param  string[] $ids The item ids. (optional) (deprecated)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  string $media_type The media type. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\CreatePlaylistRequest $create_playlist_request The create playlist payload. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlaylistAsyncWithHttpInfo($name = null, $ids = null, $user_id = null, $media_type = null, $create_playlist_request = null, string $contentType = self::contentTypes['createPlaylist'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaylistCreationResult';
        $request = $this->createPlaylistRequest($name, $ids, $user_id, $media_type, $create_playlist_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlaylist'
     *
     * @param  string $name The playlist name. (optional) (deprecated)
     * @param  string[] $ids The item ids. (optional) (deprecated)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  string $media_type The media type. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\CreatePlaylistRequest $create_playlist_request The create playlist payload. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPlaylistRequest($name = null, $ids = null, $user_id = null, $media_type = null, $create_playlist_request = null, string $contentType = self::contentTypes['createPlaylist'][0])
    {







        $resourcePath = '/Playlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_type,
            'mediaType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_playlist_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_playlist_request));
            } else {
                $httpBody = $create_playlist_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlaylistItems
     *
     * Gets the original items of a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $user_id User id. (required)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  bool $enable_images Optional. Include image information in output. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaylistItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getPlaylistItems($playlist_id, $user_id, $start_index = null, $limit = null, $fields = null, $enable_images = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, string $contentType = self::contentTypes['getPlaylistItems'][0])
    {
        list($response) = $this->getPlaylistItemsWithHttpInfo($playlist_id, $user_id, $start_index, $limit, $fields, $enable_images, $enable_user_data, $image_type_limit, $enable_image_types, $contentType);
        return $response;
    }

    /**
     * Operation getPlaylistItemsWithHttpInfo
     *
     * Gets the original items of a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $user_id User id. (required)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  bool $enable_images Optional. Include image information in output. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaylistItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlaylistItemsWithHttpInfo($playlist_id, $user_id, $start_index = null, $limit = null, $fields = null, $enable_images = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, string $contentType = self::contentTypes['getPlaylistItems'][0])
    {
        $request = $this->getPlaylistItemsRequest($playlist_id, $user_id, $start_index, $limit, $fields, $enable_images, $enable_user_data, $image_type_limit, $enable_image_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlaylistItemsAsync
     *
     * Gets the original items of a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $user_id User id. (required)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  bool $enable_images Optional. Include image information in output. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaylistItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlaylistItemsAsync($playlist_id, $user_id, $start_index = null, $limit = null, $fields = null, $enable_images = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, string $contentType = self::contentTypes['getPlaylistItems'][0])
    {
        return $this->getPlaylistItemsAsyncWithHttpInfo($playlist_id, $user_id, $start_index, $limit, $fields, $enable_images, $enable_user_data, $image_type_limit, $enable_image_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlaylistItemsAsyncWithHttpInfo
     *
     * Gets the original items of a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $user_id User id. (required)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  bool $enable_images Optional. Include image information in output. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaylistItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlaylistItemsAsyncWithHttpInfo($playlist_id, $user_id, $start_index = null, $limit = null, $fields = null, $enable_images = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, string $contentType = self::contentTypes['getPlaylistItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getPlaylistItemsRequest($playlist_id, $user_id, $start_index, $limit, $fields, $enable_images, $enable_user_data, $image_type_limit, $enable_image_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlaylistItems'
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $user_id User id. (required)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  bool $enable_images Optional. Include image information in output. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaylistItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlaylistItemsRequest($playlist_id, $user_id, $start_index = null, $limit = null, $fields = null, $enable_images = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, string $contentType = self::contentTypes['getPlaylistItems'][0])
    {

        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling getPlaylistItems'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getPlaylistItems'
            );
        }









        $resourcePath = '/Playlists/{playlistId}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_images,
            'enableImages', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_user_data,
            'enableUserData', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_type_limit,
            'imageTypeLimit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_image_types,
            'enableImageTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveItem
     *
     * Moves a playlist item.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $item_id The item id. (required)
     * @param  int $new_index The new index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function moveItem($playlist_id, $item_id, $new_index, string $contentType = self::contentTypes['moveItem'][0])
    {
        $this->moveItemWithHttpInfo($playlist_id, $item_id, $new_index, $contentType);
    }

    /**
     * Operation moveItemWithHttpInfo
     *
     * Moves a playlist item.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $item_id The item id. (required)
     * @param  int $new_index The new index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveItemWithHttpInfo($playlist_id, $item_id, $new_index, string $contentType = self::contentTypes['moveItem'][0])
    {
        $request = $this->moveItemRequest($playlist_id, $item_id, $new_index, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation moveItemAsync
     *
     * Moves a playlist item.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $item_id The item id. (required)
     * @param  int $new_index The new index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveItemAsync($playlist_id, $item_id, $new_index, string $contentType = self::contentTypes['moveItem'][0])
    {
        return $this->moveItemAsyncWithHttpInfo($playlist_id, $item_id, $new_index, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveItemAsyncWithHttpInfo
     *
     * Moves a playlist item.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $item_id The item id. (required)
     * @param  int $new_index The new index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveItemAsyncWithHttpInfo($playlist_id, $item_id, $new_index, string $contentType = self::contentTypes['moveItem'][0])
    {
        $returnType = '';
        $request = $this->moveItemRequest($playlist_id, $item_id, $new_index, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveItem'
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $item_id The item id. (required)
     * @param  int $new_index The new index. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function moveItemRequest($playlist_id, $item_id, $new_index, string $contentType = self::contentTypes['moveItem'][0])
    {

        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling moveItem'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling moveItem'
            );
        }

        // verify the required parameter 'new_index' is set
        if ($new_index === null || (is_array($new_index) && count($new_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_index when calling moveItem'
            );
        }


        $resourcePath = '/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($new_index !== null) {
            $resourcePath = str_replace(
                '{' . 'newIndex' . '}',
                ObjectSerializer::toPathValue($new_index),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeFromPlaylist
     *
     * Removes items from a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $entry_ids The item ids, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeFromPlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeFromPlaylist($playlist_id, $entry_ids = null, string $contentType = self::contentTypes['removeFromPlaylist'][0])
    {
        $this->removeFromPlaylistWithHttpInfo($playlist_id, $entry_ids, $contentType);
    }

    /**
     * Operation removeFromPlaylistWithHttpInfo
     *
     * Removes items from a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $entry_ids The item ids, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeFromPlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeFromPlaylistWithHttpInfo($playlist_id, $entry_ids = null, string $contentType = self::contentTypes['removeFromPlaylist'][0])
    {
        $request = $this->removeFromPlaylistRequest($playlist_id, $entry_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeFromPlaylistAsync
     *
     * Removes items from a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $entry_ids The item ids, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeFromPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeFromPlaylistAsync($playlist_id, $entry_ids = null, string $contentType = self::contentTypes['removeFromPlaylist'][0])
    {
        return $this->removeFromPlaylistAsyncWithHttpInfo($playlist_id, $entry_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeFromPlaylistAsyncWithHttpInfo
     *
     * Removes items from a playlist.
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $entry_ids The item ids, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeFromPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeFromPlaylistAsyncWithHttpInfo($playlist_id, $entry_ids = null, string $contentType = self::contentTypes['removeFromPlaylist'][0])
    {
        $returnType = '';
        $request = $this->removeFromPlaylistRequest($playlist_id, $entry_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeFromPlaylist'
     *
     * @param  string $playlist_id The playlist id. (required)
     * @param  string[] $entry_ids The item ids, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeFromPlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeFromPlaylistRequest($playlist_id, $entry_ids = null, string $contentType = self::contentTypes['removeFromPlaylist'][0])
    {

        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling removeFromPlaylist'
            );
        }



        $resourcePath = '/Playlists/{playlistId}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entry_ids,
            'entryIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
