<?php
/**
 * UpdateConfigurationRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateConfigurationRequest Class Doc Comment
 *
 * @category Class
 * @description Represents the server configuration.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateConfigurationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateConfiguration_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'log_file_retention_days' => 'int',
        'is_startup_wizard_completed' => 'bool',
        'cache_path' => 'string',
        'previous_version' => 'string',
        'previous_version_str' => 'string',
        'enable_metrics' => 'bool',
        'enable_normalized_item_by_name_ids' => 'bool',
        'is_port_authorized' => 'bool',
        'quick_connect_available' => 'bool',
        'enable_case_sensitive_item_ids' => 'bool',
        'disable_live_tv_channel_user_data_name' => 'bool',
        'metadata_path' => 'string',
        'metadata_network_path' => 'string',
        'preferred_metadata_language' => 'string',
        'metadata_country_code' => 'string',
        'sort_replace_characters' => 'string[]',
        'sort_remove_characters' => 'string[]',
        'sort_remove_words' => 'string[]',
        'min_resume_pct' => 'int',
        'max_resume_pct' => 'int',
        'min_resume_duration_seconds' => 'int',
        'min_audiobook_resume' => 'int',
        'max_audiobook_resume' => 'int',
        'library_monitor_delay' => 'int',
        'image_saving_convention' => '\OpenAPI\Client\Model\ImageSavingConvention',
        'metadata_options' => '\OpenAPI\Client\Model\MetadataOptions[]',
        'skip_deserialization_for_basic_types' => 'bool',
        'server_name' => 'string',
        'ui_culture' => 'string',
        'save_metadata_hidden' => 'bool',
        'content_types' => '\OpenAPI\Client\Model\NameValuePair[]',
        'remote_client_bitrate_limit' => 'int',
        'enable_folder_view' => 'bool',
        'enable_grouping_into_collections' => 'bool',
        'display_specials_within_seasons' => 'bool',
        'codecs_used' => 'string[]',
        'plugin_repositories' => '\OpenAPI\Client\Model\RepositoryInfo[]',
        'enable_external_content_in_suggestions' => 'bool',
        'image_extraction_timeout_ms' => 'int',
        'path_substitutions' => '\OpenAPI\Client\Model\PathSubstitution[]',
        'enable_slow_response_warning' => 'bool',
        'slow_response_threshold_ms' => 'int',
        'cors_hosts' => 'string[]',
        'activity_log_retention_days' => 'int',
        'library_scan_fanout_concurrency' => 'int',
        'library_metadata_refresh_concurrency' => 'int',
        'remove_old_plugins' => 'bool',
        'allow_client_log_upload' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'log_file_retention_days' => 'int32',
        'is_startup_wizard_completed' => null,
        'cache_path' => null,
        'previous_version' => null,
        'previous_version_str' => null,
        'enable_metrics' => null,
        'enable_normalized_item_by_name_ids' => null,
        'is_port_authorized' => null,
        'quick_connect_available' => null,
        'enable_case_sensitive_item_ids' => null,
        'disable_live_tv_channel_user_data_name' => null,
        'metadata_path' => null,
        'metadata_network_path' => null,
        'preferred_metadata_language' => null,
        'metadata_country_code' => null,
        'sort_replace_characters' => null,
        'sort_remove_characters' => null,
        'sort_remove_words' => null,
        'min_resume_pct' => 'int32',
        'max_resume_pct' => 'int32',
        'min_resume_duration_seconds' => 'int32',
        'min_audiobook_resume' => 'int32',
        'max_audiobook_resume' => 'int32',
        'library_monitor_delay' => 'int32',
        'image_saving_convention' => null,
        'metadata_options' => null,
        'skip_deserialization_for_basic_types' => null,
        'server_name' => null,
        'ui_culture' => null,
        'save_metadata_hidden' => null,
        'content_types' => null,
        'remote_client_bitrate_limit' => 'int32',
        'enable_folder_view' => null,
        'enable_grouping_into_collections' => null,
        'display_specials_within_seasons' => null,
        'codecs_used' => null,
        'plugin_repositories' => null,
        'enable_external_content_in_suggestions' => null,
        'image_extraction_timeout_ms' => 'int32',
        'path_substitutions' => null,
        'enable_slow_response_warning' => null,
        'slow_response_threshold_ms' => 'int64',
        'cors_hosts' => null,
        'activity_log_retention_days' => 'int32',
        'library_scan_fanout_concurrency' => 'int32',
        'library_metadata_refresh_concurrency' => 'int32',
        'remove_old_plugins' => null,
        'allow_client_log_upload' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'log_file_retention_days' => false,
		'is_startup_wizard_completed' => false,
		'cache_path' => true,
		'previous_version' => true,
		'previous_version_str' => true,
		'enable_metrics' => false,
		'enable_normalized_item_by_name_ids' => false,
		'is_port_authorized' => false,
		'quick_connect_available' => false,
		'enable_case_sensitive_item_ids' => false,
		'disable_live_tv_channel_user_data_name' => false,
		'metadata_path' => false,
		'metadata_network_path' => false,
		'preferred_metadata_language' => false,
		'metadata_country_code' => false,
		'sort_replace_characters' => false,
		'sort_remove_characters' => false,
		'sort_remove_words' => false,
		'min_resume_pct' => false,
		'max_resume_pct' => false,
		'min_resume_duration_seconds' => false,
		'min_audiobook_resume' => false,
		'max_audiobook_resume' => false,
		'library_monitor_delay' => false,
		'image_saving_convention' => false,
		'metadata_options' => false,
		'skip_deserialization_for_basic_types' => false,
		'server_name' => false,
		'ui_culture' => false,
		'save_metadata_hidden' => false,
		'content_types' => false,
		'remote_client_bitrate_limit' => false,
		'enable_folder_view' => false,
		'enable_grouping_into_collections' => false,
		'display_specials_within_seasons' => false,
		'codecs_used' => false,
		'plugin_repositories' => false,
		'enable_external_content_in_suggestions' => false,
		'image_extraction_timeout_ms' => false,
		'path_substitutions' => false,
		'enable_slow_response_warning' => false,
		'slow_response_threshold_ms' => false,
		'cors_hosts' => false,
		'activity_log_retention_days' => true,
		'library_scan_fanout_concurrency' => false,
		'library_metadata_refresh_concurrency' => false,
		'remove_old_plugins' => false,
		'allow_client_log_upload' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'log_file_retention_days' => 'LogFileRetentionDays',
        'is_startup_wizard_completed' => 'IsStartupWizardCompleted',
        'cache_path' => 'CachePath',
        'previous_version' => 'PreviousVersion',
        'previous_version_str' => 'PreviousVersionStr',
        'enable_metrics' => 'EnableMetrics',
        'enable_normalized_item_by_name_ids' => 'EnableNormalizedItemByNameIds',
        'is_port_authorized' => 'IsPortAuthorized',
        'quick_connect_available' => 'QuickConnectAvailable',
        'enable_case_sensitive_item_ids' => 'EnableCaseSensitiveItemIds',
        'disable_live_tv_channel_user_data_name' => 'DisableLiveTvChannelUserDataName',
        'metadata_path' => 'MetadataPath',
        'metadata_network_path' => 'MetadataNetworkPath',
        'preferred_metadata_language' => 'PreferredMetadataLanguage',
        'metadata_country_code' => 'MetadataCountryCode',
        'sort_replace_characters' => 'SortReplaceCharacters',
        'sort_remove_characters' => 'SortRemoveCharacters',
        'sort_remove_words' => 'SortRemoveWords',
        'min_resume_pct' => 'MinResumePct',
        'max_resume_pct' => 'MaxResumePct',
        'min_resume_duration_seconds' => 'MinResumeDurationSeconds',
        'min_audiobook_resume' => 'MinAudiobookResume',
        'max_audiobook_resume' => 'MaxAudiobookResume',
        'library_monitor_delay' => 'LibraryMonitorDelay',
        'image_saving_convention' => 'ImageSavingConvention',
        'metadata_options' => 'MetadataOptions',
        'skip_deserialization_for_basic_types' => 'SkipDeserializationForBasicTypes',
        'server_name' => 'ServerName',
        'ui_culture' => 'UICulture',
        'save_metadata_hidden' => 'SaveMetadataHidden',
        'content_types' => 'ContentTypes',
        'remote_client_bitrate_limit' => 'RemoteClientBitrateLimit',
        'enable_folder_view' => 'EnableFolderView',
        'enable_grouping_into_collections' => 'EnableGroupingIntoCollections',
        'display_specials_within_seasons' => 'DisplaySpecialsWithinSeasons',
        'codecs_used' => 'CodecsUsed',
        'plugin_repositories' => 'PluginRepositories',
        'enable_external_content_in_suggestions' => 'EnableExternalContentInSuggestions',
        'image_extraction_timeout_ms' => 'ImageExtractionTimeoutMs',
        'path_substitutions' => 'PathSubstitutions',
        'enable_slow_response_warning' => 'EnableSlowResponseWarning',
        'slow_response_threshold_ms' => 'SlowResponseThresholdMs',
        'cors_hosts' => 'CorsHosts',
        'activity_log_retention_days' => 'ActivityLogRetentionDays',
        'library_scan_fanout_concurrency' => 'LibraryScanFanoutConcurrency',
        'library_metadata_refresh_concurrency' => 'LibraryMetadataRefreshConcurrency',
        'remove_old_plugins' => 'RemoveOldPlugins',
        'allow_client_log_upload' => 'AllowClientLogUpload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'log_file_retention_days' => 'setLogFileRetentionDays',
        'is_startup_wizard_completed' => 'setIsStartupWizardCompleted',
        'cache_path' => 'setCachePath',
        'previous_version' => 'setPreviousVersion',
        'previous_version_str' => 'setPreviousVersionStr',
        'enable_metrics' => 'setEnableMetrics',
        'enable_normalized_item_by_name_ids' => 'setEnableNormalizedItemByNameIds',
        'is_port_authorized' => 'setIsPortAuthorized',
        'quick_connect_available' => 'setQuickConnectAvailable',
        'enable_case_sensitive_item_ids' => 'setEnableCaseSensitiveItemIds',
        'disable_live_tv_channel_user_data_name' => 'setDisableLiveTvChannelUserDataName',
        'metadata_path' => 'setMetadataPath',
        'metadata_network_path' => 'setMetadataNetworkPath',
        'preferred_metadata_language' => 'setPreferredMetadataLanguage',
        'metadata_country_code' => 'setMetadataCountryCode',
        'sort_replace_characters' => 'setSortReplaceCharacters',
        'sort_remove_characters' => 'setSortRemoveCharacters',
        'sort_remove_words' => 'setSortRemoveWords',
        'min_resume_pct' => 'setMinResumePct',
        'max_resume_pct' => 'setMaxResumePct',
        'min_resume_duration_seconds' => 'setMinResumeDurationSeconds',
        'min_audiobook_resume' => 'setMinAudiobookResume',
        'max_audiobook_resume' => 'setMaxAudiobookResume',
        'library_monitor_delay' => 'setLibraryMonitorDelay',
        'image_saving_convention' => 'setImageSavingConvention',
        'metadata_options' => 'setMetadataOptions',
        'skip_deserialization_for_basic_types' => 'setSkipDeserializationForBasicTypes',
        'server_name' => 'setServerName',
        'ui_culture' => 'setUiCulture',
        'save_metadata_hidden' => 'setSaveMetadataHidden',
        'content_types' => 'setContentTypes',
        'remote_client_bitrate_limit' => 'setRemoteClientBitrateLimit',
        'enable_folder_view' => 'setEnableFolderView',
        'enable_grouping_into_collections' => 'setEnableGroupingIntoCollections',
        'display_specials_within_seasons' => 'setDisplaySpecialsWithinSeasons',
        'codecs_used' => 'setCodecsUsed',
        'plugin_repositories' => 'setPluginRepositories',
        'enable_external_content_in_suggestions' => 'setEnableExternalContentInSuggestions',
        'image_extraction_timeout_ms' => 'setImageExtractionTimeoutMs',
        'path_substitutions' => 'setPathSubstitutions',
        'enable_slow_response_warning' => 'setEnableSlowResponseWarning',
        'slow_response_threshold_ms' => 'setSlowResponseThresholdMs',
        'cors_hosts' => 'setCorsHosts',
        'activity_log_retention_days' => 'setActivityLogRetentionDays',
        'library_scan_fanout_concurrency' => 'setLibraryScanFanoutConcurrency',
        'library_metadata_refresh_concurrency' => 'setLibraryMetadataRefreshConcurrency',
        'remove_old_plugins' => 'setRemoveOldPlugins',
        'allow_client_log_upload' => 'setAllowClientLogUpload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'log_file_retention_days' => 'getLogFileRetentionDays',
        'is_startup_wizard_completed' => 'getIsStartupWizardCompleted',
        'cache_path' => 'getCachePath',
        'previous_version' => 'getPreviousVersion',
        'previous_version_str' => 'getPreviousVersionStr',
        'enable_metrics' => 'getEnableMetrics',
        'enable_normalized_item_by_name_ids' => 'getEnableNormalizedItemByNameIds',
        'is_port_authorized' => 'getIsPortAuthorized',
        'quick_connect_available' => 'getQuickConnectAvailable',
        'enable_case_sensitive_item_ids' => 'getEnableCaseSensitiveItemIds',
        'disable_live_tv_channel_user_data_name' => 'getDisableLiveTvChannelUserDataName',
        'metadata_path' => 'getMetadataPath',
        'metadata_network_path' => 'getMetadataNetworkPath',
        'preferred_metadata_language' => 'getPreferredMetadataLanguage',
        'metadata_country_code' => 'getMetadataCountryCode',
        'sort_replace_characters' => 'getSortReplaceCharacters',
        'sort_remove_characters' => 'getSortRemoveCharacters',
        'sort_remove_words' => 'getSortRemoveWords',
        'min_resume_pct' => 'getMinResumePct',
        'max_resume_pct' => 'getMaxResumePct',
        'min_resume_duration_seconds' => 'getMinResumeDurationSeconds',
        'min_audiobook_resume' => 'getMinAudiobookResume',
        'max_audiobook_resume' => 'getMaxAudiobookResume',
        'library_monitor_delay' => 'getLibraryMonitorDelay',
        'image_saving_convention' => 'getImageSavingConvention',
        'metadata_options' => 'getMetadataOptions',
        'skip_deserialization_for_basic_types' => 'getSkipDeserializationForBasicTypes',
        'server_name' => 'getServerName',
        'ui_culture' => 'getUiCulture',
        'save_metadata_hidden' => 'getSaveMetadataHidden',
        'content_types' => 'getContentTypes',
        'remote_client_bitrate_limit' => 'getRemoteClientBitrateLimit',
        'enable_folder_view' => 'getEnableFolderView',
        'enable_grouping_into_collections' => 'getEnableGroupingIntoCollections',
        'display_specials_within_seasons' => 'getDisplaySpecialsWithinSeasons',
        'codecs_used' => 'getCodecsUsed',
        'plugin_repositories' => 'getPluginRepositories',
        'enable_external_content_in_suggestions' => 'getEnableExternalContentInSuggestions',
        'image_extraction_timeout_ms' => 'getImageExtractionTimeoutMs',
        'path_substitutions' => 'getPathSubstitutions',
        'enable_slow_response_warning' => 'getEnableSlowResponseWarning',
        'slow_response_threshold_ms' => 'getSlowResponseThresholdMs',
        'cors_hosts' => 'getCorsHosts',
        'activity_log_retention_days' => 'getActivityLogRetentionDays',
        'library_scan_fanout_concurrency' => 'getLibraryScanFanoutConcurrency',
        'library_metadata_refresh_concurrency' => 'getLibraryMetadataRefreshConcurrency',
        'remove_old_plugins' => 'getRemoveOldPlugins',
        'allow_client_log_upload' => 'getAllowClientLogUpload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('log_file_retention_days', $data ?? [], null);
        $this->setIfExists('is_startup_wizard_completed', $data ?? [], null);
        $this->setIfExists('cache_path', $data ?? [], null);
        $this->setIfExists('previous_version', $data ?? [], null);
        $this->setIfExists('previous_version_str', $data ?? [], null);
        $this->setIfExists('enable_metrics', $data ?? [], null);
        $this->setIfExists('enable_normalized_item_by_name_ids', $data ?? [], null);
        $this->setIfExists('is_port_authorized', $data ?? [], null);
        $this->setIfExists('quick_connect_available', $data ?? [], null);
        $this->setIfExists('enable_case_sensitive_item_ids', $data ?? [], null);
        $this->setIfExists('disable_live_tv_channel_user_data_name', $data ?? [], null);
        $this->setIfExists('metadata_path', $data ?? [], null);
        $this->setIfExists('metadata_network_path', $data ?? [], null);
        $this->setIfExists('preferred_metadata_language', $data ?? [], null);
        $this->setIfExists('metadata_country_code', $data ?? [], null);
        $this->setIfExists('sort_replace_characters', $data ?? [], null);
        $this->setIfExists('sort_remove_characters', $data ?? [], null);
        $this->setIfExists('sort_remove_words', $data ?? [], null);
        $this->setIfExists('min_resume_pct', $data ?? [], null);
        $this->setIfExists('max_resume_pct', $data ?? [], null);
        $this->setIfExists('min_resume_duration_seconds', $data ?? [], null);
        $this->setIfExists('min_audiobook_resume', $data ?? [], null);
        $this->setIfExists('max_audiobook_resume', $data ?? [], null);
        $this->setIfExists('library_monitor_delay', $data ?? [], null);
        $this->setIfExists('image_saving_convention', $data ?? [], null);
        $this->setIfExists('metadata_options', $data ?? [], null);
        $this->setIfExists('skip_deserialization_for_basic_types', $data ?? [], null);
        $this->setIfExists('server_name', $data ?? [], null);
        $this->setIfExists('ui_culture', $data ?? [], null);
        $this->setIfExists('save_metadata_hidden', $data ?? [], null);
        $this->setIfExists('content_types', $data ?? [], null);
        $this->setIfExists('remote_client_bitrate_limit', $data ?? [], null);
        $this->setIfExists('enable_folder_view', $data ?? [], null);
        $this->setIfExists('enable_grouping_into_collections', $data ?? [], null);
        $this->setIfExists('display_specials_within_seasons', $data ?? [], null);
        $this->setIfExists('codecs_used', $data ?? [], null);
        $this->setIfExists('plugin_repositories', $data ?? [], null);
        $this->setIfExists('enable_external_content_in_suggestions', $data ?? [], null);
        $this->setIfExists('image_extraction_timeout_ms', $data ?? [], null);
        $this->setIfExists('path_substitutions', $data ?? [], null);
        $this->setIfExists('enable_slow_response_warning', $data ?? [], null);
        $this->setIfExists('slow_response_threshold_ms', $data ?? [], null);
        $this->setIfExists('cors_hosts', $data ?? [], null);
        $this->setIfExists('activity_log_retention_days', $data ?? [], null);
        $this->setIfExists('library_scan_fanout_concurrency', $data ?? [], null);
        $this->setIfExists('library_metadata_refresh_concurrency', $data ?? [], null);
        $this->setIfExists('remove_old_plugins', $data ?? [], null);
        $this->setIfExists('allow_client_log_upload', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets log_file_retention_days
     *
     * @return int|null
     */
    public function getLogFileRetentionDays()
    {
        return $this->container['log_file_retention_days'];
    }

    /**
     * Sets log_file_retention_days
     *
     * @param int|null $log_file_retention_days Gets or sets the number of days we should retain log files.
     *
     * @return self
     */
    public function setLogFileRetentionDays($log_file_retention_days)
    {
        if (is_null($log_file_retention_days)) {
            throw new \InvalidArgumentException('non-nullable log_file_retention_days cannot be null');
        }
        $this->container['log_file_retention_days'] = $log_file_retention_days;

        return $this;
    }

    /**
     * Gets is_startup_wizard_completed
     *
     * @return bool|null
     */
    public function getIsStartupWizardCompleted()
    {
        return $this->container['is_startup_wizard_completed'];
    }

    /**
     * Sets is_startup_wizard_completed
     *
     * @param bool|null $is_startup_wizard_completed Gets or sets a value indicating whether this instance is first run.
     *
     * @return self
     */
    public function setIsStartupWizardCompleted($is_startup_wizard_completed)
    {
        if (is_null($is_startup_wizard_completed)) {
            throw new \InvalidArgumentException('non-nullable is_startup_wizard_completed cannot be null');
        }
        $this->container['is_startup_wizard_completed'] = $is_startup_wizard_completed;

        return $this;
    }

    /**
     * Gets cache_path
     *
     * @return string|null
     */
    public function getCachePath()
    {
        return $this->container['cache_path'];
    }

    /**
     * Sets cache_path
     *
     * @param string|null $cache_path Gets or sets the cache path.
     *
     * @return self
     */
    public function setCachePath($cache_path)
    {
        if (is_null($cache_path)) {
            array_push($this->openAPINullablesSetToNull, 'cache_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cache_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cache_path'] = $cache_path;

        return $this;
    }

    /**
     * Gets previous_version
     *
     * @return string|null
     */
    public function getPreviousVersion()
    {
        return $this->container['previous_version'];
    }

    /**
     * Sets previous_version
     *
     * @param string|null $previous_version Gets or sets the last known version that was ran using the configuration.
     *
     * @return self
     */
    public function setPreviousVersion($previous_version)
    {
        if (is_null($previous_version)) {
            array_push($this->openAPINullablesSetToNull, 'previous_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_version'] = $previous_version;

        return $this;
    }

    /**
     * Gets previous_version_str
     *
     * @return string|null
     */
    public function getPreviousVersionStr()
    {
        return $this->container['previous_version_str'];
    }

    /**
     * Sets previous_version_str
     *
     * @param string|null $previous_version_str Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn't xml-serializable.
     *
     * @return self
     */
    public function setPreviousVersionStr($previous_version_str)
    {
        if (is_null($previous_version_str)) {
            array_push($this->openAPINullablesSetToNull, 'previous_version_str');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_version_str', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_version_str'] = $previous_version_str;

        return $this;
    }

    /**
     * Gets enable_metrics
     *
     * @return bool|null
     */
    public function getEnableMetrics()
    {
        return $this->container['enable_metrics'];
    }

    /**
     * Sets enable_metrics
     *
     * @param bool|null $enable_metrics Gets or sets a value indicating whether to enable prometheus metrics exporting.
     *
     * @return self
     */
    public function setEnableMetrics($enable_metrics)
    {
        if (is_null($enable_metrics)) {
            throw new \InvalidArgumentException('non-nullable enable_metrics cannot be null');
        }
        $this->container['enable_metrics'] = $enable_metrics;

        return $this;
    }

    /**
     * Gets enable_normalized_item_by_name_ids
     *
     * @return bool|null
     */
    public function getEnableNormalizedItemByNameIds()
    {
        return $this->container['enable_normalized_item_by_name_ids'];
    }

    /**
     * Sets enable_normalized_item_by_name_ids
     *
     * @param bool|null $enable_normalized_item_by_name_ids enable_normalized_item_by_name_ids
     *
     * @return self
     */
    public function setEnableNormalizedItemByNameIds($enable_normalized_item_by_name_ids)
    {
        if (is_null($enable_normalized_item_by_name_ids)) {
            throw new \InvalidArgumentException('non-nullable enable_normalized_item_by_name_ids cannot be null');
        }
        $this->container['enable_normalized_item_by_name_ids'] = $enable_normalized_item_by_name_ids;

        return $this;
    }

    /**
     * Gets is_port_authorized
     *
     * @return bool|null
     */
    public function getIsPortAuthorized()
    {
        return $this->container['is_port_authorized'];
    }

    /**
     * Sets is_port_authorized
     *
     * @param bool|null $is_port_authorized Gets or sets a value indicating whether this instance is port authorized.
     *
     * @return self
     */
    public function setIsPortAuthorized($is_port_authorized)
    {
        if (is_null($is_port_authorized)) {
            throw new \InvalidArgumentException('non-nullable is_port_authorized cannot be null');
        }
        $this->container['is_port_authorized'] = $is_port_authorized;

        return $this;
    }

    /**
     * Gets quick_connect_available
     *
     * @return bool|null
     */
    public function getQuickConnectAvailable()
    {
        return $this->container['quick_connect_available'];
    }

    /**
     * Sets quick_connect_available
     *
     * @param bool|null $quick_connect_available Gets or sets a value indicating whether quick connect is available for use on this server.
     *
     * @return self
     */
    public function setQuickConnectAvailable($quick_connect_available)
    {
        if (is_null($quick_connect_available)) {
            throw new \InvalidArgumentException('non-nullable quick_connect_available cannot be null');
        }
        $this->container['quick_connect_available'] = $quick_connect_available;

        return $this;
    }

    /**
     * Gets enable_case_sensitive_item_ids
     *
     * @return bool|null
     */
    public function getEnableCaseSensitiveItemIds()
    {
        return $this->container['enable_case_sensitive_item_ids'];
    }

    /**
     * Sets enable_case_sensitive_item_ids
     *
     * @param bool|null $enable_case_sensitive_item_ids Gets or sets a value indicating whether [enable case sensitive item ids].
     *
     * @return self
     */
    public function setEnableCaseSensitiveItemIds($enable_case_sensitive_item_ids)
    {
        if (is_null($enable_case_sensitive_item_ids)) {
            throw new \InvalidArgumentException('non-nullable enable_case_sensitive_item_ids cannot be null');
        }
        $this->container['enable_case_sensitive_item_ids'] = $enable_case_sensitive_item_ids;

        return $this;
    }

    /**
     * Gets disable_live_tv_channel_user_data_name
     *
     * @return bool|null
     */
    public function getDisableLiveTvChannelUserDataName()
    {
        return $this->container['disable_live_tv_channel_user_data_name'];
    }

    /**
     * Sets disable_live_tv_channel_user_data_name
     *
     * @param bool|null $disable_live_tv_channel_user_data_name disable_live_tv_channel_user_data_name
     *
     * @return self
     */
    public function setDisableLiveTvChannelUserDataName($disable_live_tv_channel_user_data_name)
    {
        if (is_null($disable_live_tv_channel_user_data_name)) {
            throw new \InvalidArgumentException('non-nullable disable_live_tv_channel_user_data_name cannot be null');
        }
        $this->container['disable_live_tv_channel_user_data_name'] = $disable_live_tv_channel_user_data_name;

        return $this;
    }

    /**
     * Gets metadata_path
     *
     * @return string|null
     */
    public function getMetadataPath()
    {
        return $this->container['metadata_path'];
    }

    /**
     * Sets metadata_path
     *
     * @param string|null $metadata_path Gets or sets the metadata path.
     *
     * @return self
     */
    public function setMetadataPath($metadata_path)
    {
        if (is_null($metadata_path)) {
            throw new \InvalidArgumentException('non-nullable metadata_path cannot be null');
        }
        $this->container['metadata_path'] = $metadata_path;

        return $this;
    }

    /**
     * Gets metadata_network_path
     *
     * @return string|null
     */
    public function getMetadataNetworkPath()
    {
        return $this->container['metadata_network_path'];
    }

    /**
     * Sets metadata_network_path
     *
     * @param string|null $metadata_network_path metadata_network_path
     *
     * @return self
     */
    public function setMetadataNetworkPath($metadata_network_path)
    {
        if (is_null($metadata_network_path)) {
            throw new \InvalidArgumentException('non-nullable metadata_network_path cannot be null');
        }
        $this->container['metadata_network_path'] = $metadata_network_path;

        return $this;
    }

    /**
     * Gets preferred_metadata_language
     *
     * @return string|null
     */
    public function getPreferredMetadataLanguage()
    {
        return $this->container['preferred_metadata_language'];
    }

    /**
     * Sets preferred_metadata_language
     *
     * @param string|null $preferred_metadata_language Gets or sets the preferred metadata language.
     *
     * @return self
     */
    public function setPreferredMetadataLanguage($preferred_metadata_language)
    {
        if (is_null($preferred_metadata_language)) {
            throw new \InvalidArgumentException('non-nullable preferred_metadata_language cannot be null');
        }
        $this->container['preferred_metadata_language'] = $preferred_metadata_language;

        return $this;
    }

    /**
     * Gets metadata_country_code
     *
     * @return string|null
     */
    public function getMetadataCountryCode()
    {
        return $this->container['metadata_country_code'];
    }

    /**
     * Sets metadata_country_code
     *
     * @param string|null $metadata_country_code Gets or sets the metadata country code.
     *
     * @return self
     */
    public function setMetadataCountryCode($metadata_country_code)
    {
        if (is_null($metadata_country_code)) {
            throw new \InvalidArgumentException('non-nullable metadata_country_code cannot be null');
        }
        $this->container['metadata_country_code'] = $metadata_country_code;

        return $this;
    }

    /**
     * Gets sort_replace_characters
     *
     * @return string[]|null
     */
    public function getSortReplaceCharacters()
    {
        return $this->container['sort_replace_characters'];
    }

    /**
     * Sets sort_replace_characters
     *
     * @param string[]|null $sort_replace_characters Gets or sets characters to be replaced with a ' ' in strings to create a sort name.
     *
     * @return self
     */
    public function setSortReplaceCharacters($sort_replace_characters)
    {
        if (is_null($sort_replace_characters)) {
            throw new \InvalidArgumentException('non-nullable sort_replace_characters cannot be null');
        }
        $this->container['sort_replace_characters'] = $sort_replace_characters;

        return $this;
    }

    /**
     * Gets sort_remove_characters
     *
     * @return string[]|null
     */
    public function getSortRemoveCharacters()
    {
        return $this->container['sort_remove_characters'];
    }

    /**
     * Sets sort_remove_characters
     *
     * @param string[]|null $sort_remove_characters Gets or sets characters to be removed from strings to create a sort name.
     *
     * @return self
     */
    public function setSortRemoveCharacters($sort_remove_characters)
    {
        if (is_null($sort_remove_characters)) {
            throw new \InvalidArgumentException('non-nullable sort_remove_characters cannot be null');
        }
        $this->container['sort_remove_characters'] = $sort_remove_characters;

        return $this;
    }

    /**
     * Gets sort_remove_words
     *
     * @return string[]|null
     */
    public function getSortRemoveWords()
    {
        return $this->container['sort_remove_words'];
    }

    /**
     * Sets sort_remove_words
     *
     * @param string[]|null $sort_remove_words Gets or sets words to be removed from strings to create a sort name.
     *
     * @return self
     */
    public function setSortRemoveWords($sort_remove_words)
    {
        if (is_null($sort_remove_words)) {
            throw new \InvalidArgumentException('non-nullable sort_remove_words cannot be null');
        }
        $this->container['sort_remove_words'] = $sort_remove_words;

        return $this;
    }

    /**
     * Gets min_resume_pct
     *
     * @return int|null
     */
    public function getMinResumePct()
    {
        return $this->container['min_resume_pct'];
    }

    /**
     * Sets min_resume_pct
     *
     * @param int|null $min_resume_pct Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.
     *
     * @return self
     */
    public function setMinResumePct($min_resume_pct)
    {
        if (is_null($min_resume_pct)) {
            throw new \InvalidArgumentException('non-nullable min_resume_pct cannot be null');
        }
        $this->container['min_resume_pct'] = $min_resume_pct;

        return $this;
    }

    /**
     * Gets max_resume_pct
     *
     * @return int|null
     */
    public function getMaxResumePct()
    {
        return $this->container['max_resume_pct'];
    }

    /**
     * Sets max_resume_pct
     *
     * @param int|null $max_resume_pct Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
     *
     * @return self
     */
    public function setMaxResumePct($max_resume_pct)
    {
        if (is_null($max_resume_pct)) {
            throw new \InvalidArgumentException('non-nullable max_resume_pct cannot be null');
        }
        $this->container['max_resume_pct'] = $max_resume_pct;

        return $this;
    }

    /**
     * Gets min_resume_duration_seconds
     *
     * @return int|null
     */
    public function getMinResumeDurationSeconds()
    {
        return $this->container['min_resume_duration_seconds'];
    }

    /**
     * Sets min_resume_duration_seconds
     *
     * @param int|null $min_resume_duration_seconds Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..
     *
     * @return self
     */
    public function setMinResumeDurationSeconds($min_resume_duration_seconds)
    {
        if (is_null($min_resume_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable min_resume_duration_seconds cannot be null');
        }
        $this->container['min_resume_duration_seconds'] = $min_resume_duration_seconds;

        return $this;
    }

    /**
     * Gets min_audiobook_resume
     *
     * @return int|null
     */
    public function getMinAudiobookResume()
    {
        return $this->container['min_audiobook_resume'];
    }

    /**
     * Sets min_audiobook_resume
     *
     * @param int|null $min_audiobook_resume Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.
     *
     * @return self
     */
    public function setMinAudiobookResume($min_audiobook_resume)
    {
        if (is_null($min_audiobook_resume)) {
            throw new \InvalidArgumentException('non-nullable min_audiobook_resume cannot be null');
        }
        $this->container['min_audiobook_resume'] = $min_audiobook_resume;

        return $this;
    }

    /**
     * Gets max_audiobook_resume
     *
     * @return int|null
     */
    public function getMaxAudiobookResume()
    {
        return $this->container['max_audiobook_resume'];
    }

    /**
     * Sets max_audiobook_resume
     *
     * @param int|null $max_audiobook_resume Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
     *
     * @return self
     */
    public function setMaxAudiobookResume($max_audiobook_resume)
    {
        if (is_null($max_audiobook_resume)) {
            throw new \InvalidArgumentException('non-nullable max_audiobook_resume cannot be null');
        }
        $this->container['max_audiobook_resume'] = $max_audiobook_resume;

        return $this;
    }

    /**
     * Gets library_monitor_delay
     *
     * @return int|null
     */
    public function getLibraryMonitorDelay()
    {
        return $this->container['library_monitor_delay'];
    }

    /**
     * Sets library_monitor_delay
     *
     * @param int|null $library_monitor_delay Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.
     *
     * @return self
     */
    public function setLibraryMonitorDelay($library_monitor_delay)
    {
        if (is_null($library_monitor_delay)) {
            throw new \InvalidArgumentException('non-nullable library_monitor_delay cannot be null');
        }
        $this->container['library_monitor_delay'] = $library_monitor_delay;

        return $this;
    }

    /**
     * Gets image_saving_convention
     *
     * @return \OpenAPI\Client\Model\ImageSavingConvention|null
     */
    public function getImageSavingConvention()
    {
        return $this->container['image_saving_convention'];
    }

    /**
     * Sets image_saving_convention
     *
     * @param \OpenAPI\Client\Model\ImageSavingConvention|null $image_saving_convention image_saving_convention
     *
     * @return self
     */
    public function setImageSavingConvention($image_saving_convention)
    {
        if (is_null($image_saving_convention)) {
            throw new \InvalidArgumentException('non-nullable image_saving_convention cannot be null');
        }
        $this->container['image_saving_convention'] = $image_saving_convention;

        return $this;
    }

    /**
     * Gets metadata_options
     *
     * @return \OpenAPI\Client\Model\MetadataOptions[]|null
     */
    public function getMetadataOptions()
    {
        return $this->container['metadata_options'];
    }

    /**
     * Sets metadata_options
     *
     * @param \OpenAPI\Client\Model\MetadataOptions[]|null $metadata_options metadata_options
     *
     * @return self
     */
    public function setMetadataOptions($metadata_options)
    {
        if (is_null($metadata_options)) {
            throw new \InvalidArgumentException('non-nullable metadata_options cannot be null');
        }
        $this->container['metadata_options'] = $metadata_options;

        return $this;
    }

    /**
     * Gets skip_deserialization_for_basic_types
     *
     * @return bool|null
     */
    public function getSkipDeserializationForBasicTypes()
    {
        return $this->container['skip_deserialization_for_basic_types'];
    }

    /**
     * Sets skip_deserialization_for_basic_types
     *
     * @param bool|null $skip_deserialization_for_basic_types skip_deserialization_for_basic_types
     *
     * @return self
     */
    public function setSkipDeserializationForBasicTypes($skip_deserialization_for_basic_types)
    {
        if (is_null($skip_deserialization_for_basic_types)) {
            throw new \InvalidArgumentException('non-nullable skip_deserialization_for_basic_types cannot be null');
        }
        $this->container['skip_deserialization_for_basic_types'] = $skip_deserialization_for_basic_types;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string|null
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string|null $server_name server_name
     *
     * @return self
     */
    public function setServerName($server_name)
    {
        if (is_null($server_name)) {
            throw new \InvalidArgumentException('non-nullable server_name cannot be null');
        }
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets ui_culture
     *
     * @return string|null
     */
    public function getUiCulture()
    {
        return $this->container['ui_culture'];
    }

    /**
     * Sets ui_culture
     *
     * @param string|null $ui_culture ui_culture
     *
     * @return self
     */
    public function setUiCulture($ui_culture)
    {
        if (is_null($ui_culture)) {
            throw new \InvalidArgumentException('non-nullable ui_culture cannot be null');
        }
        $this->container['ui_culture'] = $ui_culture;

        return $this;
    }

    /**
     * Gets save_metadata_hidden
     *
     * @return bool|null
     */
    public function getSaveMetadataHidden()
    {
        return $this->container['save_metadata_hidden'];
    }

    /**
     * Sets save_metadata_hidden
     *
     * @param bool|null $save_metadata_hidden save_metadata_hidden
     *
     * @return self
     */
    public function setSaveMetadataHidden($save_metadata_hidden)
    {
        if (is_null($save_metadata_hidden)) {
            throw new \InvalidArgumentException('non-nullable save_metadata_hidden cannot be null');
        }
        $this->container['save_metadata_hidden'] = $save_metadata_hidden;

        return $this;
    }

    /**
     * Gets content_types
     *
     * @return \OpenAPI\Client\Model\NameValuePair[]|null
     */
    public function getContentTypes()
    {
        return $this->container['content_types'];
    }

    /**
     * Sets content_types
     *
     * @param \OpenAPI\Client\Model\NameValuePair[]|null $content_types content_types
     *
     * @return self
     */
    public function setContentTypes($content_types)
    {
        if (is_null($content_types)) {
            throw new \InvalidArgumentException('non-nullable content_types cannot be null');
        }
        $this->container['content_types'] = $content_types;

        return $this;
    }

    /**
     * Gets remote_client_bitrate_limit
     *
     * @return int|null
     */
    public function getRemoteClientBitrateLimit()
    {
        return $this->container['remote_client_bitrate_limit'];
    }

    /**
     * Sets remote_client_bitrate_limit
     *
     * @param int|null $remote_client_bitrate_limit remote_client_bitrate_limit
     *
     * @return self
     */
    public function setRemoteClientBitrateLimit($remote_client_bitrate_limit)
    {
        if (is_null($remote_client_bitrate_limit)) {
            throw new \InvalidArgumentException('non-nullable remote_client_bitrate_limit cannot be null');
        }
        $this->container['remote_client_bitrate_limit'] = $remote_client_bitrate_limit;

        return $this;
    }

    /**
     * Gets enable_folder_view
     *
     * @return bool|null
     */
    public function getEnableFolderView()
    {
        return $this->container['enable_folder_view'];
    }

    /**
     * Sets enable_folder_view
     *
     * @param bool|null $enable_folder_view enable_folder_view
     *
     * @return self
     */
    public function setEnableFolderView($enable_folder_view)
    {
        if (is_null($enable_folder_view)) {
            throw new \InvalidArgumentException('non-nullable enable_folder_view cannot be null');
        }
        $this->container['enable_folder_view'] = $enable_folder_view;

        return $this;
    }

    /**
     * Gets enable_grouping_into_collections
     *
     * @return bool|null
     */
    public function getEnableGroupingIntoCollections()
    {
        return $this->container['enable_grouping_into_collections'];
    }

    /**
     * Sets enable_grouping_into_collections
     *
     * @param bool|null $enable_grouping_into_collections enable_grouping_into_collections
     *
     * @return self
     */
    public function setEnableGroupingIntoCollections($enable_grouping_into_collections)
    {
        if (is_null($enable_grouping_into_collections)) {
            throw new \InvalidArgumentException('non-nullable enable_grouping_into_collections cannot be null');
        }
        $this->container['enable_grouping_into_collections'] = $enable_grouping_into_collections;

        return $this;
    }

    /**
     * Gets display_specials_within_seasons
     *
     * @return bool|null
     */
    public function getDisplaySpecialsWithinSeasons()
    {
        return $this->container['display_specials_within_seasons'];
    }

    /**
     * Sets display_specials_within_seasons
     *
     * @param bool|null $display_specials_within_seasons display_specials_within_seasons
     *
     * @return self
     */
    public function setDisplaySpecialsWithinSeasons($display_specials_within_seasons)
    {
        if (is_null($display_specials_within_seasons)) {
            throw new \InvalidArgumentException('non-nullable display_specials_within_seasons cannot be null');
        }
        $this->container['display_specials_within_seasons'] = $display_specials_within_seasons;

        return $this;
    }

    /**
     * Gets codecs_used
     *
     * @return string[]|null
     */
    public function getCodecsUsed()
    {
        return $this->container['codecs_used'];
    }

    /**
     * Sets codecs_used
     *
     * @param string[]|null $codecs_used codecs_used
     *
     * @return self
     */
    public function setCodecsUsed($codecs_used)
    {
        if (is_null($codecs_used)) {
            throw new \InvalidArgumentException('non-nullable codecs_used cannot be null');
        }
        $this->container['codecs_used'] = $codecs_used;

        return $this;
    }

    /**
     * Gets plugin_repositories
     *
     * @return \OpenAPI\Client\Model\RepositoryInfo[]|null
     */
    public function getPluginRepositories()
    {
        return $this->container['plugin_repositories'];
    }

    /**
     * Sets plugin_repositories
     *
     * @param \OpenAPI\Client\Model\RepositoryInfo[]|null $plugin_repositories plugin_repositories
     *
     * @return self
     */
    public function setPluginRepositories($plugin_repositories)
    {
        if (is_null($plugin_repositories)) {
            throw new \InvalidArgumentException('non-nullable plugin_repositories cannot be null');
        }
        $this->container['plugin_repositories'] = $plugin_repositories;

        return $this;
    }

    /**
     * Gets enable_external_content_in_suggestions
     *
     * @return bool|null
     */
    public function getEnableExternalContentInSuggestions()
    {
        return $this->container['enable_external_content_in_suggestions'];
    }

    /**
     * Sets enable_external_content_in_suggestions
     *
     * @param bool|null $enable_external_content_in_suggestions enable_external_content_in_suggestions
     *
     * @return self
     */
    public function setEnableExternalContentInSuggestions($enable_external_content_in_suggestions)
    {
        if (is_null($enable_external_content_in_suggestions)) {
            throw new \InvalidArgumentException('non-nullable enable_external_content_in_suggestions cannot be null');
        }
        $this->container['enable_external_content_in_suggestions'] = $enable_external_content_in_suggestions;

        return $this;
    }

    /**
     * Gets image_extraction_timeout_ms
     *
     * @return int|null
     */
    public function getImageExtractionTimeoutMs()
    {
        return $this->container['image_extraction_timeout_ms'];
    }

    /**
     * Sets image_extraction_timeout_ms
     *
     * @param int|null $image_extraction_timeout_ms image_extraction_timeout_ms
     *
     * @return self
     */
    public function setImageExtractionTimeoutMs($image_extraction_timeout_ms)
    {
        if (is_null($image_extraction_timeout_ms)) {
            throw new \InvalidArgumentException('non-nullable image_extraction_timeout_ms cannot be null');
        }
        $this->container['image_extraction_timeout_ms'] = $image_extraction_timeout_ms;

        return $this;
    }

    /**
     * Gets path_substitutions
     *
     * @return \OpenAPI\Client\Model\PathSubstitution[]|null
     */
    public function getPathSubstitutions()
    {
        return $this->container['path_substitutions'];
    }

    /**
     * Sets path_substitutions
     *
     * @param \OpenAPI\Client\Model\PathSubstitution[]|null $path_substitutions path_substitutions
     *
     * @return self
     */
    public function setPathSubstitutions($path_substitutions)
    {
        if (is_null($path_substitutions)) {
            throw new \InvalidArgumentException('non-nullable path_substitutions cannot be null');
        }
        $this->container['path_substitutions'] = $path_substitutions;

        return $this;
    }

    /**
     * Gets enable_slow_response_warning
     *
     * @return bool|null
     */
    public function getEnableSlowResponseWarning()
    {
        return $this->container['enable_slow_response_warning'];
    }

    /**
     * Sets enable_slow_response_warning
     *
     * @param bool|null $enable_slow_response_warning Gets or sets a value indicating whether slow server responses should be logged as a warning.
     *
     * @return self
     */
    public function setEnableSlowResponseWarning($enable_slow_response_warning)
    {
        if (is_null($enable_slow_response_warning)) {
            throw new \InvalidArgumentException('non-nullable enable_slow_response_warning cannot be null');
        }
        $this->container['enable_slow_response_warning'] = $enable_slow_response_warning;

        return $this;
    }

    /**
     * Gets slow_response_threshold_ms
     *
     * @return int|null
     */
    public function getSlowResponseThresholdMs()
    {
        return $this->container['slow_response_threshold_ms'];
    }

    /**
     * Sets slow_response_threshold_ms
     *
     * @param int|null $slow_response_threshold_ms Gets or sets the threshold for the slow response time warning in ms.
     *
     * @return self
     */
    public function setSlowResponseThresholdMs($slow_response_threshold_ms)
    {
        if (is_null($slow_response_threshold_ms)) {
            throw new \InvalidArgumentException('non-nullable slow_response_threshold_ms cannot be null');
        }
        $this->container['slow_response_threshold_ms'] = $slow_response_threshold_ms;

        return $this;
    }

    /**
     * Gets cors_hosts
     *
     * @return string[]|null
     */
    public function getCorsHosts()
    {
        return $this->container['cors_hosts'];
    }

    /**
     * Sets cors_hosts
     *
     * @param string[]|null $cors_hosts Gets or sets the cors hosts.
     *
     * @return self
     */
    public function setCorsHosts($cors_hosts)
    {
        if (is_null($cors_hosts)) {
            throw new \InvalidArgumentException('non-nullable cors_hosts cannot be null');
        }
        $this->container['cors_hosts'] = $cors_hosts;

        return $this;
    }

    /**
     * Gets activity_log_retention_days
     *
     * @return int|null
     */
    public function getActivityLogRetentionDays()
    {
        return $this->container['activity_log_retention_days'];
    }

    /**
     * Sets activity_log_retention_days
     *
     * @param int|null $activity_log_retention_days Gets or sets the number of days we should retain activity logs.
     *
     * @return self
     */
    public function setActivityLogRetentionDays($activity_log_retention_days)
    {
        if (is_null($activity_log_retention_days)) {
            array_push($this->openAPINullablesSetToNull, 'activity_log_retention_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_log_retention_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_log_retention_days'] = $activity_log_retention_days;

        return $this;
    }

    /**
     * Gets library_scan_fanout_concurrency
     *
     * @return int|null
     */
    public function getLibraryScanFanoutConcurrency()
    {
        return $this->container['library_scan_fanout_concurrency'];
    }

    /**
     * Sets library_scan_fanout_concurrency
     *
     * @param int|null $library_scan_fanout_concurrency Gets or sets the how the library scan fans out.
     *
     * @return self
     */
    public function setLibraryScanFanoutConcurrency($library_scan_fanout_concurrency)
    {
        if (is_null($library_scan_fanout_concurrency)) {
            throw new \InvalidArgumentException('non-nullable library_scan_fanout_concurrency cannot be null');
        }
        $this->container['library_scan_fanout_concurrency'] = $library_scan_fanout_concurrency;

        return $this;
    }

    /**
     * Gets library_metadata_refresh_concurrency
     *
     * @return int|null
     */
    public function getLibraryMetadataRefreshConcurrency()
    {
        return $this->container['library_metadata_refresh_concurrency'];
    }

    /**
     * Sets library_metadata_refresh_concurrency
     *
     * @param int|null $library_metadata_refresh_concurrency Gets or sets the how many metadata refreshes can run concurrently.
     *
     * @return self
     */
    public function setLibraryMetadataRefreshConcurrency($library_metadata_refresh_concurrency)
    {
        if (is_null($library_metadata_refresh_concurrency)) {
            throw new \InvalidArgumentException('non-nullable library_metadata_refresh_concurrency cannot be null');
        }
        $this->container['library_metadata_refresh_concurrency'] = $library_metadata_refresh_concurrency;

        return $this;
    }

    /**
     * Gets remove_old_plugins
     *
     * @return bool|null
     */
    public function getRemoveOldPlugins()
    {
        return $this->container['remove_old_plugins'];
    }

    /**
     * Sets remove_old_plugins
     *
     * @param bool|null $remove_old_plugins Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.
     *
     * @return self
     */
    public function setRemoveOldPlugins($remove_old_plugins)
    {
        if (is_null($remove_old_plugins)) {
            throw new \InvalidArgumentException('non-nullable remove_old_plugins cannot be null');
        }
        $this->container['remove_old_plugins'] = $remove_old_plugins;

        return $this;
    }

    /**
     * Gets allow_client_log_upload
     *
     * @return bool|null
     */
    public function getAllowClientLogUpload()
    {
        return $this->container['allow_client_log_upload'];
    }

    /**
     * Sets allow_client_log_upload
     *
     * @param bool|null $allow_client_log_upload Gets or sets a value indicating whether clients should be allowed to upload logs.
     *
     * @return self
     */
    public function setAllowClientLogUpload($allow_client_log_upload)
    {
        if (is_null($allow_client_log_upload)) {
            throw new \InvalidArgumentException('non-nullable allow_client_log_upload cannot be null');
        }
        $this->container['allow_client_log_upload'] = $allow_client_log_upload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


