<?php
/**
 * BaseItemPersonImageBlurHashes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BaseItemPersonImageBlurHashes Class Doc Comment
 *
 * @category Class
 * @description Gets or sets the primary image blurhash.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BaseItemPersonImageBlurHashes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BaseItemPerson_ImageBlurHashes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'primary' => 'array<string,string>',
        'art' => 'array<string,string>',
        'backdrop' => 'array<string,string>',
        'banner' => 'array<string,string>',
        'logo' => 'array<string,string>',
        'thumb' => 'array<string,string>',
        'disc' => 'array<string,string>',
        'box' => 'array<string,string>',
        'screenshot' => 'array<string,string>',
        'menu' => 'array<string,string>',
        'chapter' => 'array<string,string>',
        'box_rear' => 'array<string,string>',
        'profile' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'primary' => null,
        'art' => null,
        'backdrop' => null,
        'banner' => null,
        'logo' => null,
        'thumb' => null,
        'disc' => null,
        'box' => null,
        'screenshot' => null,
        'menu' => null,
        'chapter' => null,
        'box_rear' => null,
        'profile' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'primary' => false,
		'art' => false,
		'backdrop' => false,
		'banner' => false,
		'logo' => false,
		'thumb' => false,
		'disc' => false,
		'box' => false,
		'screenshot' => false,
		'menu' => false,
		'chapter' => false,
		'box_rear' => false,
		'profile' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'primary' => 'Primary',
        'art' => 'Art',
        'backdrop' => 'Backdrop',
        'banner' => 'Banner',
        'logo' => 'Logo',
        'thumb' => 'Thumb',
        'disc' => 'Disc',
        'box' => 'Box',
        'screenshot' => 'Screenshot',
        'menu' => 'Menu',
        'chapter' => 'Chapter',
        'box_rear' => 'BoxRear',
        'profile' => 'Profile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'primary' => 'setPrimary',
        'art' => 'setArt',
        'backdrop' => 'setBackdrop',
        'banner' => 'setBanner',
        'logo' => 'setLogo',
        'thumb' => 'setThumb',
        'disc' => 'setDisc',
        'box' => 'setBox',
        'screenshot' => 'setScreenshot',
        'menu' => 'setMenu',
        'chapter' => 'setChapter',
        'box_rear' => 'setBoxRear',
        'profile' => 'setProfile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'primary' => 'getPrimary',
        'art' => 'getArt',
        'backdrop' => 'getBackdrop',
        'banner' => 'getBanner',
        'logo' => 'getLogo',
        'thumb' => 'getThumb',
        'disc' => 'getDisc',
        'box' => 'getBox',
        'screenshot' => 'getScreenshot',
        'menu' => 'getMenu',
        'chapter' => 'getChapter',
        'box_rear' => 'getBoxRear',
        'profile' => 'getProfile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('primary', $data ?? [], null);
        $this->setIfExists('art', $data ?? [], null);
        $this->setIfExists('backdrop', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('thumb', $data ?? [], null);
        $this->setIfExists('disc', $data ?? [], null);
        $this->setIfExists('box', $data ?? [], null);
        $this->setIfExists('screenshot', $data ?? [], null);
        $this->setIfExists('menu', $data ?? [], null);
        $this->setIfExists('chapter', $data ?? [], null);
        $this->setIfExists('box_rear', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets primary
     *
     * @return array<string,string>|null
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param array<string,string>|null $primary primary
     *
     * @return self
     */
    public function setPrimary($primary)
    {
        if (is_null($primary)) {
            throw new \InvalidArgumentException('non-nullable primary cannot be null');
        }
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets art
     *
     * @return array<string,string>|null
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     *
     * @param array<string,string>|null $art art
     *
     * @return self
     */
    public function setArt($art)
    {
        if (is_null($art)) {
            throw new \InvalidArgumentException('non-nullable art cannot be null');
        }
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets backdrop
     *
     * @return array<string,string>|null
     */
    public function getBackdrop()
    {
        return $this->container['backdrop'];
    }

    /**
     * Sets backdrop
     *
     * @param array<string,string>|null $backdrop backdrop
     *
     * @return self
     */
    public function setBackdrop($backdrop)
    {
        if (is_null($backdrop)) {
            throw new \InvalidArgumentException('non-nullable backdrop cannot be null');
        }
        $this->container['backdrop'] = $backdrop;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return array<string,string>|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param array<string,string>|null $banner banner
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (is_null($banner)) {
            throw new \InvalidArgumentException('non-nullable banner cannot be null');
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return array<string,string>|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param array<string,string>|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets thumb
     *
     * @return array<string,string>|null
     */
    public function getThumb()
    {
        return $this->container['thumb'];
    }

    /**
     * Sets thumb
     *
     * @param array<string,string>|null $thumb thumb
     *
     * @return self
     */
    public function setThumb($thumb)
    {
        if (is_null($thumb)) {
            throw new \InvalidArgumentException('non-nullable thumb cannot be null');
        }
        $this->container['thumb'] = $thumb;

        return $this;
    }

    /**
     * Gets disc
     *
     * @return array<string,string>|null
     */
    public function getDisc()
    {
        return $this->container['disc'];
    }

    /**
     * Sets disc
     *
     * @param array<string,string>|null $disc disc
     *
     * @return self
     */
    public function setDisc($disc)
    {
        if (is_null($disc)) {
            throw new \InvalidArgumentException('non-nullable disc cannot be null');
        }
        $this->container['disc'] = $disc;

        return $this;
    }

    /**
     * Gets box
     *
     * @return array<string,string>|null
     */
    public function getBox()
    {
        return $this->container['box'];
    }

    /**
     * Sets box
     *
     * @param array<string,string>|null $box box
     *
     * @return self
     */
    public function setBox($box)
    {
        if (is_null($box)) {
            throw new \InvalidArgumentException('non-nullable box cannot be null');
        }
        $this->container['box'] = $box;

        return $this;
    }

    /**
     * Gets screenshot
     *
     * @return array<string,string>|null
     */
    public function getScreenshot()
    {
        return $this->container['screenshot'];
    }

    /**
     * Sets screenshot
     *
     * @param array<string,string>|null $screenshot screenshot
     *
     * @return self
     */
    public function setScreenshot($screenshot)
    {
        if (is_null($screenshot)) {
            throw new \InvalidArgumentException('non-nullable screenshot cannot be null');
        }
        $this->container['screenshot'] = $screenshot;

        return $this;
    }

    /**
     * Gets menu
     *
     * @return array<string,string>|null
     */
    public function getMenu()
    {
        return $this->container['menu'];
    }

    /**
     * Sets menu
     *
     * @param array<string,string>|null $menu menu
     *
     * @return self
     */
    public function setMenu($menu)
    {
        if (is_null($menu)) {
            throw new \InvalidArgumentException('non-nullable menu cannot be null');
        }
        $this->container['menu'] = $menu;

        return $this;
    }

    /**
     * Gets chapter
     *
     * @return array<string,string>|null
     */
    public function getChapter()
    {
        return $this->container['chapter'];
    }

    /**
     * Sets chapter
     *
     * @param array<string,string>|null $chapter chapter
     *
     * @return self
     */
    public function setChapter($chapter)
    {
        if (is_null($chapter)) {
            throw new \InvalidArgumentException('non-nullable chapter cannot be null');
        }
        $this->container['chapter'] = $chapter;

        return $this;
    }

    /**
     * Gets box_rear
     *
     * @return array<string,string>|null
     */
    public function getBoxRear()
    {
        return $this->container['box_rear'];
    }

    /**
     * Sets box_rear
     *
     * @param array<string,string>|null $box_rear box_rear
     *
     * @return self
     */
    public function setBoxRear($box_rear)
    {
        if (is_null($box_rear)) {
            throw new \InvalidArgumentException('non-nullable box_rear cannot be null');
        }
        $this->container['box_rear'] = $box_rear;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return array<string,string>|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param array<string,string>|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


