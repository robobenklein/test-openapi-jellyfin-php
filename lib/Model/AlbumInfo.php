<?php
/**
 * AlbumInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AlbumInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlbumInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlbumInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'original_title' => 'string',
        'path' => 'string',
        'metadata_language' => 'string',
        'metadata_country_code' => 'string',
        'provider_ids' => 'array<string,string>',
        'year' => 'int',
        'index_number' => 'int',
        'parent_index_number' => 'int',
        'premiere_date' => '\DateTime',
        'is_automated' => 'bool',
        'album_artists' => 'string[]',
        'artist_provider_ids' => 'array<string,string>',
        'song_infos' => '\OpenAPI\Client\Model\SongInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'original_title' => null,
        'path' => null,
        'metadata_language' => null,
        'metadata_country_code' => null,
        'provider_ids' => null,
        'year' => 'int32',
        'index_number' => 'int32',
        'parent_index_number' => 'int32',
        'premiere_date' => 'date-time',
        'is_automated' => null,
        'album_artists' => null,
        'artist_provider_ids' => null,
        'song_infos' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'original_title' => true,
		'path' => true,
		'metadata_language' => true,
		'metadata_country_code' => true,
		'provider_ids' => true,
		'year' => true,
		'index_number' => true,
		'parent_index_number' => true,
		'premiere_date' => true,
		'is_automated' => false,
		'album_artists' => false,
		'artist_provider_ids' => false,
		'song_infos' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'original_title' => 'OriginalTitle',
        'path' => 'Path',
        'metadata_language' => 'MetadataLanguage',
        'metadata_country_code' => 'MetadataCountryCode',
        'provider_ids' => 'ProviderIds',
        'year' => 'Year',
        'index_number' => 'IndexNumber',
        'parent_index_number' => 'ParentIndexNumber',
        'premiere_date' => 'PremiereDate',
        'is_automated' => 'IsAutomated',
        'album_artists' => 'AlbumArtists',
        'artist_provider_ids' => 'ArtistProviderIds',
        'song_infos' => 'SongInfos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'original_title' => 'setOriginalTitle',
        'path' => 'setPath',
        'metadata_language' => 'setMetadataLanguage',
        'metadata_country_code' => 'setMetadataCountryCode',
        'provider_ids' => 'setProviderIds',
        'year' => 'setYear',
        'index_number' => 'setIndexNumber',
        'parent_index_number' => 'setParentIndexNumber',
        'premiere_date' => 'setPremiereDate',
        'is_automated' => 'setIsAutomated',
        'album_artists' => 'setAlbumArtists',
        'artist_provider_ids' => 'setArtistProviderIds',
        'song_infos' => 'setSongInfos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'original_title' => 'getOriginalTitle',
        'path' => 'getPath',
        'metadata_language' => 'getMetadataLanguage',
        'metadata_country_code' => 'getMetadataCountryCode',
        'provider_ids' => 'getProviderIds',
        'year' => 'getYear',
        'index_number' => 'getIndexNumber',
        'parent_index_number' => 'getParentIndexNumber',
        'premiere_date' => 'getPremiereDate',
        'is_automated' => 'getIsAutomated',
        'album_artists' => 'getAlbumArtists',
        'artist_provider_ids' => 'getArtistProviderIds',
        'song_infos' => 'getSongInfos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_title', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('metadata_language', $data ?? [], null);
        $this->setIfExists('metadata_country_code', $data ?? [], null);
        $this->setIfExists('provider_ids', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('index_number', $data ?? [], null);
        $this->setIfExists('parent_index_number', $data ?? [], null);
        $this->setIfExists('premiere_date', $data ?? [], null);
        $this->setIfExists('is_automated', $data ?? [], null);
        $this->setIfExists('album_artists', $data ?? [], null);
        $this->setIfExists('artist_provider_ids', $data ?? [], null);
        $this->setIfExists('song_infos', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string|null
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string|null $original_title Gets or sets the original title.
     *
     * @return self
     */
    public function setOriginalTitle($original_title)
    {
        if (is_null($original_title)) {
            array_push($this->openAPINullablesSetToNull, 'original_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path Gets or sets the path.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets metadata_language
     *
     * @return string|null
     */
    public function getMetadataLanguage()
    {
        return $this->container['metadata_language'];
    }

    /**
     * Sets metadata_language
     *
     * @param string|null $metadata_language Gets or sets the metadata language.
     *
     * @return self
     */
    public function setMetadataLanguage($metadata_language)
    {
        if (is_null($metadata_language)) {
            array_push($this->openAPINullablesSetToNull, 'metadata_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata_language'] = $metadata_language;

        return $this;
    }

    /**
     * Gets metadata_country_code
     *
     * @return string|null
     */
    public function getMetadataCountryCode()
    {
        return $this->container['metadata_country_code'];
    }

    /**
     * Sets metadata_country_code
     *
     * @param string|null $metadata_country_code Gets or sets the metadata country code.
     *
     * @return self
     */
    public function setMetadataCountryCode($metadata_country_code)
    {
        if (is_null($metadata_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'metadata_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata_country_code'] = $metadata_country_code;

        return $this;
    }

    /**
     * Gets provider_ids
     *
     * @return array<string,string>|null
     */
    public function getProviderIds()
    {
        return $this->container['provider_ids'];
    }

    /**
     * Sets provider_ids
     *
     * @param array<string,string>|null $provider_ids Gets or sets the provider ids.
     *
     * @return self
     */
    public function setProviderIds($provider_ids)
    {
        if (is_null($provider_ids)) {
            array_push($this->openAPINullablesSetToNull, 'provider_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_ids'] = $provider_ids;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year Gets or sets the year.
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            array_push($this->openAPINullablesSetToNull, 'year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets index_number
     *
     * @return int|null
     */
    public function getIndexNumber()
    {
        return $this->container['index_number'];
    }

    /**
     * Sets index_number
     *
     * @param int|null $index_number index_number
     *
     * @return self
     */
    public function setIndexNumber($index_number)
    {
        if (is_null($index_number)) {
            array_push($this->openAPINullablesSetToNull, 'index_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_number'] = $index_number;

        return $this;
    }

    /**
     * Gets parent_index_number
     *
     * @return int|null
     */
    public function getParentIndexNumber()
    {
        return $this->container['parent_index_number'];
    }

    /**
     * Sets parent_index_number
     *
     * @param int|null $parent_index_number parent_index_number
     *
     * @return self
     */
    public function setParentIndexNumber($parent_index_number)
    {
        if (is_null($parent_index_number)) {
            array_push($this->openAPINullablesSetToNull, 'parent_index_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_index_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_index_number'] = $parent_index_number;

        return $this;
    }

    /**
     * Gets premiere_date
     *
     * @return \DateTime|null
     */
    public function getPremiereDate()
    {
        return $this->container['premiere_date'];
    }

    /**
     * Sets premiere_date
     *
     * @param \DateTime|null $premiere_date premiere_date
     *
     * @return self
     */
    public function setPremiereDate($premiere_date)
    {
        if (is_null($premiere_date)) {
            array_push($this->openAPINullablesSetToNull, 'premiere_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('premiere_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['premiere_date'] = $premiere_date;

        return $this;
    }

    /**
     * Gets is_automated
     *
     * @return bool|null
     */
    public function getIsAutomated()
    {
        return $this->container['is_automated'];
    }

    /**
     * Sets is_automated
     *
     * @param bool|null $is_automated is_automated
     *
     * @return self
     */
    public function setIsAutomated($is_automated)
    {
        if (is_null($is_automated)) {
            throw new \InvalidArgumentException('non-nullable is_automated cannot be null');
        }
        $this->container['is_automated'] = $is_automated;

        return $this;
    }

    /**
     * Gets album_artists
     *
     * @return string[]|null
     */
    public function getAlbumArtists()
    {
        return $this->container['album_artists'];
    }

    /**
     * Sets album_artists
     *
     * @param string[]|null $album_artists Gets or sets the album artist.
     *
     * @return self
     */
    public function setAlbumArtists($album_artists)
    {
        if (is_null($album_artists)) {
            throw new \InvalidArgumentException('non-nullable album_artists cannot be null');
        }
        $this->container['album_artists'] = $album_artists;

        return $this;
    }

    /**
     * Gets artist_provider_ids
     *
     * @return array<string,string>|null
     */
    public function getArtistProviderIds()
    {
        return $this->container['artist_provider_ids'];
    }

    /**
     * Sets artist_provider_ids
     *
     * @param array<string,string>|null $artist_provider_ids Gets or sets the artist provider ids.
     *
     * @return self
     */
    public function setArtistProviderIds($artist_provider_ids)
    {
        if (is_null($artist_provider_ids)) {
            throw new \InvalidArgumentException('non-nullable artist_provider_ids cannot be null');
        }
        $this->container['artist_provider_ids'] = $artist_provider_ids;

        return $this;
    }

    /**
     * Gets song_infos
     *
     * @return \OpenAPI\Client\Model\SongInfo[]|null
     */
    public function getSongInfos()
    {
        return $this->container['song_infos'];
    }

    /**
     * Sets song_infos
     *
     * @param \OpenAPI\Client\Model\SongInfo[]|null $song_infos song_infos
     *
     * @return self
     */
    public function setSongInfos($song_infos)
    {
        if (is_null($song_infos)) {
            throw new \InvalidArgumentException('non-nullable song_infos cannot be null');
        }
        $this->container['song_infos'] = $song_infos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


