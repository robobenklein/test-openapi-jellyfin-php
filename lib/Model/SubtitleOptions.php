<?php
/**
 * SubtitleOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubtitleOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubtitleOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubtitleOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'skip_if_embedded_subtitles_present' => 'bool',
        'skip_if_audio_track_matches' => 'bool',
        'download_languages' => 'string[]',
        'download_movie_subtitles' => 'bool',
        'download_episode_subtitles' => 'bool',
        'open_subtitles_username' => 'string',
        'open_subtitles_password_hash' => 'string',
        'is_open_subtitle_vip_account' => 'bool',
        'require_perfect_match' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'skip_if_embedded_subtitles_present' => null,
        'skip_if_audio_track_matches' => null,
        'download_languages' => null,
        'download_movie_subtitles' => null,
        'download_episode_subtitles' => null,
        'open_subtitles_username' => null,
        'open_subtitles_password_hash' => null,
        'is_open_subtitle_vip_account' => null,
        'require_perfect_match' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'skip_if_embedded_subtitles_present' => false,
		'skip_if_audio_track_matches' => false,
		'download_languages' => true,
		'download_movie_subtitles' => false,
		'download_episode_subtitles' => false,
		'open_subtitles_username' => true,
		'open_subtitles_password_hash' => true,
		'is_open_subtitle_vip_account' => false,
		'require_perfect_match' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skip_if_embedded_subtitles_present' => 'SkipIfEmbeddedSubtitlesPresent',
        'skip_if_audio_track_matches' => 'SkipIfAudioTrackMatches',
        'download_languages' => 'DownloadLanguages',
        'download_movie_subtitles' => 'DownloadMovieSubtitles',
        'download_episode_subtitles' => 'DownloadEpisodeSubtitles',
        'open_subtitles_username' => 'OpenSubtitlesUsername',
        'open_subtitles_password_hash' => 'OpenSubtitlesPasswordHash',
        'is_open_subtitle_vip_account' => 'IsOpenSubtitleVipAccount',
        'require_perfect_match' => 'RequirePerfectMatch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skip_if_embedded_subtitles_present' => 'setSkipIfEmbeddedSubtitlesPresent',
        'skip_if_audio_track_matches' => 'setSkipIfAudioTrackMatches',
        'download_languages' => 'setDownloadLanguages',
        'download_movie_subtitles' => 'setDownloadMovieSubtitles',
        'download_episode_subtitles' => 'setDownloadEpisodeSubtitles',
        'open_subtitles_username' => 'setOpenSubtitlesUsername',
        'open_subtitles_password_hash' => 'setOpenSubtitlesPasswordHash',
        'is_open_subtitle_vip_account' => 'setIsOpenSubtitleVipAccount',
        'require_perfect_match' => 'setRequirePerfectMatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skip_if_embedded_subtitles_present' => 'getSkipIfEmbeddedSubtitlesPresent',
        'skip_if_audio_track_matches' => 'getSkipIfAudioTrackMatches',
        'download_languages' => 'getDownloadLanguages',
        'download_movie_subtitles' => 'getDownloadMovieSubtitles',
        'download_episode_subtitles' => 'getDownloadEpisodeSubtitles',
        'open_subtitles_username' => 'getOpenSubtitlesUsername',
        'open_subtitles_password_hash' => 'getOpenSubtitlesPasswordHash',
        'is_open_subtitle_vip_account' => 'getIsOpenSubtitleVipAccount',
        'require_perfect_match' => 'getRequirePerfectMatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('skip_if_embedded_subtitles_present', $data ?? [], null);
        $this->setIfExists('skip_if_audio_track_matches', $data ?? [], null);
        $this->setIfExists('download_languages', $data ?? [], null);
        $this->setIfExists('download_movie_subtitles', $data ?? [], null);
        $this->setIfExists('download_episode_subtitles', $data ?? [], null);
        $this->setIfExists('open_subtitles_username', $data ?? [], null);
        $this->setIfExists('open_subtitles_password_hash', $data ?? [], null);
        $this->setIfExists('is_open_subtitle_vip_account', $data ?? [], null);
        $this->setIfExists('require_perfect_match', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skip_if_embedded_subtitles_present
     *
     * @return bool|null
     */
    public function getSkipIfEmbeddedSubtitlesPresent()
    {
        return $this->container['skip_if_embedded_subtitles_present'];
    }

    /**
     * Sets skip_if_embedded_subtitles_present
     *
     * @param bool|null $skip_if_embedded_subtitles_present skip_if_embedded_subtitles_present
     *
     * @return self
     */
    public function setSkipIfEmbeddedSubtitlesPresent($skip_if_embedded_subtitles_present)
    {
        if (is_null($skip_if_embedded_subtitles_present)) {
            throw new \InvalidArgumentException('non-nullable skip_if_embedded_subtitles_present cannot be null');
        }
        $this->container['skip_if_embedded_subtitles_present'] = $skip_if_embedded_subtitles_present;

        return $this;
    }

    /**
     * Gets skip_if_audio_track_matches
     *
     * @return bool|null
     */
    public function getSkipIfAudioTrackMatches()
    {
        return $this->container['skip_if_audio_track_matches'];
    }

    /**
     * Sets skip_if_audio_track_matches
     *
     * @param bool|null $skip_if_audio_track_matches skip_if_audio_track_matches
     *
     * @return self
     */
    public function setSkipIfAudioTrackMatches($skip_if_audio_track_matches)
    {
        if (is_null($skip_if_audio_track_matches)) {
            throw new \InvalidArgumentException('non-nullable skip_if_audio_track_matches cannot be null');
        }
        $this->container['skip_if_audio_track_matches'] = $skip_if_audio_track_matches;

        return $this;
    }

    /**
     * Gets download_languages
     *
     * @return string[]|null
     */
    public function getDownloadLanguages()
    {
        return $this->container['download_languages'];
    }

    /**
     * Sets download_languages
     *
     * @param string[]|null $download_languages download_languages
     *
     * @return self
     */
    public function setDownloadLanguages($download_languages)
    {
        if (is_null($download_languages)) {
            array_push($this->openAPINullablesSetToNull, 'download_languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_languages'] = $download_languages;

        return $this;
    }

    /**
     * Gets download_movie_subtitles
     *
     * @return bool|null
     */
    public function getDownloadMovieSubtitles()
    {
        return $this->container['download_movie_subtitles'];
    }

    /**
     * Sets download_movie_subtitles
     *
     * @param bool|null $download_movie_subtitles download_movie_subtitles
     *
     * @return self
     */
    public function setDownloadMovieSubtitles($download_movie_subtitles)
    {
        if (is_null($download_movie_subtitles)) {
            throw new \InvalidArgumentException('non-nullable download_movie_subtitles cannot be null');
        }
        $this->container['download_movie_subtitles'] = $download_movie_subtitles;

        return $this;
    }

    /**
     * Gets download_episode_subtitles
     *
     * @return bool|null
     */
    public function getDownloadEpisodeSubtitles()
    {
        return $this->container['download_episode_subtitles'];
    }

    /**
     * Sets download_episode_subtitles
     *
     * @param bool|null $download_episode_subtitles download_episode_subtitles
     *
     * @return self
     */
    public function setDownloadEpisodeSubtitles($download_episode_subtitles)
    {
        if (is_null($download_episode_subtitles)) {
            throw new \InvalidArgumentException('non-nullable download_episode_subtitles cannot be null');
        }
        $this->container['download_episode_subtitles'] = $download_episode_subtitles;

        return $this;
    }

    /**
     * Gets open_subtitles_username
     *
     * @return string|null
     */
    public function getOpenSubtitlesUsername()
    {
        return $this->container['open_subtitles_username'];
    }

    /**
     * Sets open_subtitles_username
     *
     * @param string|null $open_subtitles_username open_subtitles_username
     *
     * @return self
     */
    public function setOpenSubtitlesUsername($open_subtitles_username)
    {
        if (is_null($open_subtitles_username)) {
            array_push($this->openAPINullablesSetToNull, 'open_subtitles_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_subtitles_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_subtitles_username'] = $open_subtitles_username;

        return $this;
    }

    /**
     * Gets open_subtitles_password_hash
     *
     * @return string|null
     */
    public function getOpenSubtitlesPasswordHash()
    {
        return $this->container['open_subtitles_password_hash'];
    }

    /**
     * Sets open_subtitles_password_hash
     *
     * @param string|null $open_subtitles_password_hash open_subtitles_password_hash
     *
     * @return self
     */
    public function setOpenSubtitlesPasswordHash($open_subtitles_password_hash)
    {
        if (is_null($open_subtitles_password_hash)) {
            array_push($this->openAPINullablesSetToNull, 'open_subtitles_password_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_subtitles_password_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_subtitles_password_hash'] = $open_subtitles_password_hash;

        return $this;
    }

    /**
     * Gets is_open_subtitle_vip_account
     *
     * @return bool|null
     */
    public function getIsOpenSubtitleVipAccount()
    {
        return $this->container['is_open_subtitle_vip_account'];
    }

    /**
     * Sets is_open_subtitle_vip_account
     *
     * @param bool|null $is_open_subtitle_vip_account is_open_subtitle_vip_account
     *
     * @return self
     */
    public function setIsOpenSubtitleVipAccount($is_open_subtitle_vip_account)
    {
        if (is_null($is_open_subtitle_vip_account)) {
            throw new \InvalidArgumentException('non-nullable is_open_subtitle_vip_account cannot be null');
        }
        $this->container['is_open_subtitle_vip_account'] = $is_open_subtitle_vip_account;

        return $this;
    }

    /**
     * Gets require_perfect_match
     *
     * @return bool|null
     */
    public function getRequirePerfectMatch()
    {
        return $this->container['require_perfect_match'];
    }

    /**
     * Sets require_perfect_match
     *
     * @param bool|null $require_perfect_match require_perfect_match
     *
     * @return self
     */
    public function setRequirePerfectMatch($require_perfect_match)
    {
        if (is_null($require_perfect_match)) {
            throw new \InvalidArgumentException('non-nullable require_perfect_match cannot be null');
        }
        $this->container['require_perfect_match'] = $require_perfect_match;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


