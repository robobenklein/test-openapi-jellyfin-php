<?php
/**
 * MediaSourceInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MediaSourceInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MediaSourceInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MediaSourceInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'protocol' => '\OpenAPI\Client\Model\MediaProtocol',
        'id' => 'string',
        'path' => 'string',
        'encoder_path' => 'string',
        'encoder_protocol' => '\OpenAPI\Client\Model\MediaProtocol',
        'type' => '\OpenAPI\Client\Model\MediaSourceType',
        'container' => 'string',
        'size' => 'int',
        'name' => 'string',
        'is_remote' => 'bool',
        'e_tag' => 'string',
        'run_time_ticks' => 'int',
        'read_at_native_framerate' => 'bool',
        'ignore_dts' => 'bool',
        'ignore_index' => 'bool',
        'gen_pts_input' => 'bool',
        'supports_transcoding' => 'bool',
        'supports_direct_stream' => 'bool',
        'supports_direct_play' => 'bool',
        'is_infinite_stream' => 'bool',
        'requires_opening' => 'bool',
        'open_token' => 'string',
        'requires_closing' => 'bool',
        'live_stream_id' => 'string',
        'buffer_ms' => 'int',
        'requires_looping' => 'bool',
        'supports_probing' => 'bool',
        'video_type' => '\OpenAPI\Client\Model\VideoType',
        'iso_type' => '\OpenAPI\Client\Model\IsoType',
        'video3_d_format' => '\OpenAPI\Client\Model\Video3DFormat',
        'media_streams' => '\OpenAPI\Client\Model\MediaStream[]',
        'media_attachments' => '\OpenAPI\Client\Model\MediaAttachment[]',
        'formats' => 'string[]',
        'bitrate' => 'int',
        'timestamp' => '\OpenAPI\Client\Model\TransportStreamTimestamp',
        'required_http_headers' => 'array<string,string>',
        'transcoding_url' => 'string',
        'transcoding_sub_protocol' => 'string',
        'transcoding_container' => 'string',
        'analyze_duration_ms' => 'int',
        'default_audio_stream_index' => 'int',
        'default_subtitle_stream_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'protocol' => null,
        'id' => null,
        'path' => null,
        'encoder_path' => null,
        'encoder_protocol' => null,
        'type' => null,
        'container' => null,
        'size' => 'int64',
        'name' => null,
        'is_remote' => null,
        'e_tag' => null,
        'run_time_ticks' => 'int64',
        'read_at_native_framerate' => null,
        'ignore_dts' => null,
        'ignore_index' => null,
        'gen_pts_input' => null,
        'supports_transcoding' => null,
        'supports_direct_stream' => null,
        'supports_direct_play' => null,
        'is_infinite_stream' => null,
        'requires_opening' => null,
        'open_token' => null,
        'requires_closing' => null,
        'live_stream_id' => null,
        'buffer_ms' => 'int32',
        'requires_looping' => null,
        'supports_probing' => null,
        'video_type' => null,
        'iso_type' => null,
        'video3_d_format' => null,
        'media_streams' => null,
        'media_attachments' => null,
        'formats' => null,
        'bitrate' => 'int32',
        'timestamp' => null,
        'required_http_headers' => null,
        'transcoding_url' => null,
        'transcoding_sub_protocol' => null,
        'transcoding_container' => null,
        'analyze_duration_ms' => 'int32',
        'default_audio_stream_index' => 'int32',
        'default_subtitle_stream_index' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'protocol' => false,
		'id' => true,
		'path' => true,
		'encoder_path' => true,
		'encoder_protocol' => true,
		'type' => false,
		'container' => true,
		'size' => true,
		'name' => true,
		'is_remote' => false,
		'e_tag' => true,
		'run_time_ticks' => true,
		'read_at_native_framerate' => false,
		'ignore_dts' => false,
		'ignore_index' => false,
		'gen_pts_input' => false,
		'supports_transcoding' => false,
		'supports_direct_stream' => false,
		'supports_direct_play' => false,
		'is_infinite_stream' => false,
		'requires_opening' => false,
		'open_token' => true,
		'requires_closing' => false,
		'live_stream_id' => true,
		'buffer_ms' => true,
		'requires_looping' => false,
		'supports_probing' => false,
		'video_type' => true,
		'iso_type' => true,
		'video3_d_format' => true,
		'media_streams' => true,
		'media_attachments' => true,
		'formats' => true,
		'bitrate' => true,
		'timestamp' => true,
		'required_http_headers' => true,
		'transcoding_url' => true,
		'transcoding_sub_protocol' => true,
		'transcoding_container' => true,
		'analyze_duration_ms' => true,
		'default_audio_stream_index' => true,
		'default_subtitle_stream_index' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'protocol' => 'Protocol',
        'id' => 'Id',
        'path' => 'Path',
        'encoder_path' => 'EncoderPath',
        'encoder_protocol' => 'EncoderProtocol',
        'type' => 'Type',
        'container' => 'Container',
        'size' => 'Size',
        'name' => 'Name',
        'is_remote' => 'IsRemote',
        'e_tag' => 'ETag',
        'run_time_ticks' => 'RunTimeTicks',
        'read_at_native_framerate' => 'ReadAtNativeFramerate',
        'ignore_dts' => 'IgnoreDts',
        'ignore_index' => 'IgnoreIndex',
        'gen_pts_input' => 'GenPtsInput',
        'supports_transcoding' => 'SupportsTranscoding',
        'supports_direct_stream' => 'SupportsDirectStream',
        'supports_direct_play' => 'SupportsDirectPlay',
        'is_infinite_stream' => 'IsInfiniteStream',
        'requires_opening' => 'RequiresOpening',
        'open_token' => 'OpenToken',
        'requires_closing' => 'RequiresClosing',
        'live_stream_id' => 'LiveStreamId',
        'buffer_ms' => 'BufferMs',
        'requires_looping' => 'RequiresLooping',
        'supports_probing' => 'SupportsProbing',
        'video_type' => 'VideoType',
        'iso_type' => 'IsoType',
        'video3_d_format' => 'Video3DFormat',
        'media_streams' => 'MediaStreams',
        'media_attachments' => 'MediaAttachments',
        'formats' => 'Formats',
        'bitrate' => 'Bitrate',
        'timestamp' => 'Timestamp',
        'required_http_headers' => 'RequiredHttpHeaders',
        'transcoding_url' => 'TranscodingUrl',
        'transcoding_sub_protocol' => 'TranscodingSubProtocol',
        'transcoding_container' => 'TranscodingContainer',
        'analyze_duration_ms' => 'AnalyzeDurationMs',
        'default_audio_stream_index' => 'DefaultAudioStreamIndex',
        'default_subtitle_stream_index' => 'DefaultSubtitleStreamIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'protocol' => 'setProtocol',
        'id' => 'setId',
        'path' => 'setPath',
        'encoder_path' => 'setEncoderPath',
        'encoder_protocol' => 'setEncoderProtocol',
        'type' => 'setType',
        'container' => 'setContainer',
        'size' => 'setSize',
        'name' => 'setName',
        'is_remote' => 'setIsRemote',
        'e_tag' => 'setETag',
        'run_time_ticks' => 'setRunTimeTicks',
        'read_at_native_framerate' => 'setReadAtNativeFramerate',
        'ignore_dts' => 'setIgnoreDts',
        'ignore_index' => 'setIgnoreIndex',
        'gen_pts_input' => 'setGenPtsInput',
        'supports_transcoding' => 'setSupportsTranscoding',
        'supports_direct_stream' => 'setSupportsDirectStream',
        'supports_direct_play' => 'setSupportsDirectPlay',
        'is_infinite_stream' => 'setIsInfiniteStream',
        'requires_opening' => 'setRequiresOpening',
        'open_token' => 'setOpenToken',
        'requires_closing' => 'setRequiresClosing',
        'live_stream_id' => 'setLiveStreamId',
        'buffer_ms' => 'setBufferMs',
        'requires_looping' => 'setRequiresLooping',
        'supports_probing' => 'setSupportsProbing',
        'video_type' => 'setVideoType',
        'iso_type' => 'setIsoType',
        'video3_d_format' => 'setVideo3DFormat',
        'media_streams' => 'setMediaStreams',
        'media_attachments' => 'setMediaAttachments',
        'formats' => 'setFormats',
        'bitrate' => 'setBitrate',
        'timestamp' => 'setTimestamp',
        'required_http_headers' => 'setRequiredHttpHeaders',
        'transcoding_url' => 'setTranscodingUrl',
        'transcoding_sub_protocol' => 'setTranscodingSubProtocol',
        'transcoding_container' => 'setTranscodingContainer',
        'analyze_duration_ms' => 'setAnalyzeDurationMs',
        'default_audio_stream_index' => 'setDefaultAudioStreamIndex',
        'default_subtitle_stream_index' => 'setDefaultSubtitleStreamIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'protocol' => 'getProtocol',
        'id' => 'getId',
        'path' => 'getPath',
        'encoder_path' => 'getEncoderPath',
        'encoder_protocol' => 'getEncoderProtocol',
        'type' => 'getType',
        'container' => 'getContainer',
        'size' => 'getSize',
        'name' => 'getName',
        'is_remote' => 'getIsRemote',
        'e_tag' => 'getETag',
        'run_time_ticks' => 'getRunTimeTicks',
        'read_at_native_framerate' => 'getReadAtNativeFramerate',
        'ignore_dts' => 'getIgnoreDts',
        'ignore_index' => 'getIgnoreIndex',
        'gen_pts_input' => 'getGenPtsInput',
        'supports_transcoding' => 'getSupportsTranscoding',
        'supports_direct_stream' => 'getSupportsDirectStream',
        'supports_direct_play' => 'getSupportsDirectPlay',
        'is_infinite_stream' => 'getIsInfiniteStream',
        'requires_opening' => 'getRequiresOpening',
        'open_token' => 'getOpenToken',
        'requires_closing' => 'getRequiresClosing',
        'live_stream_id' => 'getLiveStreamId',
        'buffer_ms' => 'getBufferMs',
        'requires_looping' => 'getRequiresLooping',
        'supports_probing' => 'getSupportsProbing',
        'video_type' => 'getVideoType',
        'iso_type' => 'getIsoType',
        'video3_d_format' => 'getVideo3DFormat',
        'media_streams' => 'getMediaStreams',
        'media_attachments' => 'getMediaAttachments',
        'formats' => 'getFormats',
        'bitrate' => 'getBitrate',
        'timestamp' => 'getTimestamp',
        'required_http_headers' => 'getRequiredHttpHeaders',
        'transcoding_url' => 'getTranscodingUrl',
        'transcoding_sub_protocol' => 'getTranscodingSubProtocol',
        'transcoding_container' => 'getTranscodingContainer',
        'analyze_duration_ms' => 'getAnalyzeDurationMs',
        'default_audio_stream_index' => 'getDefaultAudioStreamIndex',
        'default_subtitle_stream_index' => 'getDefaultSubtitleStreamIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('encoder_path', $data ?? [], null);
        $this->setIfExists('encoder_protocol', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('is_remote', $data ?? [], null);
        $this->setIfExists('e_tag', $data ?? [], null);
        $this->setIfExists('run_time_ticks', $data ?? [], null);
        $this->setIfExists('read_at_native_framerate', $data ?? [], null);
        $this->setIfExists('ignore_dts', $data ?? [], null);
        $this->setIfExists('ignore_index', $data ?? [], null);
        $this->setIfExists('gen_pts_input', $data ?? [], null);
        $this->setIfExists('supports_transcoding', $data ?? [], null);
        $this->setIfExists('supports_direct_stream', $data ?? [], null);
        $this->setIfExists('supports_direct_play', $data ?? [], null);
        $this->setIfExists('is_infinite_stream', $data ?? [], null);
        $this->setIfExists('requires_opening', $data ?? [], null);
        $this->setIfExists('open_token', $data ?? [], null);
        $this->setIfExists('requires_closing', $data ?? [], null);
        $this->setIfExists('live_stream_id', $data ?? [], null);
        $this->setIfExists('buffer_ms', $data ?? [], null);
        $this->setIfExists('requires_looping', $data ?? [], null);
        $this->setIfExists('supports_probing', $data ?? [], null);
        $this->setIfExists('video_type', $data ?? [], null);
        $this->setIfExists('iso_type', $data ?? [], null);
        $this->setIfExists('video3_d_format', $data ?? [], null);
        $this->setIfExists('media_streams', $data ?? [], null);
        $this->setIfExists('media_attachments', $data ?? [], null);
        $this->setIfExists('formats', $data ?? [], null);
        $this->setIfExists('bitrate', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('required_http_headers', $data ?? [], null);
        $this->setIfExists('transcoding_url', $data ?? [], null);
        $this->setIfExists('transcoding_sub_protocol', $data ?? [], null);
        $this->setIfExists('transcoding_container', $data ?? [], null);
        $this->setIfExists('analyze_duration_ms', $data ?? [], null);
        $this->setIfExists('default_audio_stream_index', $data ?? [], null);
        $this->setIfExists('default_subtitle_stream_index', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets protocol
     *
     * @return \OpenAPI\Client\Model\MediaProtocol|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param \OpenAPI\Client\Model\MediaProtocol|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets encoder_path
     *
     * @return string|null
     */
    public function getEncoderPath()
    {
        return $this->container['encoder_path'];
    }

    /**
     * Sets encoder_path
     *
     * @param string|null $encoder_path encoder_path
     *
     * @return self
     */
    public function setEncoderPath($encoder_path)
    {
        if (is_null($encoder_path)) {
            array_push($this->openAPINullablesSetToNull, 'encoder_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encoder_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['encoder_path'] = $encoder_path;

        return $this;
    }

    /**
     * Gets encoder_protocol
     *
     * @return \OpenAPI\Client\Model\MediaProtocol|null
     */
    public function getEncoderProtocol()
    {
        return $this->container['encoder_protocol'];
    }

    /**
     * Sets encoder_protocol
     *
     * @param \OpenAPI\Client\Model\MediaProtocol|null $encoder_protocol encoder_protocol
     *
     * @return self
     */
    public function setEncoderProtocol($encoder_protocol)
    {
        if (is_null($encoder_protocol)) {
            array_push($this->openAPINullablesSetToNull, 'encoder_protocol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encoder_protocol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['encoder_protocol'] = $encoder_protocol;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\MediaSourceType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\MediaSourceType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            array_push($this->openAPINullablesSetToNull, 'container');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('container', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            array_push($this->openAPINullablesSetToNull, 'size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_remote
     *
     * @return bool|null
     */
    public function getIsRemote()
    {
        return $this->container['is_remote'];
    }

    /**
     * Sets is_remote
     *
     * @param bool|null $is_remote Gets or sets a value indicating whether the media is remote.  Differentiate internet url vs local network.
     *
     * @return self
     */
    public function setIsRemote($is_remote)
    {
        if (is_null($is_remote)) {
            throw new \InvalidArgumentException('non-nullable is_remote cannot be null');
        }
        $this->container['is_remote'] = $is_remote;

        return $this;
    }

    /**
     * Gets e_tag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     *
     * @param string|null $e_tag e_tag
     *
     * @return self
     */
    public function setETag($e_tag)
    {
        if (is_null($e_tag)) {
            array_push($this->openAPINullablesSetToNull, 'e_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets run_time_ticks
     *
     * @return int|null
     */
    public function getRunTimeTicks()
    {
        return $this->container['run_time_ticks'];
    }

    /**
     * Sets run_time_ticks
     *
     * @param int|null $run_time_ticks run_time_ticks
     *
     * @return self
     */
    public function setRunTimeTicks($run_time_ticks)
    {
        if (is_null($run_time_ticks)) {
            array_push($this->openAPINullablesSetToNull, 'run_time_ticks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_time_ticks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_time_ticks'] = $run_time_ticks;

        return $this;
    }

    /**
     * Gets read_at_native_framerate
     *
     * @return bool|null
     */
    public function getReadAtNativeFramerate()
    {
        return $this->container['read_at_native_framerate'];
    }

    /**
     * Sets read_at_native_framerate
     *
     * @param bool|null $read_at_native_framerate read_at_native_framerate
     *
     * @return self
     */
    public function setReadAtNativeFramerate($read_at_native_framerate)
    {
        if (is_null($read_at_native_framerate)) {
            throw new \InvalidArgumentException('non-nullable read_at_native_framerate cannot be null');
        }
        $this->container['read_at_native_framerate'] = $read_at_native_framerate;

        return $this;
    }

    /**
     * Gets ignore_dts
     *
     * @return bool|null
     */
    public function getIgnoreDts()
    {
        return $this->container['ignore_dts'];
    }

    /**
     * Sets ignore_dts
     *
     * @param bool|null $ignore_dts ignore_dts
     *
     * @return self
     */
    public function setIgnoreDts($ignore_dts)
    {
        if (is_null($ignore_dts)) {
            throw new \InvalidArgumentException('non-nullable ignore_dts cannot be null');
        }
        $this->container['ignore_dts'] = $ignore_dts;

        return $this;
    }

    /**
     * Gets ignore_index
     *
     * @return bool|null
     */
    public function getIgnoreIndex()
    {
        return $this->container['ignore_index'];
    }

    /**
     * Sets ignore_index
     *
     * @param bool|null $ignore_index ignore_index
     *
     * @return self
     */
    public function setIgnoreIndex($ignore_index)
    {
        if (is_null($ignore_index)) {
            throw new \InvalidArgumentException('non-nullable ignore_index cannot be null');
        }
        $this->container['ignore_index'] = $ignore_index;

        return $this;
    }

    /**
     * Gets gen_pts_input
     *
     * @return bool|null
     */
    public function getGenPtsInput()
    {
        return $this->container['gen_pts_input'];
    }

    /**
     * Sets gen_pts_input
     *
     * @param bool|null $gen_pts_input gen_pts_input
     *
     * @return self
     */
    public function setGenPtsInput($gen_pts_input)
    {
        if (is_null($gen_pts_input)) {
            throw new \InvalidArgumentException('non-nullable gen_pts_input cannot be null');
        }
        $this->container['gen_pts_input'] = $gen_pts_input;

        return $this;
    }

    /**
     * Gets supports_transcoding
     *
     * @return bool|null
     */
    public function getSupportsTranscoding()
    {
        return $this->container['supports_transcoding'];
    }

    /**
     * Sets supports_transcoding
     *
     * @param bool|null $supports_transcoding supports_transcoding
     *
     * @return self
     */
    public function setSupportsTranscoding($supports_transcoding)
    {
        if (is_null($supports_transcoding)) {
            throw new \InvalidArgumentException('non-nullable supports_transcoding cannot be null');
        }
        $this->container['supports_transcoding'] = $supports_transcoding;

        return $this;
    }

    /**
     * Gets supports_direct_stream
     *
     * @return bool|null
     */
    public function getSupportsDirectStream()
    {
        return $this->container['supports_direct_stream'];
    }

    /**
     * Sets supports_direct_stream
     *
     * @param bool|null $supports_direct_stream supports_direct_stream
     *
     * @return self
     */
    public function setSupportsDirectStream($supports_direct_stream)
    {
        if (is_null($supports_direct_stream)) {
            throw new \InvalidArgumentException('non-nullable supports_direct_stream cannot be null');
        }
        $this->container['supports_direct_stream'] = $supports_direct_stream;

        return $this;
    }

    /**
     * Gets supports_direct_play
     *
     * @return bool|null
     */
    public function getSupportsDirectPlay()
    {
        return $this->container['supports_direct_play'];
    }

    /**
     * Sets supports_direct_play
     *
     * @param bool|null $supports_direct_play supports_direct_play
     *
     * @return self
     */
    public function setSupportsDirectPlay($supports_direct_play)
    {
        if (is_null($supports_direct_play)) {
            throw new \InvalidArgumentException('non-nullable supports_direct_play cannot be null');
        }
        $this->container['supports_direct_play'] = $supports_direct_play;

        return $this;
    }

    /**
     * Gets is_infinite_stream
     *
     * @return bool|null
     */
    public function getIsInfiniteStream()
    {
        return $this->container['is_infinite_stream'];
    }

    /**
     * Sets is_infinite_stream
     *
     * @param bool|null $is_infinite_stream is_infinite_stream
     *
     * @return self
     */
    public function setIsInfiniteStream($is_infinite_stream)
    {
        if (is_null($is_infinite_stream)) {
            throw new \InvalidArgumentException('non-nullable is_infinite_stream cannot be null');
        }
        $this->container['is_infinite_stream'] = $is_infinite_stream;

        return $this;
    }

    /**
     * Gets requires_opening
     *
     * @return bool|null
     */
    public function getRequiresOpening()
    {
        return $this->container['requires_opening'];
    }

    /**
     * Sets requires_opening
     *
     * @param bool|null $requires_opening requires_opening
     *
     * @return self
     */
    public function setRequiresOpening($requires_opening)
    {
        if (is_null($requires_opening)) {
            throw new \InvalidArgumentException('non-nullable requires_opening cannot be null');
        }
        $this->container['requires_opening'] = $requires_opening;

        return $this;
    }

    /**
     * Gets open_token
     *
     * @return string|null
     */
    public function getOpenToken()
    {
        return $this->container['open_token'];
    }

    /**
     * Sets open_token
     *
     * @param string|null $open_token open_token
     *
     * @return self
     */
    public function setOpenToken($open_token)
    {
        if (is_null($open_token)) {
            array_push($this->openAPINullablesSetToNull, 'open_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_token'] = $open_token;

        return $this;
    }

    /**
     * Gets requires_closing
     *
     * @return bool|null
     */
    public function getRequiresClosing()
    {
        return $this->container['requires_closing'];
    }

    /**
     * Sets requires_closing
     *
     * @param bool|null $requires_closing requires_closing
     *
     * @return self
     */
    public function setRequiresClosing($requires_closing)
    {
        if (is_null($requires_closing)) {
            throw new \InvalidArgumentException('non-nullable requires_closing cannot be null');
        }
        $this->container['requires_closing'] = $requires_closing;

        return $this;
    }

    /**
     * Gets live_stream_id
     *
     * @return string|null
     */
    public function getLiveStreamId()
    {
        return $this->container['live_stream_id'];
    }

    /**
     * Sets live_stream_id
     *
     * @param string|null $live_stream_id live_stream_id
     *
     * @return self
     */
    public function setLiveStreamId($live_stream_id)
    {
        if (is_null($live_stream_id)) {
            array_push($this->openAPINullablesSetToNull, 'live_stream_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('live_stream_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['live_stream_id'] = $live_stream_id;

        return $this;
    }

    /**
     * Gets buffer_ms
     *
     * @return int|null
     */
    public function getBufferMs()
    {
        return $this->container['buffer_ms'];
    }

    /**
     * Sets buffer_ms
     *
     * @param int|null $buffer_ms buffer_ms
     *
     * @return self
     */
    public function setBufferMs($buffer_ms)
    {
        if (is_null($buffer_ms)) {
            array_push($this->openAPINullablesSetToNull, 'buffer_ms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buffer_ms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buffer_ms'] = $buffer_ms;

        return $this;
    }

    /**
     * Gets requires_looping
     *
     * @return bool|null
     */
    public function getRequiresLooping()
    {
        return $this->container['requires_looping'];
    }

    /**
     * Sets requires_looping
     *
     * @param bool|null $requires_looping requires_looping
     *
     * @return self
     */
    public function setRequiresLooping($requires_looping)
    {
        if (is_null($requires_looping)) {
            throw new \InvalidArgumentException('non-nullable requires_looping cannot be null');
        }
        $this->container['requires_looping'] = $requires_looping;

        return $this;
    }

    /**
     * Gets supports_probing
     *
     * @return bool|null
     */
    public function getSupportsProbing()
    {
        return $this->container['supports_probing'];
    }

    /**
     * Sets supports_probing
     *
     * @param bool|null $supports_probing supports_probing
     *
     * @return self
     */
    public function setSupportsProbing($supports_probing)
    {
        if (is_null($supports_probing)) {
            throw new \InvalidArgumentException('non-nullable supports_probing cannot be null');
        }
        $this->container['supports_probing'] = $supports_probing;

        return $this;
    }

    /**
     * Gets video_type
     *
     * @return \OpenAPI\Client\Model\VideoType|null
     */
    public function getVideoType()
    {
        return $this->container['video_type'];
    }

    /**
     * Sets video_type
     *
     * @param \OpenAPI\Client\Model\VideoType|null $video_type video_type
     *
     * @return self
     */
    public function setVideoType($video_type)
    {
        if (is_null($video_type)) {
            array_push($this->openAPINullablesSetToNull, 'video_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_type'] = $video_type;

        return $this;
    }

    /**
     * Gets iso_type
     *
     * @return \OpenAPI\Client\Model\IsoType|null
     */
    public function getIsoType()
    {
        return $this->container['iso_type'];
    }

    /**
     * Sets iso_type
     *
     * @param \OpenAPI\Client\Model\IsoType|null $iso_type iso_type
     *
     * @return self
     */
    public function setIsoType($iso_type)
    {
        if (is_null($iso_type)) {
            array_push($this->openAPINullablesSetToNull, 'iso_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iso_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iso_type'] = $iso_type;

        return $this;
    }

    /**
     * Gets video3_d_format
     *
     * @return \OpenAPI\Client\Model\Video3DFormat|null
     */
    public function getVideo3DFormat()
    {
        return $this->container['video3_d_format'];
    }

    /**
     * Sets video3_d_format
     *
     * @param \OpenAPI\Client\Model\Video3DFormat|null $video3_d_format video3_d_format
     *
     * @return self
     */
    public function setVideo3DFormat($video3_d_format)
    {
        if (is_null($video3_d_format)) {
            array_push($this->openAPINullablesSetToNull, 'video3_d_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video3_d_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video3_d_format'] = $video3_d_format;

        return $this;
    }

    /**
     * Gets media_streams
     *
     * @return \OpenAPI\Client\Model\MediaStream[]|null
     */
    public function getMediaStreams()
    {
        return $this->container['media_streams'];
    }

    /**
     * Sets media_streams
     *
     * @param \OpenAPI\Client\Model\MediaStream[]|null $media_streams media_streams
     *
     * @return self
     */
    public function setMediaStreams($media_streams)
    {
        if (is_null($media_streams)) {
            array_push($this->openAPINullablesSetToNull, 'media_streams');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_streams', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_streams'] = $media_streams;

        return $this;
    }

    /**
     * Gets media_attachments
     *
     * @return \OpenAPI\Client\Model\MediaAttachment[]|null
     */
    public function getMediaAttachments()
    {
        return $this->container['media_attachments'];
    }

    /**
     * Sets media_attachments
     *
     * @param \OpenAPI\Client\Model\MediaAttachment[]|null $media_attachments media_attachments
     *
     * @return self
     */
    public function setMediaAttachments($media_attachments)
    {
        if (is_null($media_attachments)) {
            array_push($this->openAPINullablesSetToNull, 'media_attachments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_attachments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_attachments'] = $media_attachments;

        return $this;
    }

    /**
     * Gets formats
     *
     * @return string[]|null
     */
    public function getFormats()
    {
        return $this->container['formats'];
    }

    /**
     * Sets formats
     *
     * @param string[]|null $formats formats
     *
     * @return self
     */
    public function setFormats($formats)
    {
        if (is_null($formats)) {
            array_push($this->openAPINullablesSetToNull, 'formats');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formats', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formats'] = $formats;

        return $this;
    }

    /**
     * Gets bitrate
     *
     * @return int|null
     */
    public function getBitrate()
    {
        return $this->container['bitrate'];
    }

    /**
     * Sets bitrate
     *
     * @param int|null $bitrate bitrate
     *
     * @return self
     */
    public function setBitrate($bitrate)
    {
        if (is_null($bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitrate'] = $bitrate;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \OpenAPI\Client\Model\TransportStreamTimestamp|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \OpenAPI\Client\Model\TransportStreamTimestamp|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets required_http_headers
     *
     * @return array<string,string>|null
     */
    public function getRequiredHttpHeaders()
    {
        return $this->container['required_http_headers'];
    }

    /**
     * Sets required_http_headers
     *
     * @param array<string,string>|null $required_http_headers required_http_headers
     *
     * @return self
     */
    public function setRequiredHttpHeaders($required_http_headers)
    {
        if (is_null($required_http_headers)) {
            array_push($this->openAPINullablesSetToNull, 'required_http_headers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('required_http_headers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['required_http_headers'] = $required_http_headers;

        return $this;
    }

    /**
     * Gets transcoding_url
     *
     * @return string|null
     */
    public function getTranscodingUrl()
    {
        return $this->container['transcoding_url'];
    }

    /**
     * Sets transcoding_url
     *
     * @param string|null $transcoding_url transcoding_url
     *
     * @return self
     */
    public function setTranscodingUrl($transcoding_url)
    {
        if (is_null($transcoding_url)) {
            array_push($this->openAPINullablesSetToNull, 'transcoding_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcoding_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transcoding_url'] = $transcoding_url;

        return $this;
    }

    /**
     * Gets transcoding_sub_protocol
     *
     * @return string|null
     */
    public function getTranscodingSubProtocol()
    {
        return $this->container['transcoding_sub_protocol'];
    }

    /**
     * Sets transcoding_sub_protocol
     *
     * @param string|null $transcoding_sub_protocol transcoding_sub_protocol
     *
     * @return self
     */
    public function setTranscodingSubProtocol($transcoding_sub_protocol)
    {
        if (is_null($transcoding_sub_protocol)) {
            array_push($this->openAPINullablesSetToNull, 'transcoding_sub_protocol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcoding_sub_protocol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transcoding_sub_protocol'] = $transcoding_sub_protocol;

        return $this;
    }

    /**
     * Gets transcoding_container
     *
     * @return string|null
     */
    public function getTranscodingContainer()
    {
        return $this->container['transcoding_container'];
    }

    /**
     * Sets transcoding_container
     *
     * @param string|null $transcoding_container transcoding_container
     *
     * @return self
     */
    public function setTranscodingContainer($transcoding_container)
    {
        if (is_null($transcoding_container)) {
            array_push($this->openAPINullablesSetToNull, 'transcoding_container');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcoding_container', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transcoding_container'] = $transcoding_container;

        return $this;
    }

    /**
     * Gets analyze_duration_ms
     *
     * @return int|null
     */
    public function getAnalyzeDurationMs()
    {
        return $this->container['analyze_duration_ms'];
    }

    /**
     * Sets analyze_duration_ms
     *
     * @param int|null $analyze_duration_ms analyze_duration_ms
     *
     * @return self
     */
    public function setAnalyzeDurationMs($analyze_duration_ms)
    {
        if (is_null($analyze_duration_ms)) {
            array_push($this->openAPINullablesSetToNull, 'analyze_duration_ms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analyze_duration_ms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analyze_duration_ms'] = $analyze_duration_ms;

        return $this;
    }

    /**
     * Gets default_audio_stream_index
     *
     * @return int|null
     */
    public function getDefaultAudioStreamIndex()
    {
        return $this->container['default_audio_stream_index'];
    }

    /**
     * Sets default_audio_stream_index
     *
     * @param int|null $default_audio_stream_index default_audio_stream_index
     *
     * @return self
     */
    public function setDefaultAudioStreamIndex($default_audio_stream_index)
    {
        if (is_null($default_audio_stream_index)) {
            array_push($this->openAPINullablesSetToNull, 'default_audio_stream_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_audio_stream_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_audio_stream_index'] = $default_audio_stream_index;

        return $this;
    }

    /**
     * Gets default_subtitle_stream_index
     *
     * @return int|null
     */
    public function getDefaultSubtitleStreamIndex()
    {
        return $this->container['default_subtitle_stream_index'];
    }

    /**
     * Sets default_subtitle_stream_index
     *
     * @param int|null $default_subtitle_stream_index default_subtitle_stream_index
     *
     * @return self
     */
    public function setDefaultSubtitleStreamIndex($default_subtitle_stream_index)
    {
        if (is_null($default_subtitle_stream_index)) {
            array_push($this->openAPINullablesSetToNull, 'default_subtitle_stream_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_subtitle_stream_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_subtitle_stream_index'] = $default_subtitle_stream_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


