<?php
/**
 * LiveTvOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LiveTvOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LiveTvOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LiveTvOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guide_days' => 'int',
        'recording_path' => 'string',
        'movie_recording_path' => 'string',
        'series_recording_path' => 'string',
        'enable_recording_subfolders' => 'bool',
        'enable_original_audio_with_encoded_recordings' => 'bool',
        'tuner_hosts' => '\OpenAPI\Client\Model\TunerHostInfo[]',
        'listing_providers' => '\OpenAPI\Client\Model\ListingsProviderInfo[]',
        'pre_padding_seconds' => 'int',
        'post_padding_seconds' => 'int',
        'media_locations_created' => 'string[]',
        'recording_post_processor' => 'string',
        'recording_post_processor_arguments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guide_days' => 'int32',
        'recording_path' => null,
        'movie_recording_path' => null,
        'series_recording_path' => null,
        'enable_recording_subfolders' => null,
        'enable_original_audio_with_encoded_recordings' => null,
        'tuner_hosts' => null,
        'listing_providers' => null,
        'pre_padding_seconds' => 'int32',
        'post_padding_seconds' => 'int32',
        'media_locations_created' => null,
        'recording_post_processor' => null,
        'recording_post_processor_arguments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'guide_days' => true,
		'recording_path' => true,
		'movie_recording_path' => true,
		'series_recording_path' => true,
		'enable_recording_subfolders' => false,
		'enable_original_audio_with_encoded_recordings' => false,
		'tuner_hosts' => true,
		'listing_providers' => true,
		'pre_padding_seconds' => false,
		'post_padding_seconds' => false,
		'media_locations_created' => true,
		'recording_post_processor' => true,
		'recording_post_processor_arguments' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guide_days' => 'GuideDays',
        'recording_path' => 'RecordingPath',
        'movie_recording_path' => 'MovieRecordingPath',
        'series_recording_path' => 'SeriesRecordingPath',
        'enable_recording_subfolders' => 'EnableRecordingSubfolders',
        'enable_original_audio_with_encoded_recordings' => 'EnableOriginalAudioWithEncodedRecordings',
        'tuner_hosts' => 'TunerHosts',
        'listing_providers' => 'ListingProviders',
        'pre_padding_seconds' => 'PrePaddingSeconds',
        'post_padding_seconds' => 'PostPaddingSeconds',
        'media_locations_created' => 'MediaLocationsCreated',
        'recording_post_processor' => 'RecordingPostProcessor',
        'recording_post_processor_arguments' => 'RecordingPostProcessorArguments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guide_days' => 'setGuideDays',
        'recording_path' => 'setRecordingPath',
        'movie_recording_path' => 'setMovieRecordingPath',
        'series_recording_path' => 'setSeriesRecordingPath',
        'enable_recording_subfolders' => 'setEnableRecordingSubfolders',
        'enable_original_audio_with_encoded_recordings' => 'setEnableOriginalAudioWithEncodedRecordings',
        'tuner_hosts' => 'setTunerHosts',
        'listing_providers' => 'setListingProviders',
        'pre_padding_seconds' => 'setPrePaddingSeconds',
        'post_padding_seconds' => 'setPostPaddingSeconds',
        'media_locations_created' => 'setMediaLocationsCreated',
        'recording_post_processor' => 'setRecordingPostProcessor',
        'recording_post_processor_arguments' => 'setRecordingPostProcessorArguments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guide_days' => 'getGuideDays',
        'recording_path' => 'getRecordingPath',
        'movie_recording_path' => 'getMovieRecordingPath',
        'series_recording_path' => 'getSeriesRecordingPath',
        'enable_recording_subfolders' => 'getEnableRecordingSubfolders',
        'enable_original_audio_with_encoded_recordings' => 'getEnableOriginalAudioWithEncodedRecordings',
        'tuner_hosts' => 'getTunerHosts',
        'listing_providers' => 'getListingProviders',
        'pre_padding_seconds' => 'getPrePaddingSeconds',
        'post_padding_seconds' => 'getPostPaddingSeconds',
        'media_locations_created' => 'getMediaLocationsCreated',
        'recording_post_processor' => 'getRecordingPostProcessor',
        'recording_post_processor_arguments' => 'getRecordingPostProcessorArguments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('guide_days', $data ?? [], null);
        $this->setIfExists('recording_path', $data ?? [], null);
        $this->setIfExists('movie_recording_path', $data ?? [], null);
        $this->setIfExists('series_recording_path', $data ?? [], null);
        $this->setIfExists('enable_recording_subfolders', $data ?? [], null);
        $this->setIfExists('enable_original_audio_with_encoded_recordings', $data ?? [], null);
        $this->setIfExists('tuner_hosts', $data ?? [], null);
        $this->setIfExists('listing_providers', $data ?? [], null);
        $this->setIfExists('pre_padding_seconds', $data ?? [], null);
        $this->setIfExists('post_padding_seconds', $data ?? [], null);
        $this->setIfExists('media_locations_created', $data ?? [], null);
        $this->setIfExists('recording_post_processor', $data ?? [], null);
        $this->setIfExists('recording_post_processor_arguments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guide_days
     *
     * @return int|null
     */
    public function getGuideDays()
    {
        return $this->container['guide_days'];
    }

    /**
     * Sets guide_days
     *
     * @param int|null $guide_days guide_days
     *
     * @return self
     */
    public function setGuideDays($guide_days)
    {
        if (is_null($guide_days)) {
            array_push($this->openAPINullablesSetToNull, 'guide_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guide_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guide_days'] = $guide_days;

        return $this;
    }

    /**
     * Gets recording_path
     *
     * @return string|null
     */
    public function getRecordingPath()
    {
        return $this->container['recording_path'];
    }

    /**
     * Sets recording_path
     *
     * @param string|null $recording_path recording_path
     *
     * @return self
     */
    public function setRecordingPath($recording_path)
    {
        if (is_null($recording_path)) {
            array_push($this->openAPINullablesSetToNull, 'recording_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording_path'] = $recording_path;

        return $this;
    }

    /**
     * Gets movie_recording_path
     *
     * @return string|null
     */
    public function getMovieRecordingPath()
    {
        return $this->container['movie_recording_path'];
    }

    /**
     * Sets movie_recording_path
     *
     * @param string|null $movie_recording_path movie_recording_path
     *
     * @return self
     */
    public function setMovieRecordingPath($movie_recording_path)
    {
        if (is_null($movie_recording_path)) {
            array_push($this->openAPINullablesSetToNull, 'movie_recording_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movie_recording_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movie_recording_path'] = $movie_recording_path;

        return $this;
    }

    /**
     * Gets series_recording_path
     *
     * @return string|null
     */
    public function getSeriesRecordingPath()
    {
        return $this->container['series_recording_path'];
    }

    /**
     * Sets series_recording_path
     *
     * @param string|null $series_recording_path series_recording_path
     *
     * @return self
     */
    public function setSeriesRecordingPath($series_recording_path)
    {
        if (is_null($series_recording_path)) {
            array_push($this->openAPINullablesSetToNull, 'series_recording_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_recording_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_recording_path'] = $series_recording_path;

        return $this;
    }

    /**
     * Gets enable_recording_subfolders
     *
     * @return bool|null
     */
    public function getEnableRecordingSubfolders()
    {
        return $this->container['enable_recording_subfolders'];
    }

    /**
     * Sets enable_recording_subfolders
     *
     * @param bool|null $enable_recording_subfolders enable_recording_subfolders
     *
     * @return self
     */
    public function setEnableRecordingSubfolders($enable_recording_subfolders)
    {
        if (is_null($enable_recording_subfolders)) {
            throw new \InvalidArgumentException('non-nullable enable_recording_subfolders cannot be null');
        }
        $this->container['enable_recording_subfolders'] = $enable_recording_subfolders;

        return $this;
    }

    /**
     * Gets enable_original_audio_with_encoded_recordings
     *
     * @return bool|null
     */
    public function getEnableOriginalAudioWithEncodedRecordings()
    {
        return $this->container['enable_original_audio_with_encoded_recordings'];
    }

    /**
     * Sets enable_original_audio_with_encoded_recordings
     *
     * @param bool|null $enable_original_audio_with_encoded_recordings enable_original_audio_with_encoded_recordings
     *
     * @return self
     */
    public function setEnableOriginalAudioWithEncodedRecordings($enable_original_audio_with_encoded_recordings)
    {
        if (is_null($enable_original_audio_with_encoded_recordings)) {
            throw new \InvalidArgumentException('non-nullable enable_original_audio_with_encoded_recordings cannot be null');
        }
        $this->container['enable_original_audio_with_encoded_recordings'] = $enable_original_audio_with_encoded_recordings;

        return $this;
    }

    /**
     * Gets tuner_hosts
     *
     * @return \OpenAPI\Client\Model\TunerHostInfo[]|null
     */
    public function getTunerHosts()
    {
        return $this->container['tuner_hosts'];
    }

    /**
     * Sets tuner_hosts
     *
     * @param \OpenAPI\Client\Model\TunerHostInfo[]|null $tuner_hosts tuner_hosts
     *
     * @return self
     */
    public function setTunerHosts($tuner_hosts)
    {
        if (is_null($tuner_hosts)) {
            array_push($this->openAPINullablesSetToNull, 'tuner_hosts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tuner_hosts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tuner_hosts'] = $tuner_hosts;

        return $this;
    }

    /**
     * Gets listing_providers
     *
     * @return \OpenAPI\Client\Model\ListingsProviderInfo[]|null
     */
    public function getListingProviders()
    {
        return $this->container['listing_providers'];
    }

    /**
     * Sets listing_providers
     *
     * @param \OpenAPI\Client\Model\ListingsProviderInfo[]|null $listing_providers listing_providers
     *
     * @return self
     */
    public function setListingProviders($listing_providers)
    {
        if (is_null($listing_providers)) {
            array_push($this->openAPINullablesSetToNull, 'listing_providers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('listing_providers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['listing_providers'] = $listing_providers;

        return $this;
    }

    /**
     * Gets pre_padding_seconds
     *
     * @return int|null
     */
    public function getPrePaddingSeconds()
    {
        return $this->container['pre_padding_seconds'];
    }

    /**
     * Sets pre_padding_seconds
     *
     * @param int|null $pre_padding_seconds pre_padding_seconds
     *
     * @return self
     */
    public function setPrePaddingSeconds($pre_padding_seconds)
    {
        if (is_null($pre_padding_seconds)) {
            throw new \InvalidArgumentException('non-nullable pre_padding_seconds cannot be null');
        }
        $this->container['pre_padding_seconds'] = $pre_padding_seconds;

        return $this;
    }

    /**
     * Gets post_padding_seconds
     *
     * @return int|null
     */
    public function getPostPaddingSeconds()
    {
        return $this->container['post_padding_seconds'];
    }

    /**
     * Sets post_padding_seconds
     *
     * @param int|null $post_padding_seconds post_padding_seconds
     *
     * @return self
     */
    public function setPostPaddingSeconds($post_padding_seconds)
    {
        if (is_null($post_padding_seconds)) {
            throw new \InvalidArgumentException('non-nullable post_padding_seconds cannot be null');
        }
        $this->container['post_padding_seconds'] = $post_padding_seconds;

        return $this;
    }

    /**
     * Gets media_locations_created
     *
     * @return string[]|null
     */
    public function getMediaLocationsCreated()
    {
        return $this->container['media_locations_created'];
    }

    /**
     * Sets media_locations_created
     *
     * @param string[]|null $media_locations_created media_locations_created
     *
     * @return self
     */
    public function setMediaLocationsCreated($media_locations_created)
    {
        if (is_null($media_locations_created)) {
            array_push($this->openAPINullablesSetToNull, 'media_locations_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_locations_created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_locations_created'] = $media_locations_created;

        return $this;
    }

    /**
     * Gets recording_post_processor
     *
     * @return string|null
     */
    public function getRecordingPostProcessor()
    {
        return $this->container['recording_post_processor'];
    }

    /**
     * Sets recording_post_processor
     *
     * @param string|null $recording_post_processor recording_post_processor
     *
     * @return self
     */
    public function setRecordingPostProcessor($recording_post_processor)
    {
        if (is_null($recording_post_processor)) {
            array_push($this->openAPINullablesSetToNull, 'recording_post_processor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording_post_processor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording_post_processor'] = $recording_post_processor;

        return $this;
    }

    /**
     * Gets recording_post_processor_arguments
     *
     * @return string|null
     */
    public function getRecordingPostProcessorArguments()
    {
        return $this->container['recording_post_processor_arguments'];
    }

    /**
     * Sets recording_post_processor_arguments
     *
     * @param string|null $recording_post_processor_arguments recording_post_processor_arguments
     *
     * @return self
     */
    public function setRecordingPostProcessorArguments($recording_post_processor_arguments)
    {
        if (is_null($recording_post_processor_arguments)) {
            array_push($this->openAPINullablesSetToNull, 'recording_post_processor_arguments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording_post_processor_arguments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording_post_processor_arguments'] = $recording_post_processor_arguments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


