<?php
/**
 * LibraryOptionsTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * LibraryOptionsTest Class Doc Comment
 *
 * @category    Class
 * @description LibraryOptions
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class LibraryOptionsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "LibraryOptions"
     */
    public function testLibraryOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_photos"
     */
    public function testPropertyEnablePhotos()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_realtime_monitor"
     */
    public function testPropertyEnableRealtimeMonitor()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_chapter_image_extraction"
     */
    public function testPropertyEnableChapterImageExtraction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "extract_chapter_images_during_library_scan"
     */
    public function testPropertyExtractChapterImagesDuringLibraryScan()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "path_infos"
     */
    public function testPropertyPathInfos()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "save_local_metadata"
     */
    public function testPropertySaveLocalMetadata()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_internet_providers"
     */
    public function testPropertyEnableInternetProviders()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_automatic_series_grouping"
     */
    public function testPropertyEnableAutomaticSeriesGrouping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_embedded_titles"
     */
    public function testPropertyEnableEmbeddedTitles()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_embedded_episode_infos"
     */
    public function testPropertyEnableEmbeddedEpisodeInfos()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "automatic_refresh_interval_days"
     */
    public function testPropertyAutomaticRefreshIntervalDays()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "preferred_metadata_language"
     */
    public function testPropertyPreferredMetadataLanguage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "metadata_country_code"
     */
    public function testPropertyMetadataCountryCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "season_zero_display_name"
     */
    public function testPropertySeasonZeroDisplayName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "metadata_savers"
     */
    public function testPropertyMetadataSavers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "disabled_local_metadata_readers"
     */
    public function testPropertyDisabledLocalMetadataReaders()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_metadata_reader_order"
     */
    public function testPropertyLocalMetadataReaderOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "disabled_subtitle_fetchers"
     */
    public function testPropertyDisabledSubtitleFetchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subtitle_fetcher_order"
     */
    public function testPropertySubtitleFetcherOrder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "skip_subtitles_if_embedded_subtitles_present"
     */
    public function testPropertySkipSubtitlesIfEmbeddedSubtitlesPresent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "skip_subtitles_if_audio_track_matches"
     */
    public function testPropertySkipSubtitlesIfAudioTrackMatches()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subtitle_download_languages"
     */
    public function testPropertySubtitleDownloadLanguages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "require_perfect_subtitle_match"
     */
    public function testPropertyRequirePerfectSubtitleMatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "save_subtitles_with_media"
     */
    public function testPropertySaveSubtitlesWithMedia()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "automatically_add_to_collection"
     */
    public function testPropertyAutomaticallyAddToCollection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "allow_embedded_subtitles"
     */
    public function testPropertyAllowEmbeddedSubtitles()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "type_options"
     */
    public function testPropertyTypeOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
