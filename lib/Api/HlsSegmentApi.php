<?php
/**
 * HlsSegmentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HlsSegmentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HlsSegmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getHlsAudioSegmentLegacyAac' => [
            'application/json',
        ],
        'getHlsAudioSegmentLegacyMp3' => [
            'application/json',
        ],
        'getHlsPlaylistLegacy' => [
            'application/json',
        ],
        'getHlsVideoSegmentLegacy' => [
            'application/json',
        ],
        'stopEncodingProcess' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHlsAudioSegmentLegacyAac
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyAac'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getHlsAudioSegmentLegacyAac($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyAac'][0])
    {
        list($response) = $this->getHlsAudioSegmentLegacyAacWithHttpInfo($item_id, $segment_id, $contentType);
        return $response;
    }

    /**
     * Operation getHlsAudioSegmentLegacyAacWithHttpInfo
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyAac'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHlsAudioSegmentLegacyAacWithHttpInfo($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyAac'][0])
    {
        $request = $this->getHlsAudioSegmentLegacyAacRequest($item_id, $segment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHlsAudioSegmentLegacyAacAsync
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyAac'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsAudioSegmentLegacyAacAsync($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyAac'][0])
    {
        return $this->getHlsAudioSegmentLegacyAacAsyncWithHttpInfo($item_id, $segment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHlsAudioSegmentLegacyAacAsyncWithHttpInfo
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyAac'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsAudioSegmentLegacyAacAsyncWithHttpInfo($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyAac'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getHlsAudioSegmentLegacyAacRequest($item_id, $segment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHlsAudioSegmentLegacyAac'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyAac'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHlsAudioSegmentLegacyAacRequest($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyAac'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getHlsAudioSegmentLegacyAac'
            );
        }

        // verify the required parameter 'segment_id' is set
        if ($segment_id === null || (is_array($segment_id) && count($segment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment_id when calling getHlsAudioSegmentLegacyAac'
            );
        }


        $resourcePath = '/Audio/{itemId}/hls/{segmentId}/stream.aac';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($segment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentId' . '}',
                ObjectSerializer::toPathValue($segment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['audio/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHlsAudioSegmentLegacyMp3
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyMp3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getHlsAudioSegmentLegacyMp3($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyMp3'][0])
    {
        list($response) = $this->getHlsAudioSegmentLegacyMp3WithHttpInfo($item_id, $segment_id, $contentType);
        return $response;
    }

    /**
     * Operation getHlsAudioSegmentLegacyMp3WithHttpInfo
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyMp3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHlsAudioSegmentLegacyMp3WithHttpInfo($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyMp3'][0])
    {
        $request = $this->getHlsAudioSegmentLegacyMp3Request($item_id, $segment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHlsAudioSegmentLegacyMp3Async
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyMp3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsAudioSegmentLegacyMp3Async($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyMp3'][0])
    {
        return $this->getHlsAudioSegmentLegacyMp3AsyncWithHttpInfo($item_id, $segment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHlsAudioSegmentLegacyMp3AsyncWithHttpInfo
     *
     * Gets the specified audio segment for an audio item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyMp3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsAudioSegmentLegacyMp3AsyncWithHttpInfo($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyMp3'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getHlsAudioSegmentLegacyMp3Request($item_id, $segment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHlsAudioSegmentLegacyMp3'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsAudioSegmentLegacyMp3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHlsAudioSegmentLegacyMp3Request($item_id, $segment_id, string $contentType = self::contentTypes['getHlsAudioSegmentLegacyMp3'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getHlsAudioSegmentLegacyMp3'
            );
        }

        // verify the required parameter 'segment_id' is set
        if ($segment_id === null || (is_array($segment_id) && count($segment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment_id when calling getHlsAudioSegmentLegacyMp3'
            );
        }


        $resourcePath = '/Audio/{itemId}/hls/{segmentId}/stream.mp3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($segment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentId' . '}',
                ObjectSerializer::toPathValue($segment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['audio/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHlsPlaylistLegacy
     *
     * Gets a hls video playlist.
     *
     * @param  string $item_id The video id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsPlaylistLegacy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getHlsPlaylistLegacy($item_id, $playlist_id, string $contentType = self::contentTypes['getHlsPlaylistLegacy'][0])
    {
        list($response) = $this->getHlsPlaylistLegacyWithHttpInfo($item_id, $playlist_id, $contentType);
        return $response;
    }

    /**
     * Operation getHlsPlaylistLegacyWithHttpInfo
     *
     * Gets a hls video playlist.
     *
     * @param  string $item_id The video id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsPlaylistLegacy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHlsPlaylistLegacyWithHttpInfo($item_id, $playlist_id, string $contentType = self::contentTypes['getHlsPlaylistLegacy'][0])
    {
        $request = $this->getHlsPlaylistLegacyRequest($item_id, $playlist_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHlsPlaylistLegacyAsync
     *
     * Gets a hls video playlist.
     *
     * @param  string $item_id The video id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsPlaylistLegacy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsPlaylistLegacyAsync($item_id, $playlist_id, string $contentType = self::contentTypes['getHlsPlaylistLegacy'][0])
    {
        return $this->getHlsPlaylistLegacyAsyncWithHttpInfo($item_id, $playlist_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHlsPlaylistLegacyAsyncWithHttpInfo
     *
     * Gets a hls video playlist.
     *
     * @param  string $item_id The video id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsPlaylistLegacy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsPlaylistLegacyAsyncWithHttpInfo($item_id, $playlist_id, string $contentType = self::contentTypes['getHlsPlaylistLegacy'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getHlsPlaylistLegacyRequest($item_id, $playlist_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHlsPlaylistLegacy'
     *
     * @param  string $item_id The video id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsPlaylistLegacy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHlsPlaylistLegacyRequest($item_id, $playlist_id, string $contentType = self::contentTypes['getHlsPlaylistLegacy'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getHlsPlaylistLegacy'
            );
        }

        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling getHlsPlaylistLegacy'
            );
        }


        $resourcePath = '/Videos/{itemId}/hls/{playlistId}/stream.m3u8';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/x-mpegURL', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHlsVideoSegmentLegacy
     *
     * Gets a hls video segment.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $segment_container The segment container. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsVideoSegmentLegacy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ProblemDetails
     */
    public function getHlsVideoSegmentLegacy($item_id, $playlist_id, $segment_id, $segment_container, string $contentType = self::contentTypes['getHlsVideoSegmentLegacy'][0])
    {
        list($response) = $this->getHlsVideoSegmentLegacyWithHttpInfo($item_id, $playlist_id, $segment_id, $segment_container, $contentType);
        return $response;
    }

    /**
     * Operation getHlsVideoSegmentLegacyWithHttpInfo
     *
     * Gets a hls video segment.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $segment_container The segment container. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsVideoSegmentLegacy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHlsVideoSegmentLegacyWithHttpInfo($item_id, $playlist_id, $segment_id, $segment_container, string $contentType = self::contentTypes['getHlsVideoSegmentLegacy'][0])
    {
        $request = $this->getHlsVideoSegmentLegacyRequest($item_id, $playlist_id, $segment_id, $segment_container, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHlsVideoSegmentLegacyAsync
     *
     * Gets a hls video segment.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $segment_container The segment container. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsVideoSegmentLegacy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsVideoSegmentLegacyAsync($item_id, $playlist_id, $segment_id, $segment_container, string $contentType = self::contentTypes['getHlsVideoSegmentLegacy'][0])
    {
        return $this->getHlsVideoSegmentLegacyAsyncWithHttpInfo($item_id, $playlist_id, $segment_id, $segment_container, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHlsVideoSegmentLegacyAsyncWithHttpInfo
     *
     * Gets a hls video segment.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $segment_container The segment container. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsVideoSegmentLegacy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHlsVideoSegmentLegacyAsyncWithHttpInfo($item_id, $playlist_id, $segment_id, $segment_container, string $contentType = self::contentTypes['getHlsVideoSegmentLegacy'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getHlsVideoSegmentLegacyRequest($item_id, $playlist_id, $segment_id, $segment_container, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHlsVideoSegmentLegacy'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $playlist_id The playlist id. (required)
     * @param  string $segment_id The segment id. (required)
     * @param  string $segment_container The segment container. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHlsVideoSegmentLegacy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHlsVideoSegmentLegacyRequest($item_id, $playlist_id, $segment_id, $segment_container, string $contentType = self::contentTypes['getHlsVideoSegmentLegacy'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getHlsVideoSegmentLegacy'
            );
        }

        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling getHlsVideoSegmentLegacy'
            );
        }

        // verify the required parameter 'segment_id' is set
        if ($segment_id === null || (is_array($segment_id) && count($segment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment_id when calling getHlsVideoSegmentLegacy'
            );
        }

        // verify the required parameter 'segment_container' is set
        if ($segment_container === null || (is_array($segment_container) && count($segment_container) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment_container when calling getHlsVideoSegmentLegacy'
            );
        }


        $resourcePath = '/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }
        // path params
        if ($segment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentId' . '}',
                ObjectSerializer::toPathValue($segment_id),
                $resourcePath
            );
        }
        // path params
        if ($segment_container !== null) {
            $resourcePath = str_replace(
                '{' . 'segmentContainer' . '}',
                ObjectSerializer::toPathValue($segment_container),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['video/*', 'application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopEncodingProcess
     *
     * Stops an active encoding.
     *
     * @param  string $device_id The device id of the client requesting. Used to stop encoding processes when needed. (required)
     * @param  string $play_session_id The play session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopEncodingProcess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function stopEncodingProcess($device_id, $play_session_id, string $contentType = self::contentTypes['stopEncodingProcess'][0])
    {
        $this->stopEncodingProcessWithHttpInfo($device_id, $play_session_id, $contentType);
    }

    /**
     * Operation stopEncodingProcessWithHttpInfo
     *
     * Stops an active encoding.
     *
     * @param  string $device_id The device id of the client requesting. Used to stop encoding processes when needed. (required)
     * @param  string $play_session_id The play session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopEncodingProcess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopEncodingProcessWithHttpInfo($device_id, $play_session_id, string $contentType = self::contentTypes['stopEncodingProcess'][0])
    {
        $request = $this->stopEncodingProcessRequest($device_id, $play_session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation stopEncodingProcessAsync
     *
     * Stops an active encoding.
     *
     * @param  string $device_id The device id of the client requesting. Used to stop encoding processes when needed. (required)
     * @param  string $play_session_id The play session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopEncodingProcess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopEncodingProcessAsync($device_id, $play_session_id, string $contentType = self::contentTypes['stopEncodingProcess'][0])
    {
        return $this->stopEncodingProcessAsyncWithHttpInfo($device_id, $play_session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopEncodingProcessAsyncWithHttpInfo
     *
     * Stops an active encoding.
     *
     * @param  string $device_id The device id of the client requesting. Used to stop encoding processes when needed. (required)
     * @param  string $play_session_id The play session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopEncodingProcess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopEncodingProcessAsyncWithHttpInfo($device_id, $play_session_id, string $contentType = self::contentTypes['stopEncodingProcess'][0])
    {
        $returnType = '';
        $request = $this->stopEncodingProcessRequest($device_id, $play_session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopEncodingProcess'
     *
     * @param  string $device_id The device id of the client requesting. Used to stop encoding processes when needed. (required)
     * @param  string $play_session_id The play session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stopEncodingProcess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stopEncodingProcessRequest($device_id, $play_session_id, string $contentType = self::contentTypes['stopEncodingProcess'][0])
    {

        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling stopEncodingProcess'
            );
        }

        // verify the required parameter 'play_session_id' is set
        if ($play_session_id === null || (is_array($play_session_id) && count($play_session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $play_session_id when calling stopEncodingProcess'
            );
        }


        $resourcePath = '/Videos/ActiveEncodings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $device_id,
            'deviceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_session_id,
            'playSessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
