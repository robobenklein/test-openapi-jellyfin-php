<?php
/**
 * ItemCounts
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ItemCounts Class Doc Comment
 *
 * @category Class
 * @description Class LibrarySummary.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemCounts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemCounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'movie_count' => 'int',
        'series_count' => 'int',
        'episode_count' => 'int',
        'artist_count' => 'int',
        'program_count' => 'int',
        'trailer_count' => 'int',
        'song_count' => 'int',
        'album_count' => 'int',
        'music_video_count' => 'int',
        'box_set_count' => 'int',
        'book_count' => 'int',
        'item_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'movie_count' => 'int32',
        'series_count' => 'int32',
        'episode_count' => 'int32',
        'artist_count' => 'int32',
        'program_count' => 'int32',
        'trailer_count' => 'int32',
        'song_count' => 'int32',
        'album_count' => 'int32',
        'music_video_count' => 'int32',
        'box_set_count' => 'int32',
        'book_count' => 'int32',
        'item_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'movie_count' => false,
		'series_count' => false,
		'episode_count' => false,
		'artist_count' => false,
		'program_count' => false,
		'trailer_count' => false,
		'song_count' => false,
		'album_count' => false,
		'music_video_count' => false,
		'box_set_count' => false,
		'book_count' => false,
		'item_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'movie_count' => 'MovieCount',
        'series_count' => 'SeriesCount',
        'episode_count' => 'EpisodeCount',
        'artist_count' => 'ArtistCount',
        'program_count' => 'ProgramCount',
        'trailer_count' => 'TrailerCount',
        'song_count' => 'SongCount',
        'album_count' => 'AlbumCount',
        'music_video_count' => 'MusicVideoCount',
        'box_set_count' => 'BoxSetCount',
        'book_count' => 'BookCount',
        'item_count' => 'ItemCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'movie_count' => 'setMovieCount',
        'series_count' => 'setSeriesCount',
        'episode_count' => 'setEpisodeCount',
        'artist_count' => 'setArtistCount',
        'program_count' => 'setProgramCount',
        'trailer_count' => 'setTrailerCount',
        'song_count' => 'setSongCount',
        'album_count' => 'setAlbumCount',
        'music_video_count' => 'setMusicVideoCount',
        'box_set_count' => 'setBoxSetCount',
        'book_count' => 'setBookCount',
        'item_count' => 'setItemCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'movie_count' => 'getMovieCount',
        'series_count' => 'getSeriesCount',
        'episode_count' => 'getEpisodeCount',
        'artist_count' => 'getArtistCount',
        'program_count' => 'getProgramCount',
        'trailer_count' => 'getTrailerCount',
        'song_count' => 'getSongCount',
        'album_count' => 'getAlbumCount',
        'music_video_count' => 'getMusicVideoCount',
        'box_set_count' => 'getBoxSetCount',
        'book_count' => 'getBookCount',
        'item_count' => 'getItemCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('movie_count', $data ?? [], null);
        $this->setIfExists('series_count', $data ?? [], null);
        $this->setIfExists('episode_count', $data ?? [], null);
        $this->setIfExists('artist_count', $data ?? [], null);
        $this->setIfExists('program_count', $data ?? [], null);
        $this->setIfExists('trailer_count', $data ?? [], null);
        $this->setIfExists('song_count', $data ?? [], null);
        $this->setIfExists('album_count', $data ?? [], null);
        $this->setIfExists('music_video_count', $data ?? [], null);
        $this->setIfExists('box_set_count', $data ?? [], null);
        $this->setIfExists('book_count', $data ?? [], null);
        $this->setIfExists('item_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets movie_count
     *
     * @return int|null
     */
    public function getMovieCount()
    {
        return $this->container['movie_count'];
    }

    /**
     * Sets movie_count
     *
     * @param int|null $movie_count Gets or sets the movie count.
     *
     * @return self
     */
    public function setMovieCount($movie_count)
    {
        if (is_null($movie_count)) {
            throw new \InvalidArgumentException('non-nullable movie_count cannot be null');
        }
        $this->container['movie_count'] = $movie_count;

        return $this;
    }

    /**
     * Gets series_count
     *
     * @return int|null
     */
    public function getSeriesCount()
    {
        return $this->container['series_count'];
    }

    /**
     * Sets series_count
     *
     * @param int|null $series_count Gets or sets the series count.
     *
     * @return self
     */
    public function setSeriesCount($series_count)
    {
        if (is_null($series_count)) {
            throw new \InvalidArgumentException('non-nullable series_count cannot be null');
        }
        $this->container['series_count'] = $series_count;

        return $this;
    }

    /**
     * Gets episode_count
     *
     * @return int|null
     */
    public function getEpisodeCount()
    {
        return $this->container['episode_count'];
    }

    /**
     * Sets episode_count
     *
     * @param int|null $episode_count Gets or sets the episode count.
     *
     * @return self
     */
    public function setEpisodeCount($episode_count)
    {
        if (is_null($episode_count)) {
            throw new \InvalidArgumentException('non-nullable episode_count cannot be null');
        }
        $this->container['episode_count'] = $episode_count;

        return $this;
    }

    /**
     * Gets artist_count
     *
     * @return int|null
     */
    public function getArtistCount()
    {
        return $this->container['artist_count'];
    }

    /**
     * Sets artist_count
     *
     * @param int|null $artist_count Gets or sets the artist count.
     *
     * @return self
     */
    public function setArtistCount($artist_count)
    {
        if (is_null($artist_count)) {
            throw new \InvalidArgumentException('non-nullable artist_count cannot be null');
        }
        $this->container['artist_count'] = $artist_count;

        return $this;
    }

    /**
     * Gets program_count
     *
     * @return int|null
     */
    public function getProgramCount()
    {
        return $this->container['program_count'];
    }

    /**
     * Sets program_count
     *
     * @param int|null $program_count Gets or sets the program count.
     *
     * @return self
     */
    public function setProgramCount($program_count)
    {
        if (is_null($program_count)) {
            throw new \InvalidArgumentException('non-nullable program_count cannot be null');
        }
        $this->container['program_count'] = $program_count;

        return $this;
    }

    /**
     * Gets trailer_count
     *
     * @return int|null
     */
    public function getTrailerCount()
    {
        return $this->container['trailer_count'];
    }

    /**
     * Sets trailer_count
     *
     * @param int|null $trailer_count Gets or sets the trailer count.
     *
     * @return self
     */
    public function setTrailerCount($trailer_count)
    {
        if (is_null($trailer_count)) {
            throw new \InvalidArgumentException('non-nullable trailer_count cannot be null');
        }
        $this->container['trailer_count'] = $trailer_count;

        return $this;
    }

    /**
     * Gets song_count
     *
     * @return int|null
     */
    public function getSongCount()
    {
        return $this->container['song_count'];
    }

    /**
     * Sets song_count
     *
     * @param int|null $song_count Gets or sets the song count.
     *
     * @return self
     */
    public function setSongCount($song_count)
    {
        if (is_null($song_count)) {
            throw new \InvalidArgumentException('non-nullable song_count cannot be null');
        }
        $this->container['song_count'] = $song_count;

        return $this;
    }

    /**
     * Gets album_count
     *
     * @return int|null
     */
    public function getAlbumCount()
    {
        return $this->container['album_count'];
    }

    /**
     * Sets album_count
     *
     * @param int|null $album_count Gets or sets the album count.
     *
     * @return self
     */
    public function setAlbumCount($album_count)
    {
        if (is_null($album_count)) {
            throw new \InvalidArgumentException('non-nullable album_count cannot be null');
        }
        $this->container['album_count'] = $album_count;

        return $this;
    }

    /**
     * Gets music_video_count
     *
     * @return int|null
     */
    public function getMusicVideoCount()
    {
        return $this->container['music_video_count'];
    }

    /**
     * Sets music_video_count
     *
     * @param int|null $music_video_count Gets or sets the music video count.
     *
     * @return self
     */
    public function setMusicVideoCount($music_video_count)
    {
        if (is_null($music_video_count)) {
            throw new \InvalidArgumentException('non-nullable music_video_count cannot be null');
        }
        $this->container['music_video_count'] = $music_video_count;

        return $this;
    }

    /**
     * Gets box_set_count
     *
     * @return int|null
     */
    public function getBoxSetCount()
    {
        return $this->container['box_set_count'];
    }

    /**
     * Sets box_set_count
     *
     * @param int|null $box_set_count Gets or sets the box set count.
     *
     * @return self
     */
    public function setBoxSetCount($box_set_count)
    {
        if (is_null($box_set_count)) {
            throw new \InvalidArgumentException('non-nullable box_set_count cannot be null');
        }
        $this->container['box_set_count'] = $box_set_count;

        return $this;
    }

    /**
     * Gets book_count
     *
     * @return int|null
     */
    public function getBookCount()
    {
        return $this->container['book_count'];
    }

    /**
     * Sets book_count
     *
     * @param int|null $book_count Gets or sets the book count.
     *
     * @return self
     */
    public function setBookCount($book_count)
    {
        if (is_null($book_count)) {
            throw new \InvalidArgumentException('non-nullable book_count cannot be null');
        }
        $this->container['book_count'] = $book_count;

        return $this;
    }

    /**
     * Gets item_count
     *
     * @return int|null
     */
    public function getItemCount()
    {
        return $this->container['item_count'];
    }

    /**
     * Sets item_count
     *
     * @param int|null $item_count Gets or sets the item count.
     *
     * @return self
     */
    public function setItemCount($item_count)
    {
        if (is_null($item_count)) {
            throw new \InvalidArgumentException('non-nullable item_count cannot be null');
        }
        $this->container['item_count'] = $item_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


