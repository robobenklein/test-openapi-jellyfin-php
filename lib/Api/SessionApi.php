<?php
/**
 * SessionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SessionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SessionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addUserToSession' => [
            'application/json',
        ],
        'displayContent' => [
            'application/json',
        ],
        'getAuthProviders' => [
            'application/json',
        ],
        'getPasswordResetProviders' => [
            'application/json',
        ],
        'getSessions' => [
            'application/json',
        ],
        'play' => [
            'application/json',
        ],
        'postCapabilities' => [
            'application/json',
        ],
        'postFullCapabilities' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'removeUserFromSession' => [
            'application/json',
        ],
        'reportSessionEnded' => [
            'application/json',
        ],
        'reportViewing' => [
            'application/json',
        ],
        'sendFullGeneralCommand' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'sendGeneralCommand' => [
            'application/json',
        ],
        'sendMessageCommand' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'sendPlaystateCommand' => [
            'application/json',
        ],
        'sendSystemCommand' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addUserToSession
     *
     * Adds an additional user to a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserToSession'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addUserToSession($session_id, $user_id, string $contentType = self::contentTypes['addUserToSession'][0])
    {
        $this->addUserToSessionWithHttpInfo($session_id, $user_id, $contentType);
    }

    /**
     * Operation addUserToSessionWithHttpInfo
     *
     * Adds an additional user to a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserToSession'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserToSessionWithHttpInfo($session_id, $user_id, string $contentType = self::contentTypes['addUserToSession'][0])
    {
        $request = $this->addUserToSessionRequest($session_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addUserToSessionAsync
     *
     * Adds an additional user to a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserToSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUserToSessionAsync($session_id, $user_id, string $contentType = self::contentTypes['addUserToSession'][0])
    {
        return $this->addUserToSessionAsyncWithHttpInfo($session_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUserToSessionAsyncWithHttpInfo
     *
     * Adds an additional user to a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserToSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUserToSessionAsyncWithHttpInfo($session_id, $user_id, string $contentType = self::contentTypes['addUserToSession'][0])
    {
        $returnType = '';
        $request = $this->addUserToSessionRequest($session_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addUserToSession'
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserToSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addUserToSessionRequest($session_id, $user_id, string $contentType = self::contentTypes['addUserToSession'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling addUserToSession'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling addUserToSession'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/User/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation displayContent
     *
     * Instructs a session to browse to an item or view.
     *
     * @param  string $session_id The session Id. (required)
     * @param  \OpenAPI\Client\Model\BaseItemKind $item_type The type of item to browse to. (required)
     * @param  string $item_id The Id of the item. (required)
     * @param  string $item_name The name of the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['displayContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function displayContent($session_id, $item_type, $item_id, $item_name, string $contentType = self::contentTypes['displayContent'][0])
    {
        $this->displayContentWithHttpInfo($session_id, $item_type, $item_id, $item_name, $contentType);
    }

    /**
     * Operation displayContentWithHttpInfo
     *
     * Instructs a session to browse to an item or view.
     *
     * @param  string $session_id The session Id. (required)
     * @param  \OpenAPI\Client\Model\BaseItemKind $item_type The type of item to browse to. (required)
     * @param  string $item_id The Id of the item. (required)
     * @param  string $item_name The name of the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['displayContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function displayContentWithHttpInfo($session_id, $item_type, $item_id, $item_name, string $contentType = self::contentTypes['displayContent'][0])
    {
        $request = $this->displayContentRequest($session_id, $item_type, $item_id, $item_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation displayContentAsync
     *
     * Instructs a session to browse to an item or view.
     *
     * @param  string $session_id The session Id. (required)
     * @param  \OpenAPI\Client\Model\BaseItemKind $item_type The type of item to browse to. (required)
     * @param  string $item_id The Id of the item. (required)
     * @param  string $item_name The name of the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['displayContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function displayContentAsync($session_id, $item_type, $item_id, $item_name, string $contentType = self::contentTypes['displayContent'][0])
    {
        return $this->displayContentAsyncWithHttpInfo($session_id, $item_type, $item_id, $item_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation displayContentAsyncWithHttpInfo
     *
     * Instructs a session to browse to an item or view.
     *
     * @param  string $session_id The session Id. (required)
     * @param  \OpenAPI\Client\Model\BaseItemKind $item_type The type of item to browse to. (required)
     * @param  string $item_id The Id of the item. (required)
     * @param  string $item_name The name of the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['displayContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function displayContentAsyncWithHttpInfo($session_id, $item_type, $item_id, $item_name, string $contentType = self::contentTypes['displayContent'][0])
    {
        $returnType = '';
        $request = $this->displayContentRequest($session_id, $item_type, $item_id, $item_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'displayContent'
     *
     * @param  string $session_id The session Id. (required)
     * @param  \OpenAPI\Client\Model\BaseItemKind $item_type The type of item to browse to. (required)
     * @param  string $item_id The Id of the item. (required)
     * @param  string $item_name The name of the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['displayContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function displayContentRequest($session_id, $item_type, $item_id, $item_name, string $contentType = self::contentTypes['displayContent'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling displayContent'
            );
        }

        // verify the required parameter 'item_type' is set
        if ($item_type === null || (is_array($item_type) && count($item_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_type when calling displayContent'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling displayContent'
            );
        }

        // verify the required parameter 'item_name' is set
        if ($item_name === null || (is_array($item_name) && count($item_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_name when calling displayContent'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/Viewing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_type,
            'itemType', // param base name
            'BaseItemKind', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_name,
            'itemName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuthProviders
     *
     * Get all auth providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthProviders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\NameIdPair[]
     */
    public function getAuthProviders(string $contentType = self::contentTypes['getAuthProviders'][0])
    {
        list($response) = $this->getAuthProvidersWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAuthProvidersWithHttpInfo
     *
     * Get all auth providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthProviders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\NameIdPair[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthProvidersWithHttpInfo(string $contentType = self::contentTypes['getAuthProviders'][0])
    {
        $request = $this->getAuthProvidersRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\NameIdPair[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NameIdPair[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NameIdPair[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\NameIdPair[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NameIdPair[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuthProvidersAsync
     *
     * Get all auth providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthProvidersAsync(string $contentType = self::contentTypes['getAuthProviders'][0])
    {
        return $this->getAuthProvidersAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthProvidersAsyncWithHttpInfo
     *
     * Get all auth providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthProvidersAsyncWithHttpInfo(string $contentType = self::contentTypes['getAuthProviders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\NameIdPair[]';
        $request = $this->getAuthProvidersRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthProviders'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthProvidersRequest(string $contentType = self::contentTypes['getAuthProviders'][0])
    {


        $resourcePath = '/Auth/Providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPasswordResetProviders
     *
     * Get all password reset providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordResetProviders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\NameIdPair[]
     */
    public function getPasswordResetProviders(string $contentType = self::contentTypes['getPasswordResetProviders'][0])
    {
        list($response) = $this->getPasswordResetProvidersWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getPasswordResetProvidersWithHttpInfo
     *
     * Get all password reset providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordResetProviders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\NameIdPair[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPasswordResetProvidersWithHttpInfo(string $contentType = self::contentTypes['getPasswordResetProviders'][0])
    {
        $request = $this->getPasswordResetProvidersRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\NameIdPair[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NameIdPair[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NameIdPair[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\NameIdPair[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NameIdPair[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPasswordResetProvidersAsync
     *
     * Get all password reset providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordResetProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPasswordResetProvidersAsync(string $contentType = self::contentTypes['getPasswordResetProviders'][0])
    {
        return $this->getPasswordResetProvidersAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPasswordResetProvidersAsyncWithHttpInfo
     *
     * Get all password reset providers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordResetProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPasswordResetProvidersAsyncWithHttpInfo(string $contentType = self::contentTypes['getPasswordResetProviders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\NameIdPair[]';
        $request = $this->getPasswordResetProvidersRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPasswordResetProviders'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordResetProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPasswordResetProvidersRequest(string $contentType = self::contentTypes['getPasswordResetProviders'][0])
    {


        $resourcePath = '/Auth/PasswordResetProviders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSessions
     *
     * Gets a list of sessions.
     *
     * @param  string $controllable_by_user_id Filter by sessions that a given user is allowed to remote control. (optional)
     * @param  string $device_id Filter by device Id. (optional)
     * @param  int $active_within_seconds Optional. Filter by sessions that were active in the last n seconds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SessionInfo[]
     */
    public function getSessions($controllable_by_user_id = null, $device_id = null, $active_within_seconds = null, string $contentType = self::contentTypes['getSessions'][0])
    {
        list($response) = $this->getSessionsWithHttpInfo($controllable_by_user_id, $device_id, $active_within_seconds, $contentType);
        return $response;
    }

    /**
     * Operation getSessionsWithHttpInfo
     *
     * Gets a list of sessions.
     *
     * @param  string $controllable_by_user_id Filter by sessions that a given user is allowed to remote control. (optional)
     * @param  string $device_id Filter by device Id. (optional)
     * @param  int $active_within_seconds Optional. Filter by sessions that were active in the last n seconds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SessionInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSessionsWithHttpInfo($controllable_by_user_id = null, $device_id = null, $active_within_seconds = null, string $contentType = self::contentTypes['getSessions'][0])
    {
        $request = $this->getSessionsRequest($controllable_by_user_id, $device_id, $active_within_seconds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SessionInfo[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SessionInfo[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SessionInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SessionInfo[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SessionInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSessionsAsync
     *
     * Gets a list of sessions.
     *
     * @param  string $controllable_by_user_id Filter by sessions that a given user is allowed to remote control. (optional)
     * @param  string $device_id Filter by device Id. (optional)
     * @param  int $active_within_seconds Optional. Filter by sessions that were active in the last n seconds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSessionsAsync($controllable_by_user_id = null, $device_id = null, $active_within_seconds = null, string $contentType = self::contentTypes['getSessions'][0])
    {
        return $this->getSessionsAsyncWithHttpInfo($controllable_by_user_id, $device_id, $active_within_seconds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSessionsAsyncWithHttpInfo
     *
     * Gets a list of sessions.
     *
     * @param  string $controllable_by_user_id Filter by sessions that a given user is allowed to remote control. (optional)
     * @param  string $device_id Filter by device Id. (optional)
     * @param  int $active_within_seconds Optional. Filter by sessions that were active in the last n seconds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSessionsAsyncWithHttpInfo($controllable_by_user_id = null, $device_id = null, $active_within_seconds = null, string $contentType = self::contentTypes['getSessions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SessionInfo[]';
        $request = $this->getSessionsRequest($controllable_by_user_id, $device_id, $active_within_seconds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSessions'
     *
     * @param  string $controllable_by_user_id Filter by sessions that a given user is allowed to remote control. (optional)
     * @param  string $device_id Filter by device Id. (optional)
     * @param  int $active_within_seconds Optional. Filter by sessions that were active in the last n seconds. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSessions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSessionsRequest($controllable_by_user_id = null, $device_id = null, $active_within_seconds = null, string $contentType = self::contentTypes['getSessions'][0])
    {





        $resourcePath = '/Sessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $controllable_by_user_id,
            'controllableByUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $device_id,
            'deviceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active_within_seconds,
            'activeWithinSeconds', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation play
     *
     * Instructs a session to play an item.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlayCommand $play_command The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. (required)
     * @param  string[] $item_ids The ids of the items to play, comma delimited. (required)
     * @param  int $start_position_ticks The starting position of the first item. (optional)
     * @param  string $media_source_id Optional. The media source id. (optional)
     * @param  int $audio_stream_index Optional. The index of the audio stream to play. (optional)
     * @param  int $subtitle_stream_index Optional. The index of the subtitle stream to play. (optional)
     * @param  int $start_index Optional. The start index. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['play'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function play($session_id, $play_command, $item_ids, $start_position_ticks = null, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $start_index = null, string $contentType = self::contentTypes['play'][0])
    {
        $this->playWithHttpInfo($session_id, $play_command, $item_ids, $start_position_ticks, $media_source_id, $audio_stream_index, $subtitle_stream_index, $start_index, $contentType);
    }

    /**
     * Operation playWithHttpInfo
     *
     * Instructs a session to play an item.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlayCommand $play_command The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. (required)
     * @param  string[] $item_ids The ids of the items to play, comma delimited. (required)
     * @param  int $start_position_ticks The starting position of the first item. (optional)
     * @param  string $media_source_id Optional. The media source id. (optional)
     * @param  int $audio_stream_index Optional. The index of the audio stream to play. (optional)
     * @param  int $subtitle_stream_index Optional. The index of the subtitle stream to play. (optional)
     * @param  int $start_index Optional. The start index. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['play'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function playWithHttpInfo($session_id, $play_command, $item_ids, $start_position_ticks = null, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $start_index = null, string $contentType = self::contentTypes['play'][0])
    {
        $request = $this->playRequest($session_id, $play_command, $item_ids, $start_position_ticks, $media_source_id, $audio_stream_index, $subtitle_stream_index, $start_index, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation playAsync
     *
     * Instructs a session to play an item.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlayCommand $play_command The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. (required)
     * @param  string[] $item_ids The ids of the items to play, comma delimited. (required)
     * @param  int $start_position_ticks The starting position of the first item. (optional)
     * @param  string $media_source_id Optional. The media source id. (optional)
     * @param  int $audio_stream_index Optional. The index of the audio stream to play. (optional)
     * @param  int $subtitle_stream_index Optional. The index of the subtitle stream to play. (optional)
     * @param  int $start_index Optional. The start index. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['play'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playAsync($session_id, $play_command, $item_ids, $start_position_ticks = null, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $start_index = null, string $contentType = self::contentTypes['play'][0])
    {
        return $this->playAsyncWithHttpInfo($session_id, $play_command, $item_ids, $start_position_ticks, $media_source_id, $audio_stream_index, $subtitle_stream_index, $start_index, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playAsyncWithHttpInfo
     *
     * Instructs a session to play an item.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlayCommand $play_command The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. (required)
     * @param  string[] $item_ids The ids of the items to play, comma delimited. (required)
     * @param  int $start_position_ticks The starting position of the first item. (optional)
     * @param  string $media_source_id Optional. The media source id. (optional)
     * @param  int $audio_stream_index Optional. The index of the audio stream to play. (optional)
     * @param  int $subtitle_stream_index Optional. The index of the subtitle stream to play. (optional)
     * @param  int $start_index Optional. The start index. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['play'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playAsyncWithHttpInfo($session_id, $play_command, $item_ids, $start_position_ticks = null, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $start_index = null, string $contentType = self::contentTypes['play'][0])
    {
        $returnType = '';
        $request = $this->playRequest($session_id, $play_command, $item_ids, $start_position_ticks, $media_source_id, $audio_stream_index, $subtitle_stream_index, $start_index, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'play'
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlayCommand $play_command The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. (required)
     * @param  string[] $item_ids The ids of the items to play, comma delimited. (required)
     * @param  int $start_position_ticks The starting position of the first item. (optional)
     * @param  string $media_source_id Optional. The media source id. (optional)
     * @param  int $audio_stream_index Optional. The index of the audio stream to play. (optional)
     * @param  int $subtitle_stream_index Optional. The index of the subtitle stream to play. (optional)
     * @param  int $start_index Optional. The start index. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['play'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playRequest($session_id, $play_command, $item_ids, $start_position_ticks = null, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $start_index = null, string $contentType = self::contentTypes['play'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling play'
            );
        }

        // verify the required parameter 'play_command' is set
        if ($play_command === null || (is_array($play_command) && count($play_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $play_command when calling play'
            );
        }

        // verify the required parameter 'item_ids' is set
        if ($item_ids === null || (is_array($item_ids) && count($item_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_ids when calling play'
            );
        }







        $resourcePath = '/Sessions/{sessionId}/Playing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_command,
            'playCommand', // param base name
            'PlayCommand', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_ids,
            'itemIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_position_ticks,
            'startPositionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $audio_stream_index,
            'audioStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subtitle_stream_index,
            'subtitleStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCapabilities
     *
     * Updates capabilities for a device.
     *
     * @param  string $id The session id. (optional)
     * @param  string[] $playable_media_types A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     * @param  \OpenAPI\Client\Model\GeneralCommandType[] $supported_commands A list of supported remote control commands, comma delimited. (optional)
     * @param  bool $supports_media_control Determines whether media can be played remotely.. (optional, default to false)
     * @param  bool $supports_sync Determines whether sync is supported. (optional, default to false)
     * @param  bool $supports_persistent_identifier Determines whether the device supports a unique identifier. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postCapabilities($id = null, $playable_media_types = null, $supported_commands = null, $supports_media_control = false, $supports_sync = false, $supports_persistent_identifier = true, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        $this->postCapabilitiesWithHttpInfo($id, $playable_media_types, $supported_commands, $supports_media_control, $supports_sync, $supports_persistent_identifier, $contentType);
    }

    /**
     * Operation postCapabilitiesWithHttpInfo
     *
     * Updates capabilities for a device.
     *
     * @param  string $id The session id. (optional)
     * @param  string[] $playable_media_types A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     * @param  \OpenAPI\Client\Model\GeneralCommandType[] $supported_commands A list of supported remote control commands, comma delimited. (optional)
     * @param  bool $supports_media_control Determines whether media can be played remotely.. (optional, default to false)
     * @param  bool $supports_sync Determines whether sync is supported. (optional, default to false)
     * @param  bool $supports_persistent_identifier Determines whether the device supports a unique identifier. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCapabilitiesWithHttpInfo($id = null, $playable_media_types = null, $supported_commands = null, $supports_media_control = false, $supports_sync = false, $supports_persistent_identifier = true, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        $request = $this->postCapabilitiesRequest($id, $playable_media_types, $supported_commands, $supports_media_control, $supports_sync, $supports_persistent_identifier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postCapabilitiesAsync
     *
     * Updates capabilities for a device.
     *
     * @param  string $id The session id. (optional)
     * @param  string[] $playable_media_types A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     * @param  \OpenAPI\Client\Model\GeneralCommandType[] $supported_commands A list of supported remote control commands, comma delimited. (optional)
     * @param  bool $supports_media_control Determines whether media can be played remotely.. (optional, default to false)
     * @param  bool $supports_sync Determines whether sync is supported. (optional, default to false)
     * @param  bool $supports_persistent_identifier Determines whether the device supports a unique identifier. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCapabilitiesAsync($id = null, $playable_media_types = null, $supported_commands = null, $supports_media_control = false, $supports_sync = false, $supports_persistent_identifier = true, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        return $this->postCapabilitiesAsyncWithHttpInfo($id, $playable_media_types, $supported_commands, $supports_media_control, $supports_sync, $supports_persistent_identifier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCapabilitiesAsyncWithHttpInfo
     *
     * Updates capabilities for a device.
     *
     * @param  string $id The session id. (optional)
     * @param  string[] $playable_media_types A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     * @param  \OpenAPI\Client\Model\GeneralCommandType[] $supported_commands A list of supported remote control commands, comma delimited. (optional)
     * @param  bool $supports_media_control Determines whether media can be played remotely.. (optional, default to false)
     * @param  bool $supports_sync Determines whether sync is supported. (optional, default to false)
     * @param  bool $supports_persistent_identifier Determines whether the device supports a unique identifier. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCapabilitiesAsyncWithHttpInfo($id = null, $playable_media_types = null, $supported_commands = null, $supports_media_control = false, $supports_sync = false, $supports_persistent_identifier = true, string $contentType = self::contentTypes['postCapabilities'][0])
    {
        $returnType = '';
        $request = $this->postCapabilitiesRequest($id, $playable_media_types, $supported_commands, $supports_media_control, $supports_sync, $supports_persistent_identifier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCapabilities'
     *
     * @param  string $id The session id. (optional)
     * @param  string[] $playable_media_types A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     * @param  \OpenAPI\Client\Model\GeneralCommandType[] $supported_commands A list of supported remote control commands, comma delimited. (optional)
     * @param  bool $supports_media_control Determines whether media can be played remotely.. (optional, default to false)
     * @param  bool $supports_sync Determines whether sync is supported. (optional, default to false)
     * @param  bool $supports_persistent_identifier Determines whether the device supports a unique identifier. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCapabilitiesRequest($id = null, $playable_media_types = null, $supported_commands = null, $supports_media_control = false, $supports_sync = false, $supports_persistent_identifier = true, string $contentType = self::contentTypes['postCapabilities'][0])
    {








        $resourcePath = '/Sessions/Capabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playable_media_types,
            'playableMediaTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supported_commands,
            'supportedCommands', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supports_media_control,
            'supportsMediaControl', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supports_sync,
            'supportsSync', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supports_persistent_identifier,
            'supportsPersistentIdentifier', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFullCapabilities
     *
     * Updates capabilities for a device.
     *
     * @param  \OpenAPI\Client\Model\PostFullCapabilitiesRequest $post_full_capabilities_request The MediaBrowser.Model.Session.ClientCapabilities. (required)
     * @param  string $id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFullCapabilities'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postFullCapabilities($post_full_capabilities_request, $id = null, string $contentType = self::contentTypes['postFullCapabilities'][0])
    {
        $this->postFullCapabilitiesWithHttpInfo($post_full_capabilities_request, $id, $contentType);
    }

    /**
     * Operation postFullCapabilitiesWithHttpInfo
     *
     * Updates capabilities for a device.
     *
     * @param  \OpenAPI\Client\Model\PostFullCapabilitiesRequest $post_full_capabilities_request The MediaBrowser.Model.Session.ClientCapabilities. (required)
     * @param  string $id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFullCapabilities'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFullCapabilitiesWithHttpInfo($post_full_capabilities_request, $id = null, string $contentType = self::contentTypes['postFullCapabilities'][0])
    {
        $request = $this->postFullCapabilitiesRequest($post_full_capabilities_request, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postFullCapabilitiesAsync
     *
     * Updates capabilities for a device.
     *
     * @param  \OpenAPI\Client\Model\PostFullCapabilitiesRequest $post_full_capabilities_request The MediaBrowser.Model.Session.ClientCapabilities. (required)
     * @param  string $id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFullCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFullCapabilitiesAsync($post_full_capabilities_request, $id = null, string $contentType = self::contentTypes['postFullCapabilities'][0])
    {
        return $this->postFullCapabilitiesAsyncWithHttpInfo($post_full_capabilities_request, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFullCapabilitiesAsyncWithHttpInfo
     *
     * Updates capabilities for a device.
     *
     * @param  \OpenAPI\Client\Model\PostFullCapabilitiesRequest $post_full_capabilities_request The MediaBrowser.Model.Session.ClientCapabilities. (required)
     * @param  string $id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFullCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFullCapabilitiesAsyncWithHttpInfo($post_full_capabilities_request, $id = null, string $contentType = self::contentTypes['postFullCapabilities'][0])
    {
        $returnType = '';
        $request = $this->postFullCapabilitiesRequest($post_full_capabilities_request, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFullCapabilities'
     *
     * @param  \OpenAPI\Client\Model\PostFullCapabilitiesRequest $post_full_capabilities_request The MediaBrowser.Model.Session.ClientCapabilities. (required)
     * @param  string $id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postFullCapabilities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFullCapabilitiesRequest($post_full_capabilities_request, $id = null, string $contentType = self::contentTypes['postFullCapabilities'][0])
    {

        // verify the required parameter 'post_full_capabilities_request' is set
        if ($post_full_capabilities_request === null || (is_array($post_full_capabilities_request) && count($post_full_capabilities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_full_capabilities_request when calling postFullCapabilities'
            );
        }



        $resourcePath = '/Sessions/Capabilities/Full';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_full_capabilities_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_full_capabilities_request));
            } else {
                $httpBody = $post_full_capabilities_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeUserFromSession
     *
     * Removes an additional user from a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserFromSession'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeUserFromSession($session_id, $user_id, string $contentType = self::contentTypes['removeUserFromSession'][0])
    {
        $this->removeUserFromSessionWithHttpInfo($session_id, $user_id, $contentType);
    }

    /**
     * Operation removeUserFromSessionWithHttpInfo
     *
     * Removes an additional user from a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserFromSession'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeUserFromSessionWithHttpInfo($session_id, $user_id, string $contentType = self::contentTypes['removeUserFromSession'][0])
    {
        $request = $this->removeUserFromSessionRequest($session_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeUserFromSessionAsync
     *
     * Removes an additional user from a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserFromSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeUserFromSessionAsync($session_id, $user_id, string $contentType = self::contentTypes['removeUserFromSession'][0])
    {
        return $this->removeUserFromSessionAsyncWithHttpInfo($session_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeUserFromSessionAsyncWithHttpInfo
     *
     * Removes an additional user from a session.
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserFromSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeUserFromSessionAsyncWithHttpInfo($session_id, $user_id, string $contentType = self::contentTypes['removeUserFromSession'][0])
    {
        $returnType = '';
        $request = $this->removeUserFromSessionRequest($session_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeUserFromSession'
     *
     * @param  string $session_id The session id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserFromSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeUserFromSessionRequest($session_id, $user_id, string $contentType = self::contentTypes['removeUserFromSession'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling removeUserFromSession'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling removeUserFromSession'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/User/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportSessionEnded
     *
     * Reports that a session has ended.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportSessionEnded'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportSessionEnded(string $contentType = self::contentTypes['reportSessionEnded'][0])
    {
        $this->reportSessionEndedWithHttpInfo($contentType);
    }

    /**
     * Operation reportSessionEndedWithHttpInfo
     *
     * Reports that a session has ended.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportSessionEnded'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportSessionEndedWithHttpInfo(string $contentType = self::contentTypes['reportSessionEnded'][0])
    {
        $request = $this->reportSessionEndedRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportSessionEndedAsync
     *
     * Reports that a session has ended.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportSessionEnded'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportSessionEndedAsync(string $contentType = self::contentTypes['reportSessionEnded'][0])
    {
        return $this->reportSessionEndedAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportSessionEndedAsyncWithHttpInfo
     *
     * Reports that a session has ended.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportSessionEnded'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportSessionEndedAsyncWithHttpInfo(string $contentType = self::contentTypes['reportSessionEnded'][0])
    {
        $returnType = '';
        $request = $this->reportSessionEndedRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportSessionEnded'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportSessionEnded'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportSessionEndedRequest(string $contentType = self::contentTypes['reportSessionEnded'][0])
    {


        $resourcePath = '/Sessions/Logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportViewing
     *
     * Reports that a session is viewing an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $session_id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportViewing'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportViewing($item_id, $session_id = null, string $contentType = self::contentTypes['reportViewing'][0])
    {
        $this->reportViewingWithHttpInfo($item_id, $session_id, $contentType);
    }

    /**
     * Operation reportViewingWithHttpInfo
     *
     * Reports that a session is viewing an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $session_id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportViewing'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportViewingWithHttpInfo($item_id, $session_id = null, string $contentType = self::contentTypes['reportViewing'][0])
    {
        $request = $this->reportViewingRequest($item_id, $session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportViewingAsync
     *
     * Reports that a session is viewing an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $session_id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportViewing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportViewingAsync($item_id, $session_id = null, string $contentType = self::contentTypes['reportViewing'][0])
    {
        return $this->reportViewingAsyncWithHttpInfo($item_id, $session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportViewingAsyncWithHttpInfo
     *
     * Reports that a session is viewing an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $session_id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportViewing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportViewingAsyncWithHttpInfo($item_id, $session_id = null, string $contentType = self::contentTypes['reportViewing'][0])
    {
        $returnType = '';
        $request = $this->reportViewingRequest($item_id, $session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportViewing'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $session_id The session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportViewing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportViewingRequest($item_id, $session_id = null, string $contentType = self::contentTypes['reportViewing'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling reportViewing'
            );
        }



        $resourcePath = '/Sessions/Viewing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $session_id,
            'sessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendFullGeneralCommand
     *
     * Issues a full general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendFullGeneralCommandRequest $send_full_general_command_request The MediaBrowser.Model.Session.GeneralCommand. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFullGeneralCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendFullGeneralCommand($session_id, $send_full_general_command_request, string $contentType = self::contentTypes['sendFullGeneralCommand'][0])
    {
        $this->sendFullGeneralCommandWithHttpInfo($session_id, $send_full_general_command_request, $contentType);
    }

    /**
     * Operation sendFullGeneralCommandWithHttpInfo
     *
     * Issues a full general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendFullGeneralCommandRequest $send_full_general_command_request The MediaBrowser.Model.Session.GeneralCommand. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFullGeneralCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendFullGeneralCommandWithHttpInfo($session_id, $send_full_general_command_request, string $contentType = self::contentTypes['sendFullGeneralCommand'][0])
    {
        $request = $this->sendFullGeneralCommandRequest($session_id, $send_full_general_command_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendFullGeneralCommandAsync
     *
     * Issues a full general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendFullGeneralCommandRequest $send_full_general_command_request The MediaBrowser.Model.Session.GeneralCommand. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFullGeneralCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendFullGeneralCommandAsync($session_id, $send_full_general_command_request, string $contentType = self::contentTypes['sendFullGeneralCommand'][0])
    {
        return $this->sendFullGeneralCommandAsyncWithHttpInfo($session_id, $send_full_general_command_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendFullGeneralCommandAsyncWithHttpInfo
     *
     * Issues a full general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendFullGeneralCommandRequest $send_full_general_command_request The MediaBrowser.Model.Session.GeneralCommand. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFullGeneralCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendFullGeneralCommandAsyncWithHttpInfo($session_id, $send_full_general_command_request, string $contentType = self::contentTypes['sendFullGeneralCommand'][0])
    {
        $returnType = '';
        $request = $this->sendFullGeneralCommandRequest($session_id, $send_full_general_command_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendFullGeneralCommand'
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendFullGeneralCommandRequest $send_full_general_command_request The MediaBrowser.Model.Session.GeneralCommand. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFullGeneralCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendFullGeneralCommandRequest($session_id, $send_full_general_command_request, string $contentType = self::contentTypes['sendFullGeneralCommand'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling sendFullGeneralCommand'
            );
        }

        // verify the required parameter 'send_full_general_command_request' is set
        if ($send_full_general_command_request === null || (is_array($send_full_general_command_request) && count($send_full_general_command_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_full_general_command_request when calling sendFullGeneralCommand'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/Command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_full_general_command_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_full_general_command_request));
            } else {
                $httpBody = $send_full_general_command_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendGeneralCommand
     *
     * Issues a general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGeneralCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendGeneralCommand($session_id, $command, string $contentType = self::contentTypes['sendGeneralCommand'][0])
    {
        $this->sendGeneralCommandWithHttpInfo($session_id, $command, $contentType);
    }

    /**
     * Operation sendGeneralCommandWithHttpInfo
     *
     * Issues a general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGeneralCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendGeneralCommandWithHttpInfo($session_id, $command, string $contentType = self::contentTypes['sendGeneralCommand'][0])
    {
        $request = $this->sendGeneralCommandRequest($session_id, $command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendGeneralCommandAsync
     *
     * Issues a general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGeneralCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendGeneralCommandAsync($session_id, $command, string $contentType = self::contentTypes['sendGeneralCommand'][0])
    {
        return $this->sendGeneralCommandAsyncWithHttpInfo($session_id, $command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendGeneralCommandAsyncWithHttpInfo
     *
     * Issues a general command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGeneralCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendGeneralCommandAsyncWithHttpInfo($session_id, $command, string $contentType = self::contentTypes['sendGeneralCommand'][0])
    {
        $returnType = '';
        $request = $this->sendGeneralCommandRequest($session_id, $command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendGeneralCommand'
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGeneralCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendGeneralCommandRequest($session_id, $command, string $contentType = self::contentTypes['sendGeneralCommand'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling sendGeneralCommand'
            );
        }

        // verify the required parameter 'command' is set
        if ($command === null || (is_array($command) && count($command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command when calling sendGeneralCommand'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/Command/{command}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($command !== null) {
            $resourcePath = str_replace(
                '{' . 'command' . '}',
                ObjectSerializer::toPathValue($command),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendMessageCommand
     *
     * Issues a command to a client to display a message to the user.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendMessageCommandRequest $send_message_command_request The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMessageCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendMessageCommand($session_id, $send_message_command_request, string $contentType = self::contentTypes['sendMessageCommand'][0])
    {
        $this->sendMessageCommandWithHttpInfo($session_id, $send_message_command_request, $contentType);
    }

    /**
     * Operation sendMessageCommandWithHttpInfo
     *
     * Issues a command to a client to display a message to the user.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendMessageCommandRequest $send_message_command_request The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMessageCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMessageCommandWithHttpInfo($session_id, $send_message_command_request, string $contentType = self::contentTypes['sendMessageCommand'][0])
    {
        $request = $this->sendMessageCommandRequest($session_id, $send_message_command_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendMessageCommandAsync
     *
     * Issues a command to a client to display a message to the user.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendMessageCommandRequest $send_message_command_request The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMessageCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageCommandAsync($session_id, $send_message_command_request, string $contentType = self::contentTypes['sendMessageCommand'][0])
    {
        return $this->sendMessageCommandAsyncWithHttpInfo($session_id, $send_message_command_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendMessageCommandAsyncWithHttpInfo
     *
     * Issues a command to a client to display a message to the user.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendMessageCommandRequest $send_message_command_request The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMessageCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageCommandAsyncWithHttpInfo($session_id, $send_message_command_request, string $contentType = self::contentTypes['sendMessageCommand'][0])
    {
        $returnType = '';
        $request = $this->sendMessageCommandRequest($session_id, $send_message_command_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendMessageCommand'
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\SendMessageCommandRequest $send_message_command_request The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMessageCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendMessageCommandRequest($session_id, $send_message_command_request, string $contentType = self::contentTypes['sendMessageCommand'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling sendMessageCommand'
            );
        }

        // verify the required parameter 'send_message_command_request' is set
        if ($send_message_command_request === null || (is_array($send_message_command_request) && count($send_message_command_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_message_command_request when calling sendMessageCommand'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/Message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_message_command_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_message_command_request));
            } else {
                $httpBody = $send_message_command_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPlaystateCommand
     *
     * Issues a playstate command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlaystateCommand $command The MediaBrowser.Model.Session.PlaystateCommand. (required)
     * @param  int $seek_position_ticks The optional position ticks. (optional)
     * @param  string $controlling_user_id The optional controlling user id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPlaystateCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendPlaystateCommand($session_id, $command, $seek_position_ticks = null, $controlling_user_id = null, string $contentType = self::contentTypes['sendPlaystateCommand'][0])
    {
        $this->sendPlaystateCommandWithHttpInfo($session_id, $command, $seek_position_ticks, $controlling_user_id, $contentType);
    }

    /**
     * Operation sendPlaystateCommandWithHttpInfo
     *
     * Issues a playstate command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlaystateCommand $command The MediaBrowser.Model.Session.PlaystateCommand. (required)
     * @param  int $seek_position_ticks The optional position ticks. (optional)
     * @param  string $controlling_user_id The optional controlling user id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPlaystateCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPlaystateCommandWithHttpInfo($session_id, $command, $seek_position_ticks = null, $controlling_user_id = null, string $contentType = self::contentTypes['sendPlaystateCommand'][0])
    {
        $request = $this->sendPlaystateCommandRequest($session_id, $command, $seek_position_ticks, $controlling_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendPlaystateCommandAsync
     *
     * Issues a playstate command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlaystateCommand $command The MediaBrowser.Model.Session.PlaystateCommand. (required)
     * @param  int $seek_position_ticks The optional position ticks. (optional)
     * @param  string $controlling_user_id The optional controlling user id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPlaystateCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPlaystateCommandAsync($session_id, $command, $seek_position_ticks = null, $controlling_user_id = null, string $contentType = self::contentTypes['sendPlaystateCommand'][0])
    {
        return $this->sendPlaystateCommandAsyncWithHttpInfo($session_id, $command, $seek_position_ticks, $controlling_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPlaystateCommandAsyncWithHttpInfo
     *
     * Issues a playstate command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlaystateCommand $command The MediaBrowser.Model.Session.PlaystateCommand. (required)
     * @param  int $seek_position_ticks The optional position ticks. (optional)
     * @param  string $controlling_user_id The optional controlling user id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPlaystateCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPlaystateCommandAsyncWithHttpInfo($session_id, $command, $seek_position_ticks = null, $controlling_user_id = null, string $contentType = self::contentTypes['sendPlaystateCommand'][0])
    {
        $returnType = '';
        $request = $this->sendPlaystateCommandRequest($session_id, $command, $seek_position_ticks, $controlling_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPlaystateCommand'
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\PlaystateCommand $command The MediaBrowser.Model.Session.PlaystateCommand. (required)
     * @param  int $seek_position_ticks The optional position ticks. (optional)
     * @param  string $controlling_user_id The optional controlling user id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPlaystateCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPlaystateCommandRequest($session_id, $command, $seek_position_ticks = null, $controlling_user_id = null, string $contentType = self::contentTypes['sendPlaystateCommand'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling sendPlaystateCommand'
            );
        }

        // verify the required parameter 'command' is set
        if ($command === null || (is_array($command) && count($command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command when calling sendPlaystateCommand'
            );
        }




        $resourcePath = '/Sessions/{sessionId}/Playing/{command}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seek_position_ticks,
            'seekPositionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $controlling_user_id,
            'controllingUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($command !== null) {
            $resourcePath = str_replace(
                '{' . 'command' . '}',
                ObjectSerializer::toPathValue($command),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSystemCommand
     *
     * Issues a system command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSystemCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendSystemCommand($session_id, $command, string $contentType = self::contentTypes['sendSystemCommand'][0])
    {
        $this->sendSystemCommandWithHttpInfo($session_id, $command, $contentType);
    }

    /**
     * Operation sendSystemCommandWithHttpInfo
     *
     * Issues a system command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSystemCommand'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSystemCommandWithHttpInfo($session_id, $command, string $contentType = self::contentTypes['sendSystemCommand'][0])
    {
        $request = $this->sendSystemCommandRequest($session_id, $command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendSystemCommandAsync
     *
     * Issues a system command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSystemCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSystemCommandAsync($session_id, $command, string $contentType = self::contentTypes['sendSystemCommand'][0])
    {
        return $this->sendSystemCommandAsyncWithHttpInfo($session_id, $command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSystemCommandAsyncWithHttpInfo
     *
     * Issues a system command to a client.
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSystemCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSystemCommandAsyncWithHttpInfo($session_id, $command, string $contentType = self::contentTypes['sendSystemCommand'][0])
    {
        $returnType = '';
        $request = $this->sendSystemCommandRequest($session_id, $command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSystemCommand'
     *
     * @param  string $session_id The session id. (required)
     * @param  \OpenAPI\Client\Model\GeneralCommandType $command The command to send. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSystemCommand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendSystemCommandRequest($session_id, $command, string $contentType = self::contentTypes['sendSystemCommand'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling sendSystemCommand'
            );
        }

        // verify the required parameter 'command' is set
        if ($command === null || (is_array($command) && count($command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command when calling sendSystemCommand'
            );
        }


        $resourcePath = '/Sessions/{sessionId}/System/{command}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($command !== null) {
            $resourcePath = str_replace(
                '{' . 'command' . '}',
                ObjectSerializer::toPathValue($command),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
