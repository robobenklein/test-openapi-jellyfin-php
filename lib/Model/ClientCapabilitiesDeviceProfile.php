<?php
/**
 * ClientCapabilitiesDeviceProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClientCapabilitiesDeviceProfile Class Doc Comment
 *
 * @category Class
 * @description A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.  &lt;br /&gt;  Specifically, it defines the supported &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles\&quot;&gt;containers&lt;/see&gt; and  &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles\&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)  the device is able to direct play (without transcoding or remuxing),  as well as which &lt;see cref&#x3D;\&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles\&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&#39;t.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientCapabilitiesDeviceProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientCapabilities_DeviceProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'string',
        'identification' => '\OpenAPI\Client\Model\DeviceProfileIdentification',
        'friendly_name' => 'string',
        'manufacturer' => 'string',
        'manufacturer_url' => 'string',
        'model_name' => 'string',
        'model_description' => 'string',
        'model_number' => 'string',
        'model_url' => 'string',
        'serial_number' => 'string',
        'enable_album_art_in_didl' => 'bool',
        'enable_single_album_art_limit' => 'bool',
        'enable_single_subtitle_limit' => 'bool',
        'supported_media_types' => 'string',
        'user_id' => 'string',
        'album_art_pn' => 'string',
        'max_album_art_width' => 'int',
        'max_album_art_height' => 'int',
        'max_icon_width' => 'int',
        'max_icon_height' => 'int',
        'max_streaming_bitrate' => 'int',
        'max_static_bitrate' => 'int',
        'music_streaming_transcoding_bitrate' => 'int',
        'max_static_music_bitrate' => 'int',
        'sony_aggregation_flags' => 'string',
        'protocol_info' => 'string',
        'timeline_offset_seconds' => 'int',
        'requires_plain_video_items' => 'bool',
        'requires_plain_folders' => 'bool',
        'enable_ms_media_receiver_registrar' => 'bool',
        'ignore_transcode_byte_range_requests' => 'bool',
        'xml_root_attributes' => '\OpenAPI\Client\Model\XmlAttribute[]',
        'direct_play_profiles' => '\OpenAPI\Client\Model\DirectPlayProfile[]',
        'transcoding_profiles' => '\OpenAPI\Client\Model\TranscodingProfile[]',
        'container_profiles' => '\OpenAPI\Client\Model\ContainerProfile[]',
        'codec_profiles' => '\OpenAPI\Client\Model\CodecProfile[]',
        'response_profiles' => '\OpenAPI\Client\Model\ResponseProfile[]',
        'subtitle_profiles' => '\OpenAPI\Client\Model\SubtitleProfile[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => null,
        'identification' => null,
        'friendly_name' => null,
        'manufacturer' => null,
        'manufacturer_url' => null,
        'model_name' => null,
        'model_description' => null,
        'model_number' => null,
        'model_url' => null,
        'serial_number' => null,
        'enable_album_art_in_didl' => null,
        'enable_single_album_art_limit' => null,
        'enable_single_subtitle_limit' => null,
        'supported_media_types' => null,
        'user_id' => null,
        'album_art_pn' => null,
        'max_album_art_width' => 'int32',
        'max_album_art_height' => 'int32',
        'max_icon_width' => 'int32',
        'max_icon_height' => 'int32',
        'max_streaming_bitrate' => 'int32',
        'max_static_bitrate' => 'int32',
        'music_streaming_transcoding_bitrate' => 'int32',
        'max_static_music_bitrate' => 'int32',
        'sony_aggregation_flags' => null,
        'protocol_info' => null,
        'timeline_offset_seconds' => 'int32',
        'requires_plain_video_items' => null,
        'requires_plain_folders' => null,
        'enable_ms_media_receiver_registrar' => null,
        'ignore_transcode_byte_range_requests' => null,
        'xml_root_attributes' => null,
        'direct_play_profiles' => null,
        'transcoding_profiles' => null,
        'container_profiles' => null,
        'codec_profiles' => null,
        'response_profiles' => null,
        'subtitle_profiles' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'id' => true,
		'identification' => true,
		'friendly_name' => true,
		'manufacturer' => true,
		'manufacturer_url' => true,
		'model_name' => true,
		'model_description' => true,
		'model_number' => true,
		'model_url' => true,
		'serial_number' => true,
		'enable_album_art_in_didl' => false,
		'enable_single_album_art_limit' => false,
		'enable_single_subtitle_limit' => false,
		'supported_media_types' => false,
		'user_id' => true,
		'album_art_pn' => true,
		'max_album_art_width' => true,
		'max_album_art_height' => true,
		'max_icon_width' => true,
		'max_icon_height' => true,
		'max_streaming_bitrate' => true,
		'max_static_bitrate' => true,
		'music_streaming_transcoding_bitrate' => true,
		'max_static_music_bitrate' => true,
		'sony_aggregation_flags' => true,
		'protocol_info' => true,
		'timeline_offset_seconds' => false,
		'requires_plain_video_items' => false,
		'requires_plain_folders' => false,
		'enable_ms_media_receiver_registrar' => false,
		'ignore_transcode_byte_range_requests' => false,
		'xml_root_attributes' => false,
		'direct_play_profiles' => false,
		'transcoding_profiles' => false,
		'container_profiles' => false,
		'codec_profiles' => false,
		'response_profiles' => false,
		'subtitle_profiles' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'id' => 'Id',
        'identification' => 'Identification',
        'friendly_name' => 'FriendlyName',
        'manufacturer' => 'Manufacturer',
        'manufacturer_url' => 'ManufacturerUrl',
        'model_name' => 'ModelName',
        'model_description' => 'ModelDescription',
        'model_number' => 'ModelNumber',
        'model_url' => 'ModelUrl',
        'serial_number' => 'SerialNumber',
        'enable_album_art_in_didl' => 'EnableAlbumArtInDidl',
        'enable_single_album_art_limit' => 'EnableSingleAlbumArtLimit',
        'enable_single_subtitle_limit' => 'EnableSingleSubtitleLimit',
        'supported_media_types' => 'SupportedMediaTypes',
        'user_id' => 'UserId',
        'album_art_pn' => 'AlbumArtPn',
        'max_album_art_width' => 'MaxAlbumArtWidth',
        'max_album_art_height' => 'MaxAlbumArtHeight',
        'max_icon_width' => 'MaxIconWidth',
        'max_icon_height' => 'MaxIconHeight',
        'max_streaming_bitrate' => 'MaxStreamingBitrate',
        'max_static_bitrate' => 'MaxStaticBitrate',
        'music_streaming_transcoding_bitrate' => 'MusicStreamingTranscodingBitrate',
        'max_static_music_bitrate' => 'MaxStaticMusicBitrate',
        'sony_aggregation_flags' => 'SonyAggregationFlags',
        'protocol_info' => 'ProtocolInfo',
        'timeline_offset_seconds' => 'TimelineOffsetSeconds',
        'requires_plain_video_items' => 'RequiresPlainVideoItems',
        'requires_plain_folders' => 'RequiresPlainFolders',
        'enable_ms_media_receiver_registrar' => 'EnableMSMediaReceiverRegistrar',
        'ignore_transcode_byte_range_requests' => 'IgnoreTranscodeByteRangeRequests',
        'xml_root_attributes' => 'XmlRootAttributes',
        'direct_play_profiles' => 'DirectPlayProfiles',
        'transcoding_profiles' => 'TranscodingProfiles',
        'container_profiles' => 'ContainerProfiles',
        'codec_profiles' => 'CodecProfiles',
        'response_profiles' => 'ResponseProfiles',
        'subtitle_profiles' => 'SubtitleProfiles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'identification' => 'setIdentification',
        'friendly_name' => 'setFriendlyName',
        'manufacturer' => 'setManufacturer',
        'manufacturer_url' => 'setManufacturerUrl',
        'model_name' => 'setModelName',
        'model_description' => 'setModelDescription',
        'model_number' => 'setModelNumber',
        'model_url' => 'setModelUrl',
        'serial_number' => 'setSerialNumber',
        'enable_album_art_in_didl' => 'setEnableAlbumArtInDidl',
        'enable_single_album_art_limit' => 'setEnableSingleAlbumArtLimit',
        'enable_single_subtitle_limit' => 'setEnableSingleSubtitleLimit',
        'supported_media_types' => 'setSupportedMediaTypes',
        'user_id' => 'setUserId',
        'album_art_pn' => 'setAlbumArtPn',
        'max_album_art_width' => 'setMaxAlbumArtWidth',
        'max_album_art_height' => 'setMaxAlbumArtHeight',
        'max_icon_width' => 'setMaxIconWidth',
        'max_icon_height' => 'setMaxIconHeight',
        'max_streaming_bitrate' => 'setMaxStreamingBitrate',
        'max_static_bitrate' => 'setMaxStaticBitrate',
        'music_streaming_transcoding_bitrate' => 'setMusicStreamingTranscodingBitrate',
        'max_static_music_bitrate' => 'setMaxStaticMusicBitrate',
        'sony_aggregation_flags' => 'setSonyAggregationFlags',
        'protocol_info' => 'setProtocolInfo',
        'timeline_offset_seconds' => 'setTimelineOffsetSeconds',
        'requires_plain_video_items' => 'setRequiresPlainVideoItems',
        'requires_plain_folders' => 'setRequiresPlainFolders',
        'enable_ms_media_receiver_registrar' => 'setEnableMsMediaReceiverRegistrar',
        'ignore_transcode_byte_range_requests' => 'setIgnoreTranscodeByteRangeRequests',
        'xml_root_attributes' => 'setXmlRootAttributes',
        'direct_play_profiles' => 'setDirectPlayProfiles',
        'transcoding_profiles' => 'setTranscodingProfiles',
        'container_profiles' => 'setContainerProfiles',
        'codec_profiles' => 'setCodecProfiles',
        'response_profiles' => 'setResponseProfiles',
        'subtitle_profiles' => 'setSubtitleProfiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'identification' => 'getIdentification',
        'friendly_name' => 'getFriendlyName',
        'manufacturer' => 'getManufacturer',
        'manufacturer_url' => 'getManufacturerUrl',
        'model_name' => 'getModelName',
        'model_description' => 'getModelDescription',
        'model_number' => 'getModelNumber',
        'model_url' => 'getModelUrl',
        'serial_number' => 'getSerialNumber',
        'enable_album_art_in_didl' => 'getEnableAlbumArtInDidl',
        'enable_single_album_art_limit' => 'getEnableSingleAlbumArtLimit',
        'enable_single_subtitle_limit' => 'getEnableSingleSubtitleLimit',
        'supported_media_types' => 'getSupportedMediaTypes',
        'user_id' => 'getUserId',
        'album_art_pn' => 'getAlbumArtPn',
        'max_album_art_width' => 'getMaxAlbumArtWidth',
        'max_album_art_height' => 'getMaxAlbumArtHeight',
        'max_icon_width' => 'getMaxIconWidth',
        'max_icon_height' => 'getMaxIconHeight',
        'max_streaming_bitrate' => 'getMaxStreamingBitrate',
        'max_static_bitrate' => 'getMaxStaticBitrate',
        'music_streaming_transcoding_bitrate' => 'getMusicStreamingTranscodingBitrate',
        'max_static_music_bitrate' => 'getMaxStaticMusicBitrate',
        'sony_aggregation_flags' => 'getSonyAggregationFlags',
        'protocol_info' => 'getProtocolInfo',
        'timeline_offset_seconds' => 'getTimelineOffsetSeconds',
        'requires_plain_video_items' => 'getRequiresPlainVideoItems',
        'requires_plain_folders' => 'getRequiresPlainFolders',
        'enable_ms_media_receiver_registrar' => 'getEnableMsMediaReceiverRegistrar',
        'ignore_transcode_byte_range_requests' => 'getIgnoreTranscodeByteRangeRequests',
        'xml_root_attributes' => 'getXmlRootAttributes',
        'direct_play_profiles' => 'getDirectPlayProfiles',
        'transcoding_profiles' => 'getTranscodingProfiles',
        'container_profiles' => 'getContainerProfiles',
        'codec_profiles' => 'getCodecProfiles',
        'response_profiles' => 'getResponseProfiles',
        'subtitle_profiles' => 'getSubtitleProfiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identification', $data ?? [], null);
        $this->setIfExists('friendly_name', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('manufacturer_url', $data ?? [], null);
        $this->setIfExists('model_name', $data ?? [], null);
        $this->setIfExists('model_description', $data ?? [], null);
        $this->setIfExists('model_number', $data ?? [], null);
        $this->setIfExists('model_url', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('enable_album_art_in_didl', $data ?? [], false);
        $this->setIfExists('enable_single_album_art_limit', $data ?? [], false);
        $this->setIfExists('enable_single_subtitle_limit', $data ?? [], false);
        $this->setIfExists('supported_media_types', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('album_art_pn', $data ?? [], null);
        $this->setIfExists('max_album_art_width', $data ?? [], null);
        $this->setIfExists('max_album_art_height', $data ?? [], null);
        $this->setIfExists('max_icon_width', $data ?? [], null);
        $this->setIfExists('max_icon_height', $data ?? [], null);
        $this->setIfExists('max_streaming_bitrate', $data ?? [], null);
        $this->setIfExists('max_static_bitrate', $data ?? [], null);
        $this->setIfExists('music_streaming_transcoding_bitrate', $data ?? [], null);
        $this->setIfExists('max_static_music_bitrate', $data ?? [], null);
        $this->setIfExists('sony_aggregation_flags', $data ?? [], null);
        $this->setIfExists('protocol_info', $data ?? [], null);
        $this->setIfExists('timeline_offset_seconds', $data ?? [], 0);
        $this->setIfExists('requires_plain_video_items', $data ?? [], false);
        $this->setIfExists('requires_plain_folders', $data ?? [], false);
        $this->setIfExists('enable_ms_media_receiver_registrar', $data ?? [], false);
        $this->setIfExists('ignore_transcode_byte_range_requests', $data ?? [], false);
        $this->setIfExists('xml_root_attributes', $data ?? [], null);
        $this->setIfExists('direct_play_profiles', $data ?? [], null);
        $this->setIfExists('transcoding_profiles', $data ?? [], null);
        $this->setIfExists('container_profiles', $data ?? [], null);
        $this->setIfExists('codec_profiles', $data ?? [], null);
        $this->setIfExists('response_profiles', $data ?? [], null);
        $this->setIfExists('subtitle_profiles', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name of this device profile.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the Id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \OpenAPI\Client\Model\DeviceProfileIdentification|null
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \OpenAPI\Client\Model\DeviceProfileIdentification|null $identification identification
     *
     * @return self
     */
    public function setIdentification($identification)
    {
        if (is_null($identification)) {
            array_push($this->openAPINullablesSetToNull, 'identification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string|null $friendly_name Gets or sets the friendly name of the device profile, which can be shown to users.
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {
        if (is_null($friendly_name)) {
            array_push($this->openAPINullablesSetToNull, 'friendly_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('friendly_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Gets or sets the manufacturer of the device which this profile represents.
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer_url
     *
     * @return string|null
     */
    public function getManufacturerUrl()
    {
        return $this->container['manufacturer_url'];
    }

    /**
     * Sets manufacturer_url
     *
     * @param string|null $manufacturer_url Gets or sets an url for the manufacturer of the device which this profile represents.
     *
     * @return self
     */
    public function setManufacturerUrl($manufacturer_url)
    {
        if (is_null($manufacturer_url)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturer_url'] = $manufacturer_url;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string|null
     */
    public function getModelName()
    {
        return $this->container['model_name'];
    }

    /**
     * Sets model_name
     *
     * @param string|null $model_name Gets or sets the model name of the device which this profile represents.
     *
     * @return self
     */
    public function setModelName($model_name)
    {
        if (is_null($model_name)) {
            array_push($this->openAPINullablesSetToNull, 'model_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets model_description
     *
     * @return string|null
     */
    public function getModelDescription()
    {
        return $this->container['model_description'];
    }

    /**
     * Sets model_description
     *
     * @param string|null $model_description Gets or sets the model description of the device which this profile represents.
     *
     * @return self
     */
    public function setModelDescription($model_description)
    {
        if (is_null($model_description)) {
            array_push($this->openAPINullablesSetToNull, 'model_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model_description'] = $model_description;

        return $this;
    }

    /**
     * Gets model_number
     *
     * @return string|null
     */
    public function getModelNumber()
    {
        return $this->container['model_number'];
    }

    /**
     * Sets model_number
     *
     * @param string|null $model_number Gets or sets the model number of the device which this profile represents.
     *
     * @return self
     */
    public function setModelNumber($model_number)
    {
        if (is_null($model_number)) {
            array_push($this->openAPINullablesSetToNull, 'model_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model_number'] = $model_number;

        return $this;
    }

    /**
     * Gets model_url
     *
     * @return string|null
     */
    public function getModelUrl()
    {
        return $this->container['model_url'];
    }

    /**
     * Sets model_url
     *
     * @param string|null $model_url Gets or sets the ModelUrl.
     *
     * @return self
     */
    public function setModelUrl($model_url)
    {
        if (is_null($model_url)) {
            array_push($this->openAPINullablesSetToNull, 'model_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model_url'] = $model_url;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Gets or sets the serial number of the device which this profile represents.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            array_push($this->openAPINullablesSetToNull, 'serial_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets enable_album_art_in_didl
     *
     * @return bool|null
     */
    public function getEnableAlbumArtInDidl()
    {
        return $this->container['enable_album_art_in_didl'];
    }

    /**
     * Sets enable_album_art_in_didl
     *
     * @param bool|null $enable_album_art_in_didl Gets or sets a value indicating whether EnableAlbumArtInDidl.
     *
     * @return self
     */
    public function setEnableAlbumArtInDidl($enable_album_art_in_didl)
    {
        if (is_null($enable_album_art_in_didl)) {
            throw new \InvalidArgumentException('non-nullable enable_album_art_in_didl cannot be null');
        }
        $this->container['enable_album_art_in_didl'] = $enable_album_art_in_didl;

        return $this;
    }

    /**
     * Gets enable_single_album_art_limit
     *
     * @return bool|null
     */
    public function getEnableSingleAlbumArtLimit()
    {
        return $this->container['enable_single_album_art_limit'];
    }

    /**
     * Sets enable_single_album_art_limit
     *
     * @param bool|null $enable_single_album_art_limit Gets or sets a value indicating whether EnableSingleAlbumArtLimit.
     *
     * @return self
     */
    public function setEnableSingleAlbumArtLimit($enable_single_album_art_limit)
    {
        if (is_null($enable_single_album_art_limit)) {
            throw new \InvalidArgumentException('non-nullable enable_single_album_art_limit cannot be null');
        }
        $this->container['enable_single_album_art_limit'] = $enable_single_album_art_limit;

        return $this;
    }

    /**
     * Gets enable_single_subtitle_limit
     *
     * @return bool|null
     */
    public function getEnableSingleSubtitleLimit()
    {
        return $this->container['enable_single_subtitle_limit'];
    }

    /**
     * Sets enable_single_subtitle_limit
     *
     * @param bool|null $enable_single_subtitle_limit Gets or sets a value indicating whether EnableSingleSubtitleLimit.
     *
     * @return self
     */
    public function setEnableSingleSubtitleLimit($enable_single_subtitle_limit)
    {
        if (is_null($enable_single_subtitle_limit)) {
            throw new \InvalidArgumentException('non-nullable enable_single_subtitle_limit cannot be null');
        }
        $this->container['enable_single_subtitle_limit'] = $enable_single_subtitle_limit;

        return $this;
    }

    /**
     * Gets supported_media_types
     *
     * @return string|null
     */
    public function getSupportedMediaTypes()
    {
        return $this->container['supported_media_types'];
    }

    /**
     * Sets supported_media_types
     *
     * @param string|null $supported_media_types Gets or sets the SupportedMediaTypes.
     *
     * @return self
     */
    public function setSupportedMediaTypes($supported_media_types)
    {
        if (is_null($supported_media_types)) {
            throw new \InvalidArgumentException('non-nullable supported_media_types cannot be null');
        }
        $this->container['supported_media_types'] = $supported_media_types;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id Gets or sets the UserId.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets album_art_pn
     *
     * @return string|null
     */
    public function getAlbumArtPn()
    {
        return $this->container['album_art_pn'];
    }

    /**
     * Sets album_art_pn
     *
     * @param string|null $album_art_pn Gets or sets the AlbumArtPn.
     *
     * @return self
     */
    public function setAlbumArtPn($album_art_pn)
    {
        if (is_null($album_art_pn)) {
            array_push($this->openAPINullablesSetToNull, 'album_art_pn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_art_pn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_art_pn'] = $album_art_pn;

        return $this;
    }

    /**
     * Gets max_album_art_width
     *
     * @return int|null
     */
    public function getMaxAlbumArtWidth()
    {
        return $this->container['max_album_art_width'];
    }

    /**
     * Sets max_album_art_width
     *
     * @param int|null $max_album_art_width Gets or sets the MaxAlbumArtWidth.
     *
     * @return self
     */
    public function setMaxAlbumArtWidth($max_album_art_width)
    {
        if (is_null($max_album_art_width)) {
            array_push($this->openAPINullablesSetToNull, 'max_album_art_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_album_art_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_album_art_width'] = $max_album_art_width;

        return $this;
    }

    /**
     * Gets max_album_art_height
     *
     * @return int|null
     */
    public function getMaxAlbumArtHeight()
    {
        return $this->container['max_album_art_height'];
    }

    /**
     * Sets max_album_art_height
     *
     * @param int|null $max_album_art_height Gets or sets the MaxAlbumArtHeight.
     *
     * @return self
     */
    public function setMaxAlbumArtHeight($max_album_art_height)
    {
        if (is_null($max_album_art_height)) {
            array_push($this->openAPINullablesSetToNull, 'max_album_art_height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_album_art_height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_album_art_height'] = $max_album_art_height;

        return $this;
    }

    /**
     * Gets max_icon_width
     *
     * @return int|null
     */
    public function getMaxIconWidth()
    {
        return $this->container['max_icon_width'];
    }

    /**
     * Sets max_icon_width
     *
     * @param int|null $max_icon_width Gets or sets the maximum allowed width of embedded icons.
     *
     * @return self
     */
    public function setMaxIconWidth($max_icon_width)
    {
        if (is_null($max_icon_width)) {
            array_push($this->openAPINullablesSetToNull, 'max_icon_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_icon_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_icon_width'] = $max_icon_width;

        return $this;
    }

    /**
     * Gets max_icon_height
     *
     * @return int|null
     */
    public function getMaxIconHeight()
    {
        return $this->container['max_icon_height'];
    }

    /**
     * Sets max_icon_height
     *
     * @param int|null $max_icon_height Gets or sets the maximum allowed height of embedded icons.
     *
     * @return self
     */
    public function setMaxIconHeight($max_icon_height)
    {
        if (is_null($max_icon_height)) {
            array_push($this->openAPINullablesSetToNull, 'max_icon_height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_icon_height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_icon_height'] = $max_icon_height;

        return $this;
    }

    /**
     * Gets max_streaming_bitrate
     *
     * @return int|null
     */
    public function getMaxStreamingBitrate()
    {
        return $this->container['max_streaming_bitrate'];
    }

    /**
     * Sets max_streaming_bitrate
     *
     * @param int|null $max_streaming_bitrate Gets or sets the maximum allowed bitrate for all streamed content.
     *
     * @return self
     */
    public function setMaxStreamingBitrate($max_streaming_bitrate)
    {
        if (is_null($max_streaming_bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'max_streaming_bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_streaming_bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_streaming_bitrate'] = $max_streaming_bitrate;

        return $this;
    }

    /**
     * Gets max_static_bitrate
     *
     * @return int|null
     */
    public function getMaxStaticBitrate()
    {
        return $this->container['max_static_bitrate'];
    }

    /**
     * Sets max_static_bitrate
     *
     * @param int|null $max_static_bitrate Gets or sets the maximum allowed bitrate for statically streamed content (= direct played files).
     *
     * @return self
     */
    public function setMaxStaticBitrate($max_static_bitrate)
    {
        if (is_null($max_static_bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'max_static_bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_static_bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_static_bitrate'] = $max_static_bitrate;

        return $this;
    }

    /**
     * Gets music_streaming_transcoding_bitrate
     *
     * @return int|null
     */
    public function getMusicStreamingTranscodingBitrate()
    {
        return $this->container['music_streaming_transcoding_bitrate'];
    }

    /**
     * Sets music_streaming_transcoding_bitrate
     *
     * @param int|null $music_streaming_transcoding_bitrate Gets or sets the maximum allowed bitrate for transcoded music streams.
     *
     * @return self
     */
    public function setMusicStreamingTranscodingBitrate($music_streaming_transcoding_bitrate)
    {
        if (is_null($music_streaming_transcoding_bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'music_streaming_transcoding_bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('music_streaming_transcoding_bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['music_streaming_transcoding_bitrate'] = $music_streaming_transcoding_bitrate;

        return $this;
    }

    /**
     * Gets max_static_music_bitrate
     *
     * @return int|null
     */
    public function getMaxStaticMusicBitrate()
    {
        return $this->container['max_static_music_bitrate'];
    }

    /**
     * Sets max_static_music_bitrate
     *
     * @param int|null $max_static_music_bitrate Gets or sets the maximum allowed bitrate for statically streamed (= direct played) music files.
     *
     * @return self
     */
    public function setMaxStaticMusicBitrate($max_static_music_bitrate)
    {
        if (is_null($max_static_music_bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'max_static_music_bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_static_music_bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_static_music_bitrate'] = $max_static_music_bitrate;

        return $this;
    }

    /**
     * Gets sony_aggregation_flags
     *
     * @return string|null
     */
    public function getSonyAggregationFlags()
    {
        return $this->container['sony_aggregation_flags'];
    }

    /**
     * Sets sony_aggregation_flags
     *
     * @param string|null $sony_aggregation_flags Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
     *
     * @return self
     */
    public function setSonyAggregationFlags($sony_aggregation_flags)
    {
        if (is_null($sony_aggregation_flags)) {
            array_push($this->openAPINullablesSetToNull, 'sony_aggregation_flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sony_aggregation_flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sony_aggregation_flags'] = $sony_aggregation_flags;

        return $this;
    }

    /**
     * Gets protocol_info
     *
     * @return string|null
     */
    public function getProtocolInfo()
    {
        return $this->container['protocol_info'];
    }

    /**
     * Sets protocol_info
     *
     * @param string|null $protocol_info Gets or sets the ProtocolInfo.
     *
     * @return self
     */
    public function setProtocolInfo($protocol_info)
    {
        if (is_null($protocol_info)) {
            array_push($this->openAPINullablesSetToNull, 'protocol_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('protocol_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['protocol_info'] = $protocol_info;

        return $this;
    }

    /**
     * Gets timeline_offset_seconds
     *
     * @return int|null
     */
    public function getTimelineOffsetSeconds()
    {
        return $this->container['timeline_offset_seconds'];
    }

    /**
     * Sets timeline_offset_seconds
     *
     * @param int|null $timeline_offset_seconds Gets or sets the TimelineOffsetSeconds.
     *
     * @return self
     */
    public function setTimelineOffsetSeconds($timeline_offset_seconds)
    {
        if (is_null($timeline_offset_seconds)) {
            throw new \InvalidArgumentException('non-nullable timeline_offset_seconds cannot be null');
        }
        $this->container['timeline_offset_seconds'] = $timeline_offset_seconds;

        return $this;
    }

    /**
     * Gets requires_plain_video_items
     *
     * @return bool|null
     */
    public function getRequiresPlainVideoItems()
    {
        return $this->container['requires_plain_video_items'];
    }

    /**
     * Sets requires_plain_video_items
     *
     * @param bool|null $requires_plain_video_items Gets or sets a value indicating whether RequiresPlainVideoItems.
     *
     * @return self
     */
    public function setRequiresPlainVideoItems($requires_plain_video_items)
    {
        if (is_null($requires_plain_video_items)) {
            throw new \InvalidArgumentException('non-nullable requires_plain_video_items cannot be null');
        }
        $this->container['requires_plain_video_items'] = $requires_plain_video_items;

        return $this;
    }

    /**
     * Gets requires_plain_folders
     *
     * @return bool|null
     */
    public function getRequiresPlainFolders()
    {
        return $this->container['requires_plain_folders'];
    }

    /**
     * Sets requires_plain_folders
     *
     * @param bool|null $requires_plain_folders Gets or sets a value indicating whether RequiresPlainFolders.
     *
     * @return self
     */
    public function setRequiresPlainFolders($requires_plain_folders)
    {
        if (is_null($requires_plain_folders)) {
            throw new \InvalidArgumentException('non-nullable requires_plain_folders cannot be null');
        }
        $this->container['requires_plain_folders'] = $requires_plain_folders;

        return $this;
    }

    /**
     * Gets enable_ms_media_receiver_registrar
     *
     * @return bool|null
     */
    public function getEnableMsMediaReceiverRegistrar()
    {
        return $this->container['enable_ms_media_receiver_registrar'];
    }

    /**
     * Sets enable_ms_media_receiver_registrar
     *
     * @param bool|null $enable_ms_media_receiver_registrar Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.
     *
     * @return self
     */
    public function setEnableMsMediaReceiverRegistrar($enable_ms_media_receiver_registrar)
    {
        if (is_null($enable_ms_media_receiver_registrar)) {
            throw new \InvalidArgumentException('non-nullable enable_ms_media_receiver_registrar cannot be null');
        }
        $this->container['enable_ms_media_receiver_registrar'] = $enable_ms_media_receiver_registrar;

        return $this;
    }

    /**
     * Gets ignore_transcode_byte_range_requests
     *
     * @return bool|null
     */
    public function getIgnoreTranscodeByteRangeRequests()
    {
        return $this->container['ignore_transcode_byte_range_requests'];
    }

    /**
     * Sets ignore_transcode_byte_range_requests
     *
     * @param bool|null $ignore_transcode_byte_range_requests Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.
     *
     * @return self
     */
    public function setIgnoreTranscodeByteRangeRequests($ignore_transcode_byte_range_requests)
    {
        if (is_null($ignore_transcode_byte_range_requests)) {
            throw new \InvalidArgumentException('non-nullable ignore_transcode_byte_range_requests cannot be null');
        }
        $this->container['ignore_transcode_byte_range_requests'] = $ignore_transcode_byte_range_requests;

        return $this;
    }

    /**
     * Gets xml_root_attributes
     *
     * @return \OpenAPI\Client\Model\XmlAttribute[]|null
     */
    public function getXmlRootAttributes()
    {
        return $this->container['xml_root_attributes'];
    }

    /**
     * Sets xml_root_attributes
     *
     * @param \OpenAPI\Client\Model\XmlAttribute[]|null $xml_root_attributes Gets or sets the XmlRootAttributes.
     *
     * @return self
     */
    public function setXmlRootAttributes($xml_root_attributes)
    {
        if (is_null($xml_root_attributes)) {
            throw new \InvalidArgumentException('non-nullable xml_root_attributes cannot be null');
        }
        $this->container['xml_root_attributes'] = $xml_root_attributes;

        return $this;
    }

    /**
     * Gets direct_play_profiles
     *
     * @return \OpenAPI\Client\Model\DirectPlayProfile[]|null
     */
    public function getDirectPlayProfiles()
    {
        return $this->container['direct_play_profiles'];
    }

    /**
     * Sets direct_play_profiles
     *
     * @param \OpenAPI\Client\Model\DirectPlayProfile[]|null $direct_play_profiles Gets or sets the direct play profiles.
     *
     * @return self
     */
    public function setDirectPlayProfiles($direct_play_profiles)
    {
        if (is_null($direct_play_profiles)) {
            throw new \InvalidArgumentException('non-nullable direct_play_profiles cannot be null');
        }
        $this->container['direct_play_profiles'] = $direct_play_profiles;

        return $this;
    }

    /**
     * Gets transcoding_profiles
     *
     * @return \OpenAPI\Client\Model\TranscodingProfile[]|null
     */
    public function getTranscodingProfiles()
    {
        return $this->container['transcoding_profiles'];
    }

    /**
     * Sets transcoding_profiles
     *
     * @param \OpenAPI\Client\Model\TranscodingProfile[]|null $transcoding_profiles Gets or sets the transcoding profiles.
     *
     * @return self
     */
    public function setTranscodingProfiles($transcoding_profiles)
    {
        if (is_null($transcoding_profiles)) {
            throw new \InvalidArgumentException('non-nullable transcoding_profiles cannot be null');
        }
        $this->container['transcoding_profiles'] = $transcoding_profiles;

        return $this;
    }

    /**
     * Gets container_profiles
     *
     * @return \OpenAPI\Client\Model\ContainerProfile[]|null
     */
    public function getContainerProfiles()
    {
        return $this->container['container_profiles'];
    }

    /**
     * Sets container_profiles
     *
     * @param \OpenAPI\Client\Model\ContainerProfile[]|null $container_profiles Gets or sets the container profiles.
     *
     * @return self
     */
    public function setContainerProfiles($container_profiles)
    {
        if (is_null($container_profiles)) {
            throw new \InvalidArgumentException('non-nullable container_profiles cannot be null');
        }
        $this->container['container_profiles'] = $container_profiles;

        return $this;
    }

    /**
     * Gets codec_profiles
     *
     * @return \OpenAPI\Client\Model\CodecProfile[]|null
     */
    public function getCodecProfiles()
    {
        return $this->container['codec_profiles'];
    }

    /**
     * Sets codec_profiles
     *
     * @param \OpenAPI\Client\Model\CodecProfile[]|null $codec_profiles Gets or sets the codec profiles.
     *
     * @return self
     */
    public function setCodecProfiles($codec_profiles)
    {
        if (is_null($codec_profiles)) {
            throw new \InvalidArgumentException('non-nullable codec_profiles cannot be null');
        }
        $this->container['codec_profiles'] = $codec_profiles;

        return $this;
    }

    /**
     * Gets response_profiles
     *
     * @return \OpenAPI\Client\Model\ResponseProfile[]|null
     */
    public function getResponseProfiles()
    {
        return $this->container['response_profiles'];
    }

    /**
     * Sets response_profiles
     *
     * @param \OpenAPI\Client\Model\ResponseProfile[]|null $response_profiles Gets or sets the ResponseProfiles.
     *
     * @return self
     */
    public function setResponseProfiles($response_profiles)
    {
        if (is_null($response_profiles)) {
            throw new \InvalidArgumentException('non-nullable response_profiles cannot be null');
        }
        $this->container['response_profiles'] = $response_profiles;

        return $this;
    }

    /**
     * Gets subtitle_profiles
     *
     * @return \OpenAPI\Client\Model\SubtitleProfile[]|null
     */
    public function getSubtitleProfiles()
    {
        return $this->container['subtitle_profiles'];
    }

    /**
     * Sets subtitle_profiles
     *
     * @param \OpenAPI\Client\Model\SubtitleProfile[]|null $subtitle_profiles Gets or sets the subtitle profiles.
     *
     * @return self
     */
    public function setSubtitleProfiles($subtitle_profiles)
    {
        if (is_null($subtitle_profiles)) {
            throw new \InvalidArgumentException('non-nullable subtitle_profiles cannot be null');
        }
        $this->container['subtitle_profiles'] = $subtitle_profiles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


