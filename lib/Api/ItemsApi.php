<?php
/**
 * ItemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ItemsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getItems' => [
            'application/json',
        ],
        'getItemsByUserId' => [
            'application/json',
        ],
        'getResumeItems' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getItems
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (optional)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getItems($user_id = null, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItems'][0])
    {
        list($response) = $this->getItemsWithHttpInfo($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType);
        return $response;
    }

    /**
     * Operation getItemsWithHttpInfo
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (optional)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsWithHttpInfo($user_id = null, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItems'][0])
    {
        $request = $this->getItemsRequest($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsAsync
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (optional)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsAsync($user_id = null, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItems'][0])
    {
        return $this->getItemsAsyncWithHttpInfo($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsAsyncWithHttpInfo
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (optional)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsAsyncWithHttpInfo($user_id = null, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getItemsRequest($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItems'
     *
     * @param  string $user_id The user id supplied as query parameter. (optional)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsRequest($user_id = null, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItems'][0])
    {























































































        $resourcePath = '/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_official_rating,
            'maxOfficialRating', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_theme_song,
            'hasThemeSong', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_theme_video,
            'hasThemeVideo', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_subtitles,
            'hasSubtitles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_special_feature,
            'hasSpecialFeature', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_trailer,
            'hasTrailer', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $adjacent_to,
            'adjacentTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_index_number,
            'parentIndexNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_parental_rating,
            'hasParentalRating', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_hd,
            'isHd', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is4_k,
            'is4K', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_types,
            'locationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_location_types,
            'excludeLocationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_missing,
            'isMissing', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_unaired,
            'isUnaired', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_community_rating,
            'minCommunityRating', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_critic_rating,
            'minCriticRating', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_premiere_date,
            'minPremiereDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_date_last_saved,
            'minDateLastSaved', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_date_last_saved_for_user,
            'minDateLastSavedForUser', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_premiere_date,
            'maxPremiereDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_overview,
            'hasOverview', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_imdb_id,
            'hasImdbId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_tmdb_id,
            'hasTmdbId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_tvdb_id,
            'hasTvdbId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_movie,
            'isMovie', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_series,
            'isSeries', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_news,
            'isNews', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_kids,
            'isKids', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_sports,
            'isSports', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_item_ids,
            'excludeItemIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursive,
            'recursive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_term,
            'searchTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_item_types,
            'excludeItemTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_item_types,
            'includeItemTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_favorite,
            'isFavorite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_types,
            'mediaTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_types,
            'imageTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_played,
            'isPlayed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $genres,
            'genres', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $official_ratings,
            'officialRatings', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $years,
            'years', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_user_data,
            'enableUserData', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_type_limit,
            'imageTypeLimit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_image_types,
            'enableImageTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person,
            'person', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_ids,
            'personIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_types,
            'personTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $studios,
            'studios', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artists,
            'artists', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_artist_ids,
            'excludeArtistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artist_ids,
            'artistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $album_artist_ids,
            'albumArtistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contributing_artist_ids,
            'contributingArtistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $albums,
            'albums', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $album_ids,
            'albumIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $video_types,
            'videoTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_official_rating,
            'minOfficialRating', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_locked,
            'isLocked', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_place_holder,
            'isPlaceHolder', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_official_rating,
            'hasOfficialRating', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collapse_box_set_items,
            'collapseBoxSetItems', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_width,
            'minWidth', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_height,
            'minHeight', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_width,
            'maxWidth', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_height,
            'maxHeight', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is3_d,
            'is3D', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $series_status,
            'seriesStatus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_starts_with_or_greater,
            'nameStartsWithOrGreater', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_starts_with,
            'nameStartsWith', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_less_than,
            'nameLessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $studio_ids,
            'studioIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $genre_ids,
            'genreIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_total_record_count,
            'enableTotalRecordCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_images,
            'enableImages', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByUserId
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (required)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByUserId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getItemsByUserId($user_id, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItemsByUserId'][0])
    {
        list($response) = $this->getItemsByUserIdWithHttpInfo($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType);
        return $response;
    }

    /**
     * Operation getItemsByUserIdWithHttpInfo
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (required)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByUserId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByUserIdWithHttpInfo($user_id, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItemsByUserId'][0])
    {
        $request = $this->getItemsByUserIdRequest($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsByUserIdAsync
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (required)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByUserId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByUserIdAsync($user_id, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItemsByUserId'][0])
    {
        return $this->getItemsByUserIdAsyncWithHttpInfo($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByUserIdAsyncWithHttpInfo
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id supplied as query parameter. (required)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByUserId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByUserIdAsyncWithHttpInfo($user_id, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItemsByUserId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getItemsByUserIdRequest($user_id, $max_official_rating, $has_theme_song, $has_theme_video, $has_subtitles, $has_special_feature, $has_trailer, $adjacent_to, $parent_index_number, $has_parental_rating, $is_hd, $is4_k, $location_types, $exclude_location_types, $is_missing, $is_unaired, $min_community_rating, $min_critic_rating, $min_premiere_date, $min_date_last_saved, $min_date_last_saved_for_user, $max_premiere_date, $has_overview, $has_imdb_id, $has_tmdb_id, $has_tvdb_id, $is_movie, $is_series, $is_news, $is_kids, $is_sports, $exclude_item_ids, $start_index, $limit, $recursive, $search_term, $sort_order, $parent_id, $fields, $exclude_item_types, $include_item_types, $filters, $is_favorite, $media_types, $image_types, $sort_by, $is_played, $genres, $official_ratings, $tags, $years, $enable_user_data, $image_type_limit, $enable_image_types, $person, $person_ids, $person_types, $studios, $artists, $exclude_artist_ids, $artist_ids, $album_artist_ids, $contributing_artist_ids, $albums, $album_ids, $ids, $video_types, $min_official_rating, $is_locked, $is_place_holder, $has_official_rating, $collapse_box_set_items, $min_width, $min_height, $max_width, $max_height, $is3_d, $series_status, $name_starts_with_or_greater, $name_starts_with, $name_less_than, $studio_ids, $genre_ids, $enable_total_record_count, $enable_images, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByUserId'
     *
     * @param  string $user_id The user id supplied as query parameter. (required)
     * @param  string $max_official_rating Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $has_theme_song Optional filter by items with theme songs. (optional)
     * @param  bool $has_theme_video Optional filter by items with theme videos. (optional)
     * @param  bool $has_subtitles Optional filter by items with subtitles. (optional)
     * @param  bool $has_special_feature Optional filter by items with special features. (optional)
     * @param  bool $has_trailer Optional filter by items with trailers. (optional)
     * @param  string $adjacent_to Optional. Return items that are siblings of a supplied item. (optional)
     * @param  int $parent_index_number Optional filter by parent index number. (optional)
     * @param  bool $has_parental_rating Optional filter by items that have or do not have a parental rating. (optional)
     * @param  bool $is_hd Optional filter by items that are HD or not. (optional)
     * @param  bool $is4_k Optional filter by items that are 4K or not. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $location_types Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\LocationType[] $exclude_location_types Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     * @param  bool $is_missing Optional filter by items that are missing episodes or not. (optional)
     * @param  bool $is_unaired Optional filter by items that are unaired episodes or not. (optional)
     * @param  float $min_community_rating Optional filter by minimum community rating. (optional)
     * @param  float $min_critic_rating Optional filter by minimum critic rating. (optional)
     * @param  \DateTime $min_premiere_date Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     * @param  \DateTime $min_date_last_saved_for_user Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     * @param  \DateTime $max_premiere_date Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     * @param  bool $has_overview Optional filter by items that have an overview or not. (optional)
     * @param  bool $has_imdb_id Optional filter by items that have an imdb id or not. (optional)
     * @param  bool $has_tmdb_id Optional filter by items that have a tmdb id or not. (optional)
     * @param  bool $has_tvdb_id Optional filter by items that have a tvdb id or not. (optional)
     * @param  bool $is_movie Optional filter for live tv movies. (optional)
     * @param  bool $is_series Optional filter for live tv series. (optional)
     * @param  bool $is_news Optional filter for live tv news. (optional)
     * @param  bool $is_kids Optional filter for live tv kids. (optional)
     * @param  bool $is_sports Optional filter for live tv sports. (optional)
     * @param  string[] $exclude_item_ids Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $recursive When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     * @param  string $search_term Optional. Filter based on a search term. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Sort Order - Ascending,Descending. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     * @param  bool $is_favorite Optional filter by items that are marked as favorite, or not. (optional)
     * @param  string[] $media_types Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $image_types Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  bool $is_played Optional filter by items that are played, or not. (optional)
     * @param  string[] $genres Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     * @param  string[] $official_ratings Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     * @param  string[] $tags Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     * @param  int[] $years Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional, include user data. (optional)
     * @param  int $image_type_limit Optional, the max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  string $person Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     * @param  string[] $person_ids Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     * @param  string[] $person_types Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     * @param  string[] $studios Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artists Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     * @param  string[] $exclude_artist_ids Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $artist_ids Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     * @param  string[] $album_artist_ids Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     * @param  string[] $contributing_artist_ids Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     * @param  string[] $albums Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     * @param  string[] $album_ids Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $ids Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\VideoType[] $video_types Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     * @param  string $min_official_rating Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     * @param  bool $is_locked Optional filter by items that are locked. (optional)
     * @param  bool $is_place_holder Optional filter by items that are placeholders. (optional)
     * @param  bool $has_official_rating Optional filter by items that have official ratings. (optional)
     * @param  bool $collapse_box_set_items Whether or not to hide items behind their boxsets. (optional)
     * @param  int $min_width Optional. Filter by the minimum width of the item. (optional)
     * @param  int $min_height Optional. Filter by the minimum height of the item. (optional)
     * @param  int $max_width Optional. Filter by the maximum width of the item. (optional)
     * @param  int $max_height Optional. Filter by the maximum height of the item. (optional)
     * @param  bool $is3_d Optional filter by items that are 3D, or not. (optional)
     * @param  \OpenAPI\Client\Model\SeriesStatus[] $series_status Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     * @param  string $name_starts_with_or_greater Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     * @param  string $name_starts_with Optional filter by items whose name is sorted equally than a given input string. (optional)
     * @param  string $name_less_than Optional filter by items whose name is equally or lesser than a given input string. (optional)
     * @param  string[] $studio_ids Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     * @param  string[] $genre_ids Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional, include image information in output. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsByUserId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByUserIdRequest($user_id, $max_official_rating = null, $has_theme_song = null, $has_theme_video = null, $has_subtitles = null, $has_special_feature = null, $has_trailer = null, $adjacent_to = null, $parent_index_number = null, $has_parental_rating = null, $is_hd = null, $is4_k = null, $location_types = null, $exclude_location_types = null, $is_missing = null, $is_unaired = null, $min_community_rating = null, $min_critic_rating = null, $min_premiere_date = null, $min_date_last_saved = null, $min_date_last_saved_for_user = null, $max_premiere_date = null, $has_overview = null, $has_imdb_id = null, $has_tmdb_id = null, $has_tvdb_id = null, $is_movie = null, $is_series = null, $is_news = null, $is_kids = null, $is_sports = null, $exclude_item_ids = null, $start_index = null, $limit = null, $recursive = null, $search_term = null, $sort_order = null, $parent_id = null, $fields = null, $exclude_item_types = null, $include_item_types = null, $filters = null, $is_favorite = null, $media_types = null, $image_types = null, $sort_by = null, $is_played = null, $genres = null, $official_ratings = null, $tags = null, $years = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $person = null, $person_ids = null, $person_types = null, $studios = null, $artists = null, $exclude_artist_ids = null, $artist_ids = null, $album_artist_ids = null, $contributing_artist_ids = null, $albums = null, $album_ids = null, $ids = null, $video_types = null, $min_official_rating = null, $is_locked = null, $is_place_holder = null, $has_official_rating = null, $collapse_box_set_items = null, $min_width = null, $min_height = null, $max_width = null, $max_height = null, $is3_d = null, $series_status = null, $name_starts_with_or_greater = null, $name_starts_with = null, $name_less_than = null, $studio_ids = null, $genre_ids = null, $enable_total_record_count = true, $enable_images = true, string $contentType = self::contentTypes['getItemsByUserId'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getItemsByUserId'
            );
        }






















































































        $resourcePath = '/Users/{userId}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_official_rating,
            'maxOfficialRating', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_theme_song,
            'hasThemeSong', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_theme_video,
            'hasThemeVideo', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_subtitles,
            'hasSubtitles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_special_feature,
            'hasSpecialFeature', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_trailer,
            'hasTrailer', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $adjacent_to,
            'adjacentTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_index_number,
            'parentIndexNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_parental_rating,
            'hasParentalRating', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_hd,
            'isHd', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is4_k,
            'is4K', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_types,
            'locationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_location_types,
            'excludeLocationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_missing,
            'isMissing', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_unaired,
            'isUnaired', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_community_rating,
            'minCommunityRating', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_critic_rating,
            'minCriticRating', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_premiere_date,
            'minPremiereDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_date_last_saved,
            'minDateLastSaved', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_date_last_saved_for_user,
            'minDateLastSavedForUser', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_premiere_date,
            'maxPremiereDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_overview,
            'hasOverview', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_imdb_id,
            'hasImdbId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_tmdb_id,
            'hasTmdbId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_tvdb_id,
            'hasTvdbId', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_movie,
            'isMovie', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_series,
            'isSeries', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_news,
            'isNews', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_kids,
            'isKids', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_sports,
            'isSports', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_item_ids,
            'excludeItemIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursive,
            'recursive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_term,
            'searchTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_item_types,
            'excludeItemTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_item_types,
            'includeItemTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_favorite,
            'isFavorite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_types,
            'mediaTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_types,
            'imageTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_played,
            'isPlayed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $genres,
            'genres', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $official_ratings,
            'officialRatings', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $years,
            'years', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_user_data,
            'enableUserData', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_type_limit,
            'imageTypeLimit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_image_types,
            'enableImageTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person,
            'person', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_ids,
            'personIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_types,
            'personTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $studios,
            'studios', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artists,
            'artists', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_artist_ids,
            'excludeArtistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artist_ids,
            'artistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $album_artist_ids,
            'albumArtistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contributing_artist_ids,
            'contributingArtistIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $albums,
            'albums', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $album_ids,
            'albumIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $video_types,
            'videoTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_official_rating,
            'minOfficialRating', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_locked,
            'isLocked', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_place_holder,
            'isPlaceHolder', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_official_rating,
            'hasOfficialRating', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collapse_box_set_items,
            'collapseBoxSetItems', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_width,
            'minWidth', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_height,
            'minHeight', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_width,
            'maxWidth', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_height,
            'maxHeight', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is3_d,
            'is3D', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $series_status,
            'seriesStatus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_starts_with_or_greater,
            'nameStartsWithOrGreater', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_starts_with,
            'nameStartsWith', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_less_than,
            'nameLessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $studio_ids,
            'studioIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $genre_ids,
            'genreIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_total_record_count,
            'enableTotalRecordCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_images,
            'enableImages', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResumeItems
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id. (required)
     * @param  int $start_index The start index. (optional)
     * @param  int $limit The item limit. (optional)
     * @param  string $search_term The search term. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  string[] $media_types Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional. Include image information in output. (optional, default to true)
     * @param  bool $exclude_active_sessions Optional. Whether to exclude the currently active sessions. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResumeItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getResumeItems($user_id, $start_index = null, $limit = null, $search_term = null, $parent_id = null, $fields = null, $media_types = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $exclude_item_types = null, $include_item_types = null, $enable_total_record_count = true, $enable_images = true, $exclude_active_sessions = false, string $contentType = self::contentTypes['getResumeItems'][0])
    {
        list($response) = $this->getResumeItemsWithHttpInfo($user_id, $start_index, $limit, $search_term, $parent_id, $fields, $media_types, $enable_user_data, $image_type_limit, $enable_image_types, $exclude_item_types, $include_item_types, $enable_total_record_count, $enable_images, $exclude_active_sessions, $contentType);
        return $response;
    }

    /**
     * Operation getResumeItemsWithHttpInfo
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id. (required)
     * @param  int $start_index The start index. (optional)
     * @param  int $limit The item limit. (optional)
     * @param  string $search_term The search term. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  string[] $media_types Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional. Include image information in output. (optional, default to true)
     * @param  bool $exclude_active_sessions Optional. Whether to exclude the currently active sessions. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResumeItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResumeItemsWithHttpInfo($user_id, $start_index = null, $limit = null, $search_term = null, $parent_id = null, $fields = null, $media_types = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $exclude_item_types = null, $include_item_types = null, $enable_total_record_count = true, $enable_images = true, $exclude_active_sessions = false, string $contentType = self::contentTypes['getResumeItems'][0])
    {
        $request = $this->getResumeItemsRequest($user_id, $start_index, $limit, $search_term, $parent_id, $fields, $media_types, $enable_user_data, $image_type_limit, $enable_image_types, $exclude_item_types, $include_item_types, $enable_total_record_count, $enable_images, $exclude_active_sessions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResumeItemsAsync
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id. (required)
     * @param  int $start_index The start index. (optional)
     * @param  int $limit The item limit. (optional)
     * @param  string $search_term The search term. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  string[] $media_types Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional. Include image information in output. (optional, default to true)
     * @param  bool $exclude_active_sessions Optional. Whether to exclude the currently active sessions. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResumeItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumeItemsAsync($user_id, $start_index = null, $limit = null, $search_term = null, $parent_id = null, $fields = null, $media_types = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $exclude_item_types = null, $include_item_types = null, $enable_total_record_count = true, $enable_images = true, $exclude_active_sessions = false, string $contentType = self::contentTypes['getResumeItems'][0])
    {
        return $this->getResumeItemsAsyncWithHttpInfo($user_id, $start_index, $limit, $search_term, $parent_id, $fields, $media_types, $enable_user_data, $image_type_limit, $enable_image_types, $exclude_item_types, $include_item_types, $enable_total_record_count, $enable_images, $exclude_active_sessions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResumeItemsAsyncWithHttpInfo
     *
     * Gets items based on a query.
     *
     * @param  string $user_id The user id. (required)
     * @param  int $start_index The start index. (optional)
     * @param  int $limit The item limit. (optional)
     * @param  string $search_term The search term. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  string[] $media_types Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional. Include image information in output. (optional, default to true)
     * @param  bool $exclude_active_sessions Optional. Whether to exclude the currently active sessions. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResumeItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResumeItemsAsyncWithHttpInfo($user_id, $start_index = null, $limit = null, $search_term = null, $parent_id = null, $fields = null, $media_types = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $exclude_item_types = null, $include_item_types = null, $enable_total_record_count = true, $enable_images = true, $exclude_active_sessions = false, string $contentType = self::contentTypes['getResumeItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getResumeItemsRequest($user_id, $start_index, $limit, $search_term, $parent_id, $fields, $media_types, $enable_user_data, $image_type_limit, $enable_image_types, $exclude_item_types, $include_item_types, $enable_total_record_count, $enable_images, $exclude_active_sessions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResumeItems'
     *
     * @param  string $user_id The user id. (required)
     * @param  int $start_index The start index. (optional)
     * @param  int $limit The item limit. (optional)
     * @param  string $search_term The search term. (optional)
     * @param  string $parent_id Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     * @param  string[] $media_types Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
     * @param  bool $enable_user_data Optional. Include user data. (optional)
     * @param  int $image_type_limit Optional. The max number of images to return, per image type. (optional)
     * @param  \OpenAPI\Client\Model\ImageType[] $enable_image_types Optional. The image types to include in the output. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $exclude_item_types Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     * @param  \OpenAPI\Client\Model\BaseItemKind[] $include_item_types Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited. (optional)
     * @param  bool $enable_total_record_count Optional. Enable the total record count. (optional, default to true)
     * @param  bool $enable_images Optional. Include image information in output. (optional, default to true)
     * @param  bool $exclude_active_sessions Optional. Whether to exclude the currently active sessions. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResumeItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResumeItemsRequest($user_id, $start_index = null, $limit = null, $search_term = null, $parent_id = null, $fields = null, $media_types = null, $enable_user_data = null, $image_type_limit = null, $enable_image_types = null, $exclude_item_types = null, $include_item_types = null, $enable_total_record_count = true, $enable_images = true, $exclude_active_sessions = false, string $contentType = self::contentTypes['getResumeItems'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getResumeItems'
            );
        }
















        $resourcePath = '/Users/{userId}/Items/Resume';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_term,
            'searchTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_types,
            'mediaTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_user_data,
            'enableUserData', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_type_limit,
            'imageTypeLimit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_image_types,
            'enableImageTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_item_types,
            'excludeItemTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_item_types,
            'includeItemTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_total_record_count,
            'enableTotalRecordCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_images,
            'enableImages', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_active_sessions,
            'excludeActiveSessions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
