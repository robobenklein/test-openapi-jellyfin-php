<?php
/**
 * SystemInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SystemInfo Class Doc Comment
 *
 * @category Class
 * @description Class SystemInfo.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SystemInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SystemInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'local_address' => 'string',
        'server_name' => 'string',
        'version' => 'string',
        'product_name' => 'string',
        'operating_system' => 'string',
        'id' => 'string',
        'startup_wizard_completed' => 'bool',
        'operating_system_display_name' => 'string',
        'package_name' => 'string',
        'has_pending_restart' => 'bool',
        'is_shutting_down' => 'bool',
        'supports_library_monitor' => 'bool',
        'web_socket_port_number' => 'int',
        'completed_installations' => '\OpenAPI\Client\Model\InstallationInfo[]',
        'can_self_restart' => 'bool',
        'can_launch_web_browser' => 'bool',
        'program_data_path' => 'string',
        'web_path' => 'string',
        'items_by_name_path' => 'string',
        'cache_path' => 'string',
        'log_path' => 'string',
        'internal_metadata_path' => 'string',
        'transcoding_temp_path' => 'string',
        'has_update_available' => 'bool',
        'encoder_location' => '\OpenAPI\Client\Model\FFmpegLocation',
        'system_architecture' => '\OpenAPI\Client\Model\Architecture'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'local_address' => null,
        'server_name' => null,
        'version' => null,
        'product_name' => null,
        'operating_system' => null,
        'id' => null,
        'startup_wizard_completed' => null,
        'operating_system_display_name' => null,
        'package_name' => null,
        'has_pending_restart' => null,
        'is_shutting_down' => null,
        'supports_library_monitor' => null,
        'web_socket_port_number' => 'int32',
        'completed_installations' => null,
        'can_self_restart' => null,
        'can_launch_web_browser' => null,
        'program_data_path' => null,
        'web_path' => null,
        'items_by_name_path' => null,
        'cache_path' => null,
        'log_path' => null,
        'internal_metadata_path' => null,
        'transcoding_temp_path' => null,
        'has_update_available' => null,
        'encoder_location' => null,
        'system_architecture' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'local_address' => true,
		'server_name' => true,
		'version' => true,
		'product_name' => true,
		'operating_system' => true,
		'id' => true,
		'startup_wizard_completed' => true,
		'operating_system_display_name' => true,
		'package_name' => true,
		'has_pending_restart' => false,
		'is_shutting_down' => false,
		'supports_library_monitor' => false,
		'web_socket_port_number' => false,
		'completed_installations' => true,
		'can_self_restart' => false,
		'can_launch_web_browser' => false,
		'program_data_path' => true,
		'web_path' => true,
		'items_by_name_path' => true,
		'cache_path' => true,
		'log_path' => true,
		'internal_metadata_path' => true,
		'transcoding_temp_path' => true,
		'has_update_available' => false,
		'encoder_location' => false,
		'system_architecture' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'local_address' => 'LocalAddress',
        'server_name' => 'ServerName',
        'version' => 'Version',
        'product_name' => 'ProductName',
        'operating_system' => 'OperatingSystem',
        'id' => 'Id',
        'startup_wizard_completed' => 'StartupWizardCompleted',
        'operating_system_display_name' => 'OperatingSystemDisplayName',
        'package_name' => 'PackageName',
        'has_pending_restart' => 'HasPendingRestart',
        'is_shutting_down' => 'IsShuttingDown',
        'supports_library_monitor' => 'SupportsLibraryMonitor',
        'web_socket_port_number' => 'WebSocketPortNumber',
        'completed_installations' => 'CompletedInstallations',
        'can_self_restart' => 'CanSelfRestart',
        'can_launch_web_browser' => 'CanLaunchWebBrowser',
        'program_data_path' => 'ProgramDataPath',
        'web_path' => 'WebPath',
        'items_by_name_path' => 'ItemsByNamePath',
        'cache_path' => 'CachePath',
        'log_path' => 'LogPath',
        'internal_metadata_path' => 'InternalMetadataPath',
        'transcoding_temp_path' => 'TranscodingTempPath',
        'has_update_available' => 'HasUpdateAvailable',
        'encoder_location' => 'EncoderLocation',
        'system_architecture' => 'SystemArchitecture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'local_address' => 'setLocalAddress',
        'server_name' => 'setServerName',
        'version' => 'setVersion',
        'product_name' => 'setProductName',
        'operating_system' => 'setOperatingSystem',
        'id' => 'setId',
        'startup_wizard_completed' => 'setStartupWizardCompleted',
        'operating_system_display_name' => 'setOperatingSystemDisplayName',
        'package_name' => 'setPackageName',
        'has_pending_restart' => 'setHasPendingRestart',
        'is_shutting_down' => 'setIsShuttingDown',
        'supports_library_monitor' => 'setSupportsLibraryMonitor',
        'web_socket_port_number' => 'setWebSocketPortNumber',
        'completed_installations' => 'setCompletedInstallations',
        'can_self_restart' => 'setCanSelfRestart',
        'can_launch_web_browser' => 'setCanLaunchWebBrowser',
        'program_data_path' => 'setProgramDataPath',
        'web_path' => 'setWebPath',
        'items_by_name_path' => 'setItemsByNamePath',
        'cache_path' => 'setCachePath',
        'log_path' => 'setLogPath',
        'internal_metadata_path' => 'setInternalMetadataPath',
        'transcoding_temp_path' => 'setTranscodingTempPath',
        'has_update_available' => 'setHasUpdateAvailable',
        'encoder_location' => 'setEncoderLocation',
        'system_architecture' => 'setSystemArchitecture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'local_address' => 'getLocalAddress',
        'server_name' => 'getServerName',
        'version' => 'getVersion',
        'product_name' => 'getProductName',
        'operating_system' => 'getOperatingSystem',
        'id' => 'getId',
        'startup_wizard_completed' => 'getStartupWizardCompleted',
        'operating_system_display_name' => 'getOperatingSystemDisplayName',
        'package_name' => 'getPackageName',
        'has_pending_restart' => 'getHasPendingRestart',
        'is_shutting_down' => 'getIsShuttingDown',
        'supports_library_monitor' => 'getSupportsLibraryMonitor',
        'web_socket_port_number' => 'getWebSocketPortNumber',
        'completed_installations' => 'getCompletedInstallations',
        'can_self_restart' => 'getCanSelfRestart',
        'can_launch_web_browser' => 'getCanLaunchWebBrowser',
        'program_data_path' => 'getProgramDataPath',
        'web_path' => 'getWebPath',
        'items_by_name_path' => 'getItemsByNamePath',
        'cache_path' => 'getCachePath',
        'log_path' => 'getLogPath',
        'internal_metadata_path' => 'getInternalMetadataPath',
        'transcoding_temp_path' => 'getTranscodingTempPath',
        'has_update_available' => 'getHasUpdateAvailable',
        'encoder_location' => 'getEncoderLocation',
        'system_architecture' => 'getSystemArchitecture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('local_address', $data ?? [], null);
        $this->setIfExists('server_name', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('operating_system', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('startup_wizard_completed', $data ?? [], null);
        $this->setIfExists('operating_system_display_name', $data ?? [], null);
        $this->setIfExists('package_name', $data ?? [], null);
        $this->setIfExists('has_pending_restart', $data ?? [], null);
        $this->setIfExists('is_shutting_down', $data ?? [], null);
        $this->setIfExists('supports_library_monitor', $data ?? [], null);
        $this->setIfExists('web_socket_port_number', $data ?? [], null);
        $this->setIfExists('completed_installations', $data ?? [], null);
        $this->setIfExists('can_self_restart', $data ?? [], null);
        $this->setIfExists('can_launch_web_browser', $data ?? [], null);
        $this->setIfExists('program_data_path', $data ?? [], null);
        $this->setIfExists('web_path', $data ?? [], null);
        $this->setIfExists('items_by_name_path', $data ?? [], null);
        $this->setIfExists('cache_path', $data ?? [], null);
        $this->setIfExists('log_path', $data ?? [], null);
        $this->setIfExists('internal_metadata_path', $data ?? [], null);
        $this->setIfExists('transcoding_temp_path', $data ?? [], null);
        $this->setIfExists('has_update_available', $data ?? [], null);
        $this->setIfExists('encoder_location', $data ?? [], null);
        $this->setIfExists('system_architecture', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets local_address
     *
     * @return string|null
     */
    public function getLocalAddress()
    {
        return $this->container['local_address'];
    }

    /**
     * Sets local_address
     *
     * @param string|null $local_address Gets or sets the local address.
     *
     * @return self
     */
    public function setLocalAddress($local_address)
    {
        if (is_null($local_address)) {
            array_push($this->openAPINullablesSetToNull, 'local_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_address'] = $local_address;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string|null
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string|null $server_name Gets or sets the name of the server.
     *
     * @return self
     */
    public function setServerName($server_name)
    {
        if (is_null($server_name)) {
            array_push($this->openAPINullablesSetToNull, 'server_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Gets or sets the server version.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            array_push($this->openAPINullablesSetToNull, 'version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name Gets or sets the product name. This is the AssemblyProduct name.
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            array_push($this->openAPINullablesSetToNull, 'product_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets operating_system
     *
     * @return string|null
     */
    public function getOperatingSystem()
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system
     *
     * @param string|null $operating_system Gets or sets the operating system.
     *
     * @return self
     */
    public function setOperatingSystem($operating_system)
    {
        if (is_null($operating_system)) {
            array_push($this->openAPINullablesSetToNull, 'operating_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('operating_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets startup_wizard_completed
     *
     * @return bool|null
     */
    public function getStartupWizardCompleted()
    {
        return $this->container['startup_wizard_completed'];
    }

    /**
     * Sets startup_wizard_completed
     *
     * @param bool|null $startup_wizard_completed Gets or sets a value indicating whether the startup wizard is completed.
     *
     * @return self
     */
    public function setStartupWizardCompleted($startup_wizard_completed)
    {
        if (is_null($startup_wizard_completed)) {
            array_push($this->openAPINullablesSetToNull, 'startup_wizard_completed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startup_wizard_completed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startup_wizard_completed'] = $startup_wizard_completed;

        return $this;
    }

    /**
     * Gets operating_system_display_name
     *
     * @return string|null
     */
    public function getOperatingSystemDisplayName()
    {
        return $this->container['operating_system_display_name'];
    }

    /**
     * Sets operating_system_display_name
     *
     * @param string|null $operating_system_display_name Gets or sets the display name of the operating system.
     *
     * @return self
     */
    public function setOperatingSystemDisplayName($operating_system_display_name)
    {
        if (is_null($operating_system_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'operating_system_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('operating_system_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['operating_system_display_name'] = $operating_system_display_name;

        return $this;
    }

    /**
     * Gets package_name
     *
     * @return string|null
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     *
     * @param string|null $package_name Gets or sets the package name.
     *
     * @return self
     */
    public function setPackageName($package_name)
    {
        if (is_null($package_name)) {
            array_push($this->openAPINullablesSetToNull, 'package_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets has_pending_restart
     *
     * @return bool|null
     */
    public function getHasPendingRestart()
    {
        return $this->container['has_pending_restart'];
    }

    /**
     * Sets has_pending_restart
     *
     * @param bool|null $has_pending_restart Gets or sets a value indicating whether this instance has pending restart.
     *
     * @return self
     */
    public function setHasPendingRestart($has_pending_restart)
    {
        if (is_null($has_pending_restart)) {
            throw new \InvalidArgumentException('non-nullable has_pending_restart cannot be null');
        }
        $this->container['has_pending_restart'] = $has_pending_restart;

        return $this;
    }

    /**
     * Gets is_shutting_down
     *
     * @return bool|null
     */
    public function getIsShuttingDown()
    {
        return $this->container['is_shutting_down'];
    }

    /**
     * Sets is_shutting_down
     *
     * @param bool|null $is_shutting_down is_shutting_down
     *
     * @return self
     */
    public function setIsShuttingDown($is_shutting_down)
    {
        if (is_null($is_shutting_down)) {
            throw new \InvalidArgumentException('non-nullable is_shutting_down cannot be null');
        }
        $this->container['is_shutting_down'] = $is_shutting_down;

        return $this;
    }

    /**
     * Gets supports_library_monitor
     *
     * @return bool|null
     */
    public function getSupportsLibraryMonitor()
    {
        return $this->container['supports_library_monitor'];
    }

    /**
     * Sets supports_library_monitor
     *
     * @param bool|null $supports_library_monitor Gets or sets a value indicating whether [supports library monitor].
     *
     * @return self
     */
    public function setSupportsLibraryMonitor($supports_library_monitor)
    {
        if (is_null($supports_library_monitor)) {
            throw new \InvalidArgumentException('non-nullable supports_library_monitor cannot be null');
        }
        $this->container['supports_library_monitor'] = $supports_library_monitor;

        return $this;
    }

    /**
     * Gets web_socket_port_number
     *
     * @return int|null
     */
    public function getWebSocketPortNumber()
    {
        return $this->container['web_socket_port_number'];
    }

    /**
     * Sets web_socket_port_number
     *
     * @param int|null $web_socket_port_number Gets or sets the web socket port number.
     *
     * @return self
     */
    public function setWebSocketPortNumber($web_socket_port_number)
    {
        if (is_null($web_socket_port_number)) {
            throw new \InvalidArgumentException('non-nullable web_socket_port_number cannot be null');
        }
        $this->container['web_socket_port_number'] = $web_socket_port_number;

        return $this;
    }

    /**
     * Gets completed_installations
     *
     * @return \OpenAPI\Client\Model\InstallationInfo[]|null
     */
    public function getCompletedInstallations()
    {
        return $this->container['completed_installations'];
    }

    /**
     * Sets completed_installations
     *
     * @param \OpenAPI\Client\Model\InstallationInfo[]|null $completed_installations Gets or sets the completed installations.
     *
     * @return self
     */
    public function setCompletedInstallations($completed_installations)
    {
        if (is_null($completed_installations)) {
            array_push($this->openAPINullablesSetToNull, 'completed_installations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_installations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_installations'] = $completed_installations;

        return $this;
    }

    /**
     * Gets can_self_restart
     *
     * @return bool|null
     */
    public function getCanSelfRestart()
    {
        return $this->container['can_self_restart'];
    }

    /**
     * Sets can_self_restart
     *
     * @param bool|null $can_self_restart Gets or sets a value indicating whether this instance can self restart.
     *
     * @return self
     */
    public function setCanSelfRestart($can_self_restart)
    {
        if (is_null($can_self_restart)) {
            throw new \InvalidArgumentException('non-nullable can_self_restart cannot be null');
        }
        $this->container['can_self_restart'] = $can_self_restart;

        return $this;
    }

    /**
     * Gets can_launch_web_browser
     *
     * @return bool|null
     */
    public function getCanLaunchWebBrowser()
    {
        return $this->container['can_launch_web_browser'];
    }

    /**
     * Sets can_launch_web_browser
     *
     * @param bool|null $can_launch_web_browser can_launch_web_browser
     *
     * @return self
     */
    public function setCanLaunchWebBrowser($can_launch_web_browser)
    {
        if (is_null($can_launch_web_browser)) {
            throw new \InvalidArgumentException('non-nullable can_launch_web_browser cannot be null');
        }
        $this->container['can_launch_web_browser'] = $can_launch_web_browser;

        return $this;
    }

    /**
     * Gets program_data_path
     *
     * @return string|null
     */
    public function getProgramDataPath()
    {
        return $this->container['program_data_path'];
    }

    /**
     * Sets program_data_path
     *
     * @param string|null $program_data_path Gets or sets the program data path.
     *
     * @return self
     */
    public function setProgramDataPath($program_data_path)
    {
        if (is_null($program_data_path)) {
            array_push($this->openAPINullablesSetToNull, 'program_data_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_data_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_data_path'] = $program_data_path;

        return $this;
    }

    /**
     * Gets web_path
     *
     * @return string|null
     */
    public function getWebPath()
    {
        return $this->container['web_path'];
    }

    /**
     * Sets web_path
     *
     * @param string|null $web_path Gets or sets the web UI resources path.
     *
     * @return self
     */
    public function setWebPath($web_path)
    {
        if (is_null($web_path)) {
            array_push($this->openAPINullablesSetToNull, 'web_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['web_path'] = $web_path;

        return $this;
    }

    /**
     * Gets items_by_name_path
     *
     * @return string|null
     */
    public function getItemsByNamePath()
    {
        return $this->container['items_by_name_path'];
    }

    /**
     * Sets items_by_name_path
     *
     * @param string|null $items_by_name_path Gets or sets the items by name path.
     *
     * @return self
     */
    public function setItemsByNamePath($items_by_name_path)
    {
        if (is_null($items_by_name_path)) {
            array_push($this->openAPINullablesSetToNull, 'items_by_name_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items_by_name_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['items_by_name_path'] = $items_by_name_path;

        return $this;
    }

    /**
     * Gets cache_path
     *
     * @return string|null
     */
    public function getCachePath()
    {
        return $this->container['cache_path'];
    }

    /**
     * Sets cache_path
     *
     * @param string|null $cache_path Gets or sets the cache path.
     *
     * @return self
     */
    public function setCachePath($cache_path)
    {
        if (is_null($cache_path)) {
            array_push($this->openAPINullablesSetToNull, 'cache_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cache_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cache_path'] = $cache_path;

        return $this;
    }

    /**
     * Gets log_path
     *
     * @return string|null
     */
    public function getLogPath()
    {
        return $this->container['log_path'];
    }

    /**
     * Sets log_path
     *
     * @param string|null $log_path Gets or sets the log path.
     *
     * @return self
     */
    public function setLogPath($log_path)
    {
        if (is_null($log_path)) {
            array_push($this->openAPINullablesSetToNull, 'log_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('log_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['log_path'] = $log_path;

        return $this;
    }

    /**
     * Gets internal_metadata_path
     *
     * @return string|null
     */
    public function getInternalMetadataPath()
    {
        return $this->container['internal_metadata_path'];
    }

    /**
     * Sets internal_metadata_path
     *
     * @param string|null $internal_metadata_path Gets or sets the internal metadata path.
     *
     * @return self
     */
    public function setInternalMetadataPath($internal_metadata_path)
    {
        if (is_null($internal_metadata_path)) {
            array_push($this->openAPINullablesSetToNull, 'internal_metadata_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_metadata_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_metadata_path'] = $internal_metadata_path;

        return $this;
    }

    /**
     * Gets transcoding_temp_path
     *
     * @return string|null
     */
    public function getTranscodingTempPath()
    {
        return $this->container['transcoding_temp_path'];
    }

    /**
     * Sets transcoding_temp_path
     *
     * @param string|null $transcoding_temp_path Gets or sets the transcode path.
     *
     * @return self
     */
    public function setTranscodingTempPath($transcoding_temp_path)
    {
        if (is_null($transcoding_temp_path)) {
            array_push($this->openAPINullablesSetToNull, 'transcoding_temp_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcoding_temp_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transcoding_temp_path'] = $transcoding_temp_path;

        return $this;
    }

    /**
     * Gets has_update_available
     *
     * @return bool|null
     * @deprecated
     */
    public function getHasUpdateAvailable()
    {
        return $this->container['has_update_available'];
    }

    /**
     * Sets has_update_available
     *
     * @param bool|null $has_update_available Gets or sets a value indicating whether this instance has update available.
     *
     * @return self
     * @deprecated
     */
    public function setHasUpdateAvailable($has_update_available)
    {
        if (is_null($has_update_available)) {
            throw new \InvalidArgumentException('non-nullable has_update_available cannot be null');
        }
        $this->container['has_update_available'] = $has_update_available;

        return $this;
    }

    /**
     * Gets encoder_location
     *
     * @return \OpenAPI\Client\Model\FFmpegLocation|null
     */
    public function getEncoderLocation()
    {
        return $this->container['encoder_location'];
    }

    /**
     * Sets encoder_location
     *
     * @param \OpenAPI\Client\Model\FFmpegLocation|null $encoder_location encoder_location
     *
     * @return self
     */
    public function setEncoderLocation($encoder_location)
    {
        if (is_null($encoder_location)) {
            throw new \InvalidArgumentException('non-nullable encoder_location cannot be null');
        }
        $this->container['encoder_location'] = $encoder_location;

        return $this;
    }

    /**
     * Gets system_architecture
     *
     * @return \OpenAPI\Client\Model\Architecture|null
     */
    public function getSystemArchitecture()
    {
        return $this->container['system_architecture'];
    }

    /**
     * Sets system_architecture
     *
     * @param \OpenAPI\Client\Model\Architecture|null $system_architecture system_architecture
     *
     * @return self
     */
    public function setSystemArchitecture($system_architecture)
    {
        if (is_null($system_architecture)) {
            throw new \InvalidArgumentException('non-nullable system_architecture cannot be null');
        }
        $this->container['system_architecture'] = $system_architecture;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


