<?php
/**
 * UserPolicy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserPolicy Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserPolicy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_administrator' => 'bool',
        'is_hidden' => 'bool',
        'is_disabled' => 'bool',
        'max_parental_rating' => 'int',
        'blocked_tags' => 'string[]',
        'enable_user_preference_access' => 'bool',
        'access_schedules' => '\OpenAPI\Client\Model\AccessSchedule[]',
        'block_unrated_items' => '\OpenAPI\Client\Model\UnratedItem[]',
        'enable_remote_control_of_other_users' => 'bool',
        'enable_shared_device_control' => 'bool',
        'enable_remote_access' => 'bool',
        'enable_live_tv_management' => 'bool',
        'enable_live_tv_access' => 'bool',
        'enable_media_playback' => 'bool',
        'enable_audio_playback_transcoding' => 'bool',
        'enable_video_playback_transcoding' => 'bool',
        'enable_playback_remuxing' => 'bool',
        'force_remote_source_transcoding' => 'bool',
        'enable_content_deletion' => 'bool',
        'enable_content_deletion_from_folders' => 'string[]',
        'enable_content_downloading' => 'bool',
        'enable_sync_transcoding' => 'bool',
        'enable_media_conversion' => 'bool',
        'enabled_devices' => 'string[]',
        'enable_all_devices' => 'bool',
        'enabled_channels' => 'string[]',
        'enable_all_channels' => 'bool',
        'enabled_folders' => 'string[]',
        'enable_all_folders' => 'bool',
        'invalid_login_attempt_count' => 'int',
        'login_attempts_before_lockout' => 'int',
        'max_active_sessions' => 'int',
        'enable_public_sharing' => 'bool',
        'blocked_media_folders' => 'string[]',
        'blocked_channels' => 'string[]',
        'remote_client_bitrate_limit' => 'int',
        'authentication_provider_id' => 'string',
        'password_reset_provider_id' => 'string',
        'sync_play_access' => '\OpenAPI\Client\Model\SyncPlayUserAccessType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_administrator' => null,
        'is_hidden' => null,
        'is_disabled' => null,
        'max_parental_rating' => 'int32',
        'blocked_tags' => null,
        'enable_user_preference_access' => null,
        'access_schedules' => null,
        'block_unrated_items' => null,
        'enable_remote_control_of_other_users' => null,
        'enable_shared_device_control' => null,
        'enable_remote_access' => null,
        'enable_live_tv_management' => null,
        'enable_live_tv_access' => null,
        'enable_media_playback' => null,
        'enable_audio_playback_transcoding' => null,
        'enable_video_playback_transcoding' => null,
        'enable_playback_remuxing' => null,
        'force_remote_source_transcoding' => null,
        'enable_content_deletion' => null,
        'enable_content_deletion_from_folders' => null,
        'enable_content_downloading' => null,
        'enable_sync_transcoding' => null,
        'enable_media_conversion' => null,
        'enabled_devices' => null,
        'enable_all_devices' => null,
        'enabled_channels' => 'uuid',
        'enable_all_channels' => null,
        'enabled_folders' => 'uuid',
        'enable_all_folders' => null,
        'invalid_login_attempt_count' => 'int32',
        'login_attempts_before_lockout' => 'int32',
        'max_active_sessions' => 'int32',
        'enable_public_sharing' => null,
        'blocked_media_folders' => 'uuid',
        'blocked_channels' => 'uuid',
        'remote_client_bitrate_limit' => 'int32',
        'authentication_provider_id' => null,
        'password_reset_provider_id' => null,
        'sync_play_access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_administrator' => false,
		'is_hidden' => false,
		'is_disabled' => false,
		'max_parental_rating' => true,
		'blocked_tags' => true,
		'enable_user_preference_access' => false,
		'access_schedules' => true,
		'block_unrated_items' => true,
		'enable_remote_control_of_other_users' => false,
		'enable_shared_device_control' => false,
		'enable_remote_access' => false,
		'enable_live_tv_management' => false,
		'enable_live_tv_access' => false,
		'enable_media_playback' => false,
		'enable_audio_playback_transcoding' => false,
		'enable_video_playback_transcoding' => false,
		'enable_playback_remuxing' => false,
		'force_remote_source_transcoding' => false,
		'enable_content_deletion' => false,
		'enable_content_deletion_from_folders' => true,
		'enable_content_downloading' => false,
		'enable_sync_transcoding' => false,
		'enable_media_conversion' => false,
		'enabled_devices' => true,
		'enable_all_devices' => false,
		'enabled_channels' => true,
		'enable_all_channels' => false,
		'enabled_folders' => true,
		'enable_all_folders' => false,
		'invalid_login_attempt_count' => false,
		'login_attempts_before_lockout' => false,
		'max_active_sessions' => false,
		'enable_public_sharing' => false,
		'blocked_media_folders' => true,
		'blocked_channels' => true,
		'remote_client_bitrate_limit' => false,
		'authentication_provider_id' => true,
		'password_reset_provider_id' => true,
		'sync_play_access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_administrator' => 'IsAdministrator',
        'is_hidden' => 'IsHidden',
        'is_disabled' => 'IsDisabled',
        'max_parental_rating' => 'MaxParentalRating',
        'blocked_tags' => 'BlockedTags',
        'enable_user_preference_access' => 'EnableUserPreferenceAccess',
        'access_schedules' => 'AccessSchedules',
        'block_unrated_items' => 'BlockUnratedItems',
        'enable_remote_control_of_other_users' => 'EnableRemoteControlOfOtherUsers',
        'enable_shared_device_control' => 'EnableSharedDeviceControl',
        'enable_remote_access' => 'EnableRemoteAccess',
        'enable_live_tv_management' => 'EnableLiveTvManagement',
        'enable_live_tv_access' => 'EnableLiveTvAccess',
        'enable_media_playback' => 'EnableMediaPlayback',
        'enable_audio_playback_transcoding' => 'EnableAudioPlaybackTranscoding',
        'enable_video_playback_transcoding' => 'EnableVideoPlaybackTranscoding',
        'enable_playback_remuxing' => 'EnablePlaybackRemuxing',
        'force_remote_source_transcoding' => 'ForceRemoteSourceTranscoding',
        'enable_content_deletion' => 'EnableContentDeletion',
        'enable_content_deletion_from_folders' => 'EnableContentDeletionFromFolders',
        'enable_content_downloading' => 'EnableContentDownloading',
        'enable_sync_transcoding' => 'EnableSyncTranscoding',
        'enable_media_conversion' => 'EnableMediaConversion',
        'enabled_devices' => 'EnabledDevices',
        'enable_all_devices' => 'EnableAllDevices',
        'enabled_channels' => 'EnabledChannels',
        'enable_all_channels' => 'EnableAllChannels',
        'enabled_folders' => 'EnabledFolders',
        'enable_all_folders' => 'EnableAllFolders',
        'invalid_login_attempt_count' => 'InvalidLoginAttemptCount',
        'login_attempts_before_lockout' => 'LoginAttemptsBeforeLockout',
        'max_active_sessions' => 'MaxActiveSessions',
        'enable_public_sharing' => 'EnablePublicSharing',
        'blocked_media_folders' => 'BlockedMediaFolders',
        'blocked_channels' => 'BlockedChannels',
        'remote_client_bitrate_limit' => 'RemoteClientBitrateLimit',
        'authentication_provider_id' => 'AuthenticationProviderId',
        'password_reset_provider_id' => 'PasswordResetProviderId',
        'sync_play_access' => 'SyncPlayAccess'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_administrator' => 'setIsAdministrator',
        'is_hidden' => 'setIsHidden',
        'is_disabled' => 'setIsDisabled',
        'max_parental_rating' => 'setMaxParentalRating',
        'blocked_tags' => 'setBlockedTags',
        'enable_user_preference_access' => 'setEnableUserPreferenceAccess',
        'access_schedules' => 'setAccessSchedules',
        'block_unrated_items' => 'setBlockUnratedItems',
        'enable_remote_control_of_other_users' => 'setEnableRemoteControlOfOtherUsers',
        'enable_shared_device_control' => 'setEnableSharedDeviceControl',
        'enable_remote_access' => 'setEnableRemoteAccess',
        'enable_live_tv_management' => 'setEnableLiveTvManagement',
        'enable_live_tv_access' => 'setEnableLiveTvAccess',
        'enable_media_playback' => 'setEnableMediaPlayback',
        'enable_audio_playback_transcoding' => 'setEnableAudioPlaybackTranscoding',
        'enable_video_playback_transcoding' => 'setEnableVideoPlaybackTranscoding',
        'enable_playback_remuxing' => 'setEnablePlaybackRemuxing',
        'force_remote_source_transcoding' => 'setForceRemoteSourceTranscoding',
        'enable_content_deletion' => 'setEnableContentDeletion',
        'enable_content_deletion_from_folders' => 'setEnableContentDeletionFromFolders',
        'enable_content_downloading' => 'setEnableContentDownloading',
        'enable_sync_transcoding' => 'setEnableSyncTranscoding',
        'enable_media_conversion' => 'setEnableMediaConversion',
        'enabled_devices' => 'setEnabledDevices',
        'enable_all_devices' => 'setEnableAllDevices',
        'enabled_channels' => 'setEnabledChannels',
        'enable_all_channels' => 'setEnableAllChannels',
        'enabled_folders' => 'setEnabledFolders',
        'enable_all_folders' => 'setEnableAllFolders',
        'invalid_login_attempt_count' => 'setInvalidLoginAttemptCount',
        'login_attempts_before_lockout' => 'setLoginAttemptsBeforeLockout',
        'max_active_sessions' => 'setMaxActiveSessions',
        'enable_public_sharing' => 'setEnablePublicSharing',
        'blocked_media_folders' => 'setBlockedMediaFolders',
        'blocked_channels' => 'setBlockedChannels',
        'remote_client_bitrate_limit' => 'setRemoteClientBitrateLimit',
        'authentication_provider_id' => 'setAuthenticationProviderId',
        'password_reset_provider_id' => 'setPasswordResetProviderId',
        'sync_play_access' => 'setSyncPlayAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_administrator' => 'getIsAdministrator',
        'is_hidden' => 'getIsHidden',
        'is_disabled' => 'getIsDisabled',
        'max_parental_rating' => 'getMaxParentalRating',
        'blocked_tags' => 'getBlockedTags',
        'enable_user_preference_access' => 'getEnableUserPreferenceAccess',
        'access_schedules' => 'getAccessSchedules',
        'block_unrated_items' => 'getBlockUnratedItems',
        'enable_remote_control_of_other_users' => 'getEnableRemoteControlOfOtherUsers',
        'enable_shared_device_control' => 'getEnableSharedDeviceControl',
        'enable_remote_access' => 'getEnableRemoteAccess',
        'enable_live_tv_management' => 'getEnableLiveTvManagement',
        'enable_live_tv_access' => 'getEnableLiveTvAccess',
        'enable_media_playback' => 'getEnableMediaPlayback',
        'enable_audio_playback_transcoding' => 'getEnableAudioPlaybackTranscoding',
        'enable_video_playback_transcoding' => 'getEnableVideoPlaybackTranscoding',
        'enable_playback_remuxing' => 'getEnablePlaybackRemuxing',
        'force_remote_source_transcoding' => 'getForceRemoteSourceTranscoding',
        'enable_content_deletion' => 'getEnableContentDeletion',
        'enable_content_deletion_from_folders' => 'getEnableContentDeletionFromFolders',
        'enable_content_downloading' => 'getEnableContentDownloading',
        'enable_sync_transcoding' => 'getEnableSyncTranscoding',
        'enable_media_conversion' => 'getEnableMediaConversion',
        'enabled_devices' => 'getEnabledDevices',
        'enable_all_devices' => 'getEnableAllDevices',
        'enabled_channels' => 'getEnabledChannels',
        'enable_all_channels' => 'getEnableAllChannels',
        'enabled_folders' => 'getEnabledFolders',
        'enable_all_folders' => 'getEnableAllFolders',
        'invalid_login_attempt_count' => 'getInvalidLoginAttemptCount',
        'login_attempts_before_lockout' => 'getLoginAttemptsBeforeLockout',
        'max_active_sessions' => 'getMaxActiveSessions',
        'enable_public_sharing' => 'getEnablePublicSharing',
        'blocked_media_folders' => 'getBlockedMediaFolders',
        'blocked_channels' => 'getBlockedChannels',
        'remote_client_bitrate_limit' => 'getRemoteClientBitrateLimit',
        'authentication_provider_id' => 'getAuthenticationProviderId',
        'password_reset_provider_id' => 'getPasswordResetProviderId',
        'sync_play_access' => 'getSyncPlayAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_administrator', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('max_parental_rating', $data ?? [], null);
        $this->setIfExists('blocked_tags', $data ?? [], null);
        $this->setIfExists('enable_user_preference_access', $data ?? [], null);
        $this->setIfExists('access_schedules', $data ?? [], null);
        $this->setIfExists('block_unrated_items', $data ?? [], null);
        $this->setIfExists('enable_remote_control_of_other_users', $data ?? [], null);
        $this->setIfExists('enable_shared_device_control', $data ?? [], null);
        $this->setIfExists('enable_remote_access', $data ?? [], null);
        $this->setIfExists('enable_live_tv_management', $data ?? [], null);
        $this->setIfExists('enable_live_tv_access', $data ?? [], null);
        $this->setIfExists('enable_media_playback', $data ?? [], null);
        $this->setIfExists('enable_audio_playback_transcoding', $data ?? [], null);
        $this->setIfExists('enable_video_playback_transcoding', $data ?? [], null);
        $this->setIfExists('enable_playback_remuxing', $data ?? [], null);
        $this->setIfExists('force_remote_source_transcoding', $data ?? [], null);
        $this->setIfExists('enable_content_deletion', $data ?? [], null);
        $this->setIfExists('enable_content_deletion_from_folders', $data ?? [], null);
        $this->setIfExists('enable_content_downloading', $data ?? [], null);
        $this->setIfExists('enable_sync_transcoding', $data ?? [], null);
        $this->setIfExists('enable_media_conversion', $data ?? [], null);
        $this->setIfExists('enabled_devices', $data ?? [], null);
        $this->setIfExists('enable_all_devices', $data ?? [], null);
        $this->setIfExists('enabled_channels', $data ?? [], null);
        $this->setIfExists('enable_all_channels', $data ?? [], null);
        $this->setIfExists('enabled_folders', $data ?? [], null);
        $this->setIfExists('enable_all_folders', $data ?? [], null);
        $this->setIfExists('invalid_login_attempt_count', $data ?? [], null);
        $this->setIfExists('login_attempts_before_lockout', $data ?? [], null);
        $this->setIfExists('max_active_sessions', $data ?? [], null);
        $this->setIfExists('enable_public_sharing', $data ?? [], null);
        $this->setIfExists('blocked_media_folders', $data ?? [], null);
        $this->setIfExists('blocked_channels', $data ?? [], null);
        $this->setIfExists('remote_client_bitrate_limit', $data ?? [], null);
        $this->setIfExists('authentication_provider_id', $data ?? [], null);
        $this->setIfExists('password_reset_provider_id', $data ?? [], null);
        $this->setIfExists('sync_play_access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_administrator
     *
     * @return bool|null
     */
    public function getIsAdministrator()
    {
        return $this->container['is_administrator'];
    }

    /**
     * Sets is_administrator
     *
     * @param bool|null $is_administrator Gets or sets a value indicating whether this instance is administrator.
     *
     * @return self
     */
    public function setIsAdministrator($is_administrator)
    {
        if (is_null($is_administrator)) {
            throw new \InvalidArgumentException('non-nullable is_administrator cannot be null');
        }
        $this->container['is_administrator'] = $is_administrator;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden Gets or sets a value indicating whether this instance is hidden.
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled Gets or sets a value indicating whether this instance is disabled.
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets max_parental_rating
     *
     * @return int|null
     */
    public function getMaxParentalRating()
    {
        return $this->container['max_parental_rating'];
    }

    /**
     * Sets max_parental_rating
     *
     * @param int|null $max_parental_rating Gets or sets the max parental rating.
     *
     * @return self
     */
    public function setMaxParentalRating($max_parental_rating)
    {
        if (is_null($max_parental_rating)) {
            array_push($this->openAPINullablesSetToNull, 'max_parental_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_parental_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_parental_rating'] = $max_parental_rating;

        return $this;
    }

    /**
     * Gets blocked_tags
     *
     * @return string[]|null
     */
    public function getBlockedTags()
    {
        return $this->container['blocked_tags'];
    }

    /**
     * Sets blocked_tags
     *
     * @param string[]|null $blocked_tags blocked_tags
     *
     * @return self
     */
    public function setBlockedTags($blocked_tags)
    {
        if (is_null($blocked_tags)) {
            array_push($this->openAPINullablesSetToNull, 'blocked_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blocked_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blocked_tags'] = $blocked_tags;

        return $this;
    }

    /**
     * Gets enable_user_preference_access
     *
     * @return bool|null
     */
    public function getEnableUserPreferenceAccess()
    {
        return $this->container['enable_user_preference_access'];
    }

    /**
     * Sets enable_user_preference_access
     *
     * @param bool|null $enable_user_preference_access enable_user_preference_access
     *
     * @return self
     */
    public function setEnableUserPreferenceAccess($enable_user_preference_access)
    {
        if (is_null($enable_user_preference_access)) {
            throw new \InvalidArgumentException('non-nullable enable_user_preference_access cannot be null');
        }
        $this->container['enable_user_preference_access'] = $enable_user_preference_access;

        return $this;
    }

    /**
     * Gets access_schedules
     *
     * @return \OpenAPI\Client\Model\AccessSchedule[]|null
     */
    public function getAccessSchedules()
    {
        return $this->container['access_schedules'];
    }

    /**
     * Sets access_schedules
     *
     * @param \OpenAPI\Client\Model\AccessSchedule[]|null $access_schedules access_schedules
     *
     * @return self
     */
    public function setAccessSchedules($access_schedules)
    {
        if (is_null($access_schedules)) {
            array_push($this->openAPINullablesSetToNull, 'access_schedules');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_schedules', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_schedules'] = $access_schedules;

        return $this;
    }

    /**
     * Gets block_unrated_items
     *
     * @return \OpenAPI\Client\Model\UnratedItem[]|null
     */
    public function getBlockUnratedItems()
    {
        return $this->container['block_unrated_items'];
    }

    /**
     * Sets block_unrated_items
     *
     * @param \OpenAPI\Client\Model\UnratedItem[]|null $block_unrated_items block_unrated_items
     *
     * @return self
     */
    public function setBlockUnratedItems($block_unrated_items)
    {
        if (is_null($block_unrated_items)) {
            array_push($this->openAPINullablesSetToNull, 'block_unrated_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_unrated_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_unrated_items'] = $block_unrated_items;

        return $this;
    }

    /**
     * Gets enable_remote_control_of_other_users
     *
     * @return bool|null
     */
    public function getEnableRemoteControlOfOtherUsers()
    {
        return $this->container['enable_remote_control_of_other_users'];
    }

    /**
     * Sets enable_remote_control_of_other_users
     *
     * @param bool|null $enable_remote_control_of_other_users enable_remote_control_of_other_users
     *
     * @return self
     */
    public function setEnableRemoteControlOfOtherUsers($enable_remote_control_of_other_users)
    {
        if (is_null($enable_remote_control_of_other_users)) {
            throw new \InvalidArgumentException('non-nullable enable_remote_control_of_other_users cannot be null');
        }
        $this->container['enable_remote_control_of_other_users'] = $enable_remote_control_of_other_users;

        return $this;
    }

    /**
     * Gets enable_shared_device_control
     *
     * @return bool|null
     */
    public function getEnableSharedDeviceControl()
    {
        return $this->container['enable_shared_device_control'];
    }

    /**
     * Sets enable_shared_device_control
     *
     * @param bool|null $enable_shared_device_control enable_shared_device_control
     *
     * @return self
     */
    public function setEnableSharedDeviceControl($enable_shared_device_control)
    {
        if (is_null($enable_shared_device_control)) {
            throw new \InvalidArgumentException('non-nullable enable_shared_device_control cannot be null');
        }
        $this->container['enable_shared_device_control'] = $enable_shared_device_control;

        return $this;
    }

    /**
     * Gets enable_remote_access
     *
     * @return bool|null
     */
    public function getEnableRemoteAccess()
    {
        return $this->container['enable_remote_access'];
    }

    /**
     * Sets enable_remote_access
     *
     * @param bool|null $enable_remote_access enable_remote_access
     *
     * @return self
     */
    public function setEnableRemoteAccess($enable_remote_access)
    {
        if (is_null($enable_remote_access)) {
            throw new \InvalidArgumentException('non-nullable enable_remote_access cannot be null');
        }
        $this->container['enable_remote_access'] = $enable_remote_access;

        return $this;
    }

    /**
     * Gets enable_live_tv_management
     *
     * @return bool|null
     */
    public function getEnableLiveTvManagement()
    {
        return $this->container['enable_live_tv_management'];
    }

    /**
     * Sets enable_live_tv_management
     *
     * @param bool|null $enable_live_tv_management enable_live_tv_management
     *
     * @return self
     */
    public function setEnableLiveTvManagement($enable_live_tv_management)
    {
        if (is_null($enable_live_tv_management)) {
            throw new \InvalidArgumentException('non-nullable enable_live_tv_management cannot be null');
        }
        $this->container['enable_live_tv_management'] = $enable_live_tv_management;

        return $this;
    }

    /**
     * Gets enable_live_tv_access
     *
     * @return bool|null
     */
    public function getEnableLiveTvAccess()
    {
        return $this->container['enable_live_tv_access'];
    }

    /**
     * Sets enable_live_tv_access
     *
     * @param bool|null $enable_live_tv_access enable_live_tv_access
     *
     * @return self
     */
    public function setEnableLiveTvAccess($enable_live_tv_access)
    {
        if (is_null($enable_live_tv_access)) {
            throw new \InvalidArgumentException('non-nullable enable_live_tv_access cannot be null');
        }
        $this->container['enable_live_tv_access'] = $enable_live_tv_access;

        return $this;
    }

    /**
     * Gets enable_media_playback
     *
     * @return bool|null
     */
    public function getEnableMediaPlayback()
    {
        return $this->container['enable_media_playback'];
    }

    /**
     * Sets enable_media_playback
     *
     * @param bool|null $enable_media_playback enable_media_playback
     *
     * @return self
     */
    public function setEnableMediaPlayback($enable_media_playback)
    {
        if (is_null($enable_media_playback)) {
            throw new \InvalidArgumentException('non-nullable enable_media_playback cannot be null');
        }
        $this->container['enable_media_playback'] = $enable_media_playback;

        return $this;
    }

    /**
     * Gets enable_audio_playback_transcoding
     *
     * @return bool|null
     */
    public function getEnableAudioPlaybackTranscoding()
    {
        return $this->container['enable_audio_playback_transcoding'];
    }

    /**
     * Sets enable_audio_playback_transcoding
     *
     * @param bool|null $enable_audio_playback_transcoding enable_audio_playback_transcoding
     *
     * @return self
     */
    public function setEnableAudioPlaybackTranscoding($enable_audio_playback_transcoding)
    {
        if (is_null($enable_audio_playback_transcoding)) {
            throw new \InvalidArgumentException('non-nullable enable_audio_playback_transcoding cannot be null');
        }
        $this->container['enable_audio_playback_transcoding'] = $enable_audio_playback_transcoding;

        return $this;
    }

    /**
     * Gets enable_video_playback_transcoding
     *
     * @return bool|null
     */
    public function getEnableVideoPlaybackTranscoding()
    {
        return $this->container['enable_video_playback_transcoding'];
    }

    /**
     * Sets enable_video_playback_transcoding
     *
     * @param bool|null $enable_video_playback_transcoding enable_video_playback_transcoding
     *
     * @return self
     */
    public function setEnableVideoPlaybackTranscoding($enable_video_playback_transcoding)
    {
        if (is_null($enable_video_playback_transcoding)) {
            throw new \InvalidArgumentException('non-nullable enable_video_playback_transcoding cannot be null');
        }
        $this->container['enable_video_playback_transcoding'] = $enable_video_playback_transcoding;

        return $this;
    }

    /**
     * Gets enable_playback_remuxing
     *
     * @return bool|null
     */
    public function getEnablePlaybackRemuxing()
    {
        return $this->container['enable_playback_remuxing'];
    }

    /**
     * Sets enable_playback_remuxing
     *
     * @param bool|null $enable_playback_remuxing enable_playback_remuxing
     *
     * @return self
     */
    public function setEnablePlaybackRemuxing($enable_playback_remuxing)
    {
        if (is_null($enable_playback_remuxing)) {
            throw new \InvalidArgumentException('non-nullable enable_playback_remuxing cannot be null');
        }
        $this->container['enable_playback_remuxing'] = $enable_playback_remuxing;

        return $this;
    }

    /**
     * Gets force_remote_source_transcoding
     *
     * @return bool|null
     */
    public function getForceRemoteSourceTranscoding()
    {
        return $this->container['force_remote_source_transcoding'];
    }

    /**
     * Sets force_remote_source_transcoding
     *
     * @param bool|null $force_remote_source_transcoding force_remote_source_transcoding
     *
     * @return self
     */
    public function setForceRemoteSourceTranscoding($force_remote_source_transcoding)
    {
        if (is_null($force_remote_source_transcoding)) {
            throw new \InvalidArgumentException('non-nullable force_remote_source_transcoding cannot be null');
        }
        $this->container['force_remote_source_transcoding'] = $force_remote_source_transcoding;

        return $this;
    }

    /**
     * Gets enable_content_deletion
     *
     * @return bool|null
     */
    public function getEnableContentDeletion()
    {
        return $this->container['enable_content_deletion'];
    }

    /**
     * Sets enable_content_deletion
     *
     * @param bool|null $enable_content_deletion enable_content_deletion
     *
     * @return self
     */
    public function setEnableContentDeletion($enable_content_deletion)
    {
        if (is_null($enable_content_deletion)) {
            throw new \InvalidArgumentException('non-nullable enable_content_deletion cannot be null');
        }
        $this->container['enable_content_deletion'] = $enable_content_deletion;

        return $this;
    }

    /**
     * Gets enable_content_deletion_from_folders
     *
     * @return string[]|null
     */
    public function getEnableContentDeletionFromFolders()
    {
        return $this->container['enable_content_deletion_from_folders'];
    }

    /**
     * Sets enable_content_deletion_from_folders
     *
     * @param string[]|null $enable_content_deletion_from_folders enable_content_deletion_from_folders
     *
     * @return self
     */
    public function setEnableContentDeletionFromFolders($enable_content_deletion_from_folders)
    {
        if (is_null($enable_content_deletion_from_folders)) {
            array_push($this->openAPINullablesSetToNull, 'enable_content_deletion_from_folders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_content_deletion_from_folders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_content_deletion_from_folders'] = $enable_content_deletion_from_folders;

        return $this;
    }

    /**
     * Gets enable_content_downloading
     *
     * @return bool|null
     */
    public function getEnableContentDownloading()
    {
        return $this->container['enable_content_downloading'];
    }

    /**
     * Sets enable_content_downloading
     *
     * @param bool|null $enable_content_downloading enable_content_downloading
     *
     * @return self
     */
    public function setEnableContentDownloading($enable_content_downloading)
    {
        if (is_null($enable_content_downloading)) {
            throw new \InvalidArgumentException('non-nullable enable_content_downloading cannot be null');
        }
        $this->container['enable_content_downloading'] = $enable_content_downloading;

        return $this;
    }

    /**
     * Gets enable_sync_transcoding
     *
     * @return bool|null
     */
    public function getEnableSyncTranscoding()
    {
        return $this->container['enable_sync_transcoding'];
    }

    /**
     * Sets enable_sync_transcoding
     *
     * @param bool|null $enable_sync_transcoding Gets or sets a value indicating whether [enable synchronize].
     *
     * @return self
     */
    public function setEnableSyncTranscoding($enable_sync_transcoding)
    {
        if (is_null($enable_sync_transcoding)) {
            throw new \InvalidArgumentException('non-nullable enable_sync_transcoding cannot be null');
        }
        $this->container['enable_sync_transcoding'] = $enable_sync_transcoding;

        return $this;
    }

    /**
     * Gets enable_media_conversion
     *
     * @return bool|null
     */
    public function getEnableMediaConversion()
    {
        return $this->container['enable_media_conversion'];
    }

    /**
     * Sets enable_media_conversion
     *
     * @param bool|null $enable_media_conversion enable_media_conversion
     *
     * @return self
     */
    public function setEnableMediaConversion($enable_media_conversion)
    {
        if (is_null($enable_media_conversion)) {
            throw new \InvalidArgumentException('non-nullable enable_media_conversion cannot be null');
        }
        $this->container['enable_media_conversion'] = $enable_media_conversion;

        return $this;
    }

    /**
     * Gets enabled_devices
     *
     * @return string[]|null
     */
    public function getEnabledDevices()
    {
        return $this->container['enabled_devices'];
    }

    /**
     * Sets enabled_devices
     *
     * @param string[]|null $enabled_devices enabled_devices
     *
     * @return self
     */
    public function setEnabledDevices($enabled_devices)
    {
        if (is_null($enabled_devices)) {
            array_push($this->openAPINullablesSetToNull, 'enabled_devices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enabled_devices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enabled_devices'] = $enabled_devices;

        return $this;
    }

    /**
     * Gets enable_all_devices
     *
     * @return bool|null
     */
    public function getEnableAllDevices()
    {
        return $this->container['enable_all_devices'];
    }

    /**
     * Sets enable_all_devices
     *
     * @param bool|null $enable_all_devices enable_all_devices
     *
     * @return self
     */
    public function setEnableAllDevices($enable_all_devices)
    {
        if (is_null($enable_all_devices)) {
            throw new \InvalidArgumentException('non-nullable enable_all_devices cannot be null');
        }
        $this->container['enable_all_devices'] = $enable_all_devices;

        return $this;
    }

    /**
     * Gets enabled_channels
     *
     * @return string[]|null
     */
    public function getEnabledChannels()
    {
        return $this->container['enabled_channels'];
    }

    /**
     * Sets enabled_channels
     *
     * @param string[]|null $enabled_channels enabled_channels
     *
     * @return self
     */
    public function setEnabledChannels($enabled_channels)
    {
        if (is_null($enabled_channels)) {
            array_push($this->openAPINullablesSetToNull, 'enabled_channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enabled_channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enabled_channels'] = $enabled_channels;

        return $this;
    }

    /**
     * Gets enable_all_channels
     *
     * @return bool|null
     */
    public function getEnableAllChannels()
    {
        return $this->container['enable_all_channels'];
    }

    /**
     * Sets enable_all_channels
     *
     * @param bool|null $enable_all_channels enable_all_channels
     *
     * @return self
     */
    public function setEnableAllChannels($enable_all_channels)
    {
        if (is_null($enable_all_channels)) {
            throw new \InvalidArgumentException('non-nullable enable_all_channels cannot be null');
        }
        $this->container['enable_all_channels'] = $enable_all_channels;

        return $this;
    }

    /**
     * Gets enabled_folders
     *
     * @return string[]|null
     */
    public function getEnabledFolders()
    {
        return $this->container['enabled_folders'];
    }

    /**
     * Sets enabled_folders
     *
     * @param string[]|null $enabled_folders enabled_folders
     *
     * @return self
     */
    public function setEnabledFolders($enabled_folders)
    {
        if (is_null($enabled_folders)) {
            array_push($this->openAPINullablesSetToNull, 'enabled_folders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enabled_folders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enabled_folders'] = $enabled_folders;

        return $this;
    }

    /**
     * Gets enable_all_folders
     *
     * @return bool|null
     */
    public function getEnableAllFolders()
    {
        return $this->container['enable_all_folders'];
    }

    /**
     * Sets enable_all_folders
     *
     * @param bool|null $enable_all_folders enable_all_folders
     *
     * @return self
     */
    public function setEnableAllFolders($enable_all_folders)
    {
        if (is_null($enable_all_folders)) {
            throw new \InvalidArgumentException('non-nullable enable_all_folders cannot be null');
        }
        $this->container['enable_all_folders'] = $enable_all_folders;

        return $this;
    }

    /**
     * Gets invalid_login_attempt_count
     *
     * @return int|null
     */
    public function getInvalidLoginAttemptCount()
    {
        return $this->container['invalid_login_attempt_count'];
    }

    /**
     * Sets invalid_login_attempt_count
     *
     * @param int|null $invalid_login_attempt_count invalid_login_attempt_count
     *
     * @return self
     */
    public function setInvalidLoginAttemptCount($invalid_login_attempt_count)
    {
        if (is_null($invalid_login_attempt_count)) {
            throw new \InvalidArgumentException('non-nullable invalid_login_attempt_count cannot be null');
        }
        $this->container['invalid_login_attempt_count'] = $invalid_login_attempt_count;

        return $this;
    }

    /**
     * Gets login_attempts_before_lockout
     *
     * @return int|null
     */
    public function getLoginAttemptsBeforeLockout()
    {
        return $this->container['login_attempts_before_lockout'];
    }

    /**
     * Sets login_attempts_before_lockout
     *
     * @param int|null $login_attempts_before_lockout login_attempts_before_lockout
     *
     * @return self
     */
    public function setLoginAttemptsBeforeLockout($login_attempts_before_lockout)
    {
        if (is_null($login_attempts_before_lockout)) {
            throw new \InvalidArgumentException('non-nullable login_attempts_before_lockout cannot be null');
        }
        $this->container['login_attempts_before_lockout'] = $login_attempts_before_lockout;

        return $this;
    }

    /**
     * Gets max_active_sessions
     *
     * @return int|null
     */
    public function getMaxActiveSessions()
    {
        return $this->container['max_active_sessions'];
    }

    /**
     * Sets max_active_sessions
     *
     * @param int|null $max_active_sessions max_active_sessions
     *
     * @return self
     */
    public function setMaxActiveSessions($max_active_sessions)
    {
        if (is_null($max_active_sessions)) {
            throw new \InvalidArgumentException('non-nullable max_active_sessions cannot be null');
        }
        $this->container['max_active_sessions'] = $max_active_sessions;

        return $this;
    }

    /**
     * Gets enable_public_sharing
     *
     * @return bool|null
     */
    public function getEnablePublicSharing()
    {
        return $this->container['enable_public_sharing'];
    }

    /**
     * Sets enable_public_sharing
     *
     * @param bool|null $enable_public_sharing enable_public_sharing
     *
     * @return self
     */
    public function setEnablePublicSharing($enable_public_sharing)
    {
        if (is_null($enable_public_sharing)) {
            throw new \InvalidArgumentException('non-nullable enable_public_sharing cannot be null');
        }
        $this->container['enable_public_sharing'] = $enable_public_sharing;

        return $this;
    }

    /**
     * Gets blocked_media_folders
     *
     * @return string[]|null
     */
    public function getBlockedMediaFolders()
    {
        return $this->container['blocked_media_folders'];
    }

    /**
     * Sets blocked_media_folders
     *
     * @param string[]|null $blocked_media_folders blocked_media_folders
     *
     * @return self
     */
    public function setBlockedMediaFolders($blocked_media_folders)
    {
        if (is_null($blocked_media_folders)) {
            array_push($this->openAPINullablesSetToNull, 'blocked_media_folders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blocked_media_folders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blocked_media_folders'] = $blocked_media_folders;

        return $this;
    }

    /**
     * Gets blocked_channels
     *
     * @return string[]|null
     */
    public function getBlockedChannels()
    {
        return $this->container['blocked_channels'];
    }

    /**
     * Sets blocked_channels
     *
     * @param string[]|null $blocked_channels blocked_channels
     *
     * @return self
     */
    public function setBlockedChannels($blocked_channels)
    {
        if (is_null($blocked_channels)) {
            array_push($this->openAPINullablesSetToNull, 'blocked_channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blocked_channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blocked_channels'] = $blocked_channels;

        return $this;
    }

    /**
     * Gets remote_client_bitrate_limit
     *
     * @return int|null
     */
    public function getRemoteClientBitrateLimit()
    {
        return $this->container['remote_client_bitrate_limit'];
    }

    /**
     * Sets remote_client_bitrate_limit
     *
     * @param int|null $remote_client_bitrate_limit remote_client_bitrate_limit
     *
     * @return self
     */
    public function setRemoteClientBitrateLimit($remote_client_bitrate_limit)
    {
        if (is_null($remote_client_bitrate_limit)) {
            throw new \InvalidArgumentException('non-nullable remote_client_bitrate_limit cannot be null');
        }
        $this->container['remote_client_bitrate_limit'] = $remote_client_bitrate_limit;

        return $this;
    }

    /**
     * Gets authentication_provider_id
     *
     * @return string|null
     */
    public function getAuthenticationProviderId()
    {
        return $this->container['authentication_provider_id'];
    }

    /**
     * Sets authentication_provider_id
     *
     * @param string|null $authentication_provider_id authentication_provider_id
     *
     * @return self
     */
    public function setAuthenticationProviderId($authentication_provider_id)
    {
        if (is_null($authentication_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'authentication_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authentication_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authentication_provider_id'] = $authentication_provider_id;

        return $this;
    }

    /**
     * Gets password_reset_provider_id
     *
     * @return string|null
     */
    public function getPasswordResetProviderId()
    {
        return $this->container['password_reset_provider_id'];
    }

    /**
     * Sets password_reset_provider_id
     *
     * @param string|null $password_reset_provider_id password_reset_provider_id
     *
     * @return self
     */
    public function setPasswordResetProviderId($password_reset_provider_id)
    {
        if (is_null($password_reset_provider_id)) {
            array_push($this->openAPINullablesSetToNull, 'password_reset_provider_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password_reset_provider_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password_reset_provider_id'] = $password_reset_provider_id;

        return $this;
    }

    /**
     * Gets sync_play_access
     *
     * @return \OpenAPI\Client\Model\SyncPlayUserAccessType|null
     */
    public function getSyncPlayAccess()
    {
        return $this->container['sync_play_access'];
    }

    /**
     * Sets sync_play_access
     *
     * @param \OpenAPI\Client\Model\SyncPlayUserAccessType|null $sync_play_access sync_play_access
     *
     * @return self
     */
    public function setSyncPlayAccess($sync_play_access)
    {
        if (is_null($sync_play_access)) {
            throw new \InvalidArgumentException('non-nullable sync_play_access cannot be null');
        }
        $this->container['sync_play_access'] = $sync_play_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


