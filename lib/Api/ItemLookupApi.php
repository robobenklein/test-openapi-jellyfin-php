<?php
/**
 * ItemLookupApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ItemLookupApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemLookupApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'applySearchCriteria' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getBookRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getBoxSetRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getExternalIdInfos' => [
            'application/json',
        ],
        'getMovieRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getMusicAlbumRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getMusicArtistRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getMusicVideoRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getPersonRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getSeriesRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getTrailerRemoteSearchResults' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation applySearchCriteria
     *
     * Applies search criteria to an item and refreshes metadata.
     *
     * @param  string $item_id Item id. (required)
     * @param  \OpenAPI\Client\Model\ApplySearchCriteriaRequest $apply_search_criteria_request The remote search result. (required)
     * @param  bool $replace_all_images Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applySearchCriteria'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function applySearchCriteria($item_id, $apply_search_criteria_request, $replace_all_images = true, string $contentType = self::contentTypes['applySearchCriteria'][0])
    {
        $this->applySearchCriteriaWithHttpInfo($item_id, $apply_search_criteria_request, $replace_all_images, $contentType);
    }

    /**
     * Operation applySearchCriteriaWithHttpInfo
     *
     * Applies search criteria to an item and refreshes metadata.
     *
     * @param  string $item_id Item id. (required)
     * @param  \OpenAPI\Client\Model\ApplySearchCriteriaRequest $apply_search_criteria_request The remote search result. (required)
     * @param  bool $replace_all_images Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applySearchCriteria'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function applySearchCriteriaWithHttpInfo($item_id, $apply_search_criteria_request, $replace_all_images = true, string $contentType = self::contentTypes['applySearchCriteria'][0])
    {
        $request = $this->applySearchCriteriaRequest($item_id, $apply_search_criteria_request, $replace_all_images, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation applySearchCriteriaAsync
     *
     * Applies search criteria to an item and refreshes metadata.
     *
     * @param  string $item_id Item id. (required)
     * @param  \OpenAPI\Client\Model\ApplySearchCriteriaRequest $apply_search_criteria_request The remote search result. (required)
     * @param  bool $replace_all_images Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applySearchCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applySearchCriteriaAsync($item_id, $apply_search_criteria_request, $replace_all_images = true, string $contentType = self::contentTypes['applySearchCriteria'][0])
    {
        return $this->applySearchCriteriaAsyncWithHttpInfo($item_id, $apply_search_criteria_request, $replace_all_images, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applySearchCriteriaAsyncWithHttpInfo
     *
     * Applies search criteria to an item and refreshes metadata.
     *
     * @param  string $item_id Item id. (required)
     * @param  \OpenAPI\Client\Model\ApplySearchCriteriaRequest $apply_search_criteria_request The remote search result. (required)
     * @param  bool $replace_all_images Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applySearchCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applySearchCriteriaAsyncWithHttpInfo($item_id, $apply_search_criteria_request, $replace_all_images = true, string $contentType = self::contentTypes['applySearchCriteria'][0])
    {
        $returnType = '';
        $request = $this->applySearchCriteriaRequest($item_id, $apply_search_criteria_request, $replace_all_images, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applySearchCriteria'
     *
     * @param  string $item_id Item id. (required)
     * @param  \OpenAPI\Client\Model\ApplySearchCriteriaRequest $apply_search_criteria_request The remote search result. (required)
     * @param  bool $replace_all_images Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applySearchCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applySearchCriteriaRequest($item_id, $apply_search_criteria_request, $replace_all_images = true, string $contentType = self::contentTypes['applySearchCriteria'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling applySearchCriteria'
            );
        }

        // verify the required parameter 'apply_search_criteria_request' is set
        if ($apply_search_criteria_request === null || (is_array($apply_search_criteria_request) && count($apply_search_criteria_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apply_search_criteria_request when calling applySearchCriteria'
            );
        }



        $resourcePath = '/Items/RemoteSearch/Apply/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $replace_all_images,
            'replaceAllImages', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apply_search_criteria_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apply_search_criteria_request));
            } else {
                $httpBody = $apply_search_criteria_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookRemoteSearchResults
     *
     * Get book remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBookRemoteSearchResultsRequest $get_book_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getBookRemoteSearchResults($get_book_remote_search_results_request, string $contentType = self::contentTypes['getBookRemoteSearchResults'][0])
    {
        list($response) = $this->getBookRemoteSearchResultsWithHttpInfo($get_book_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getBookRemoteSearchResultsWithHttpInfo
     *
     * Get book remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBookRemoteSearchResultsRequest $get_book_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookRemoteSearchResultsWithHttpInfo($get_book_remote_search_results_request, string $contentType = self::contentTypes['getBookRemoteSearchResults'][0])
    {
        $request = $this->getBookRemoteSearchResultsRequest($get_book_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookRemoteSearchResultsAsync
     *
     * Get book remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBookRemoteSearchResultsRequest $get_book_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookRemoteSearchResultsAsync($get_book_remote_search_results_request, string $contentType = self::contentTypes['getBookRemoteSearchResults'][0])
    {
        return $this->getBookRemoteSearchResultsAsyncWithHttpInfo($get_book_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get book remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBookRemoteSearchResultsRequest $get_book_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookRemoteSearchResultsAsyncWithHttpInfo($get_book_remote_search_results_request, string $contentType = self::contentTypes['getBookRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getBookRemoteSearchResultsRequest($get_book_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetBookRemoteSearchResultsRequest $get_book_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBookRemoteSearchResultsRequest($get_book_remote_search_results_request, string $contentType = self::contentTypes['getBookRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_book_remote_search_results_request' is set
        if ($get_book_remote_search_results_request === null || (is_array($get_book_remote_search_results_request) && count($get_book_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_book_remote_search_results_request when calling getBookRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/Book';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_book_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_book_remote_search_results_request));
            } else {
                $httpBody = $get_book_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBoxSetRemoteSearchResults
     *
     * Get box set remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBoxSetRemoteSearchResultsRequest $get_box_set_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBoxSetRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getBoxSetRemoteSearchResults($get_box_set_remote_search_results_request, string $contentType = self::contentTypes['getBoxSetRemoteSearchResults'][0])
    {
        list($response) = $this->getBoxSetRemoteSearchResultsWithHttpInfo($get_box_set_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getBoxSetRemoteSearchResultsWithHttpInfo
     *
     * Get box set remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBoxSetRemoteSearchResultsRequest $get_box_set_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBoxSetRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBoxSetRemoteSearchResultsWithHttpInfo($get_box_set_remote_search_results_request, string $contentType = self::contentTypes['getBoxSetRemoteSearchResults'][0])
    {
        $request = $this->getBoxSetRemoteSearchResultsRequest($get_box_set_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBoxSetRemoteSearchResultsAsync
     *
     * Get box set remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBoxSetRemoteSearchResultsRequest $get_box_set_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBoxSetRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBoxSetRemoteSearchResultsAsync($get_box_set_remote_search_results_request, string $contentType = self::contentTypes['getBoxSetRemoteSearchResults'][0])
    {
        return $this->getBoxSetRemoteSearchResultsAsyncWithHttpInfo($get_box_set_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBoxSetRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get box set remote search.
     *
     * @param  \OpenAPI\Client\Model\GetBoxSetRemoteSearchResultsRequest $get_box_set_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBoxSetRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBoxSetRemoteSearchResultsAsyncWithHttpInfo($get_box_set_remote_search_results_request, string $contentType = self::contentTypes['getBoxSetRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getBoxSetRemoteSearchResultsRequest($get_box_set_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBoxSetRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetBoxSetRemoteSearchResultsRequest $get_box_set_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBoxSetRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBoxSetRemoteSearchResultsRequest($get_box_set_remote_search_results_request, string $contentType = self::contentTypes['getBoxSetRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_box_set_remote_search_results_request' is set
        if ($get_box_set_remote_search_results_request === null || (is_array($get_box_set_remote_search_results_request) && count($get_box_set_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_box_set_remote_search_results_request when calling getBoxSetRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/BoxSet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_box_set_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_box_set_remote_search_results_request));
            } else {
                $httpBody = $get_box_set_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalIdInfos
     *
     * Get the item&#39;s external id info.
     *
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExternalIdInfos'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExternalIdInfo[]|\OpenAPI\Client\Model\ProblemDetails
     */
    public function getExternalIdInfos($item_id, string $contentType = self::contentTypes['getExternalIdInfos'][0])
    {
        list($response) = $this->getExternalIdInfosWithHttpInfo($item_id, $contentType);
        return $response;
    }

    /**
     * Operation getExternalIdInfosWithHttpInfo
     *
     * Get the item&#39;s external id info.
     *
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExternalIdInfos'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExternalIdInfo[]|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalIdInfosWithHttpInfo($item_id, string $contentType = self::contentTypes['getExternalIdInfos'][0])
    {
        $request = $this->getExternalIdInfosRequest($item_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExternalIdInfo[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExternalIdInfo[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExternalIdInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExternalIdInfo[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExternalIdInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalIdInfosAsync
     *
     * Get the item&#39;s external id info.
     *
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExternalIdInfos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalIdInfosAsync($item_id, string $contentType = self::contentTypes['getExternalIdInfos'][0])
    {
        return $this->getExternalIdInfosAsyncWithHttpInfo($item_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalIdInfosAsyncWithHttpInfo
     *
     * Get the item&#39;s external id info.
     *
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExternalIdInfos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalIdInfosAsyncWithHttpInfo($item_id, string $contentType = self::contentTypes['getExternalIdInfos'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExternalIdInfo[]';
        $request = $this->getExternalIdInfosRequest($item_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalIdInfos'
     *
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExternalIdInfos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExternalIdInfosRequest($item_id, string $contentType = self::contentTypes['getExternalIdInfos'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getExternalIdInfos'
            );
        }


        $resourcePath = '/Items/{itemId}/ExternalIdInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMovieRemoteSearchResults
     *
     * Get movie remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMovieRemoteSearchResultsRequest $get_movie_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMovieRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getMovieRemoteSearchResults($get_movie_remote_search_results_request, string $contentType = self::contentTypes['getMovieRemoteSearchResults'][0])
    {
        list($response) = $this->getMovieRemoteSearchResultsWithHttpInfo($get_movie_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getMovieRemoteSearchResultsWithHttpInfo
     *
     * Get movie remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMovieRemoteSearchResultsRequest $get_movie_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMovieRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMovieRemoteSearchResultsWithHttpInfo($get_movie_remote_search_results_request, string $contentType = self::contentTypes['getMovieRemoteSearchResults'][0])
    {
        $request = $this->getMovieRemoteSearchResultsRequest($get_movie_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMovieRemoteSearchResultsAsync
     *
     * Get movie remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMovieRemoteSearchResultsRequest $get_movie_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMovieRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMovieRemoteSearchResultsAsync($get_movie_remote_search_results_request, string $contentType = self::contentTypes['getMovieRemoteSearchResults'][0])
    {
        return $this->getMovieRemoteSearchResultsAsyncWithHttpInfo($get_movie_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMovieRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get movie remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMovieRemoteSearchResultsRequest $get_movie_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMovieRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMovieRemoteSearchResultsAsyncWithHttpInfo($get_movie_remote_search_results_request, string $contentType = self::contentTypes['getMovieRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getMovieRemoteSearchResultsRequest($get_movie_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMovieRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetMovieRemoteSearchResultsRequest $get_movie_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMovieRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMovieRemoteSearchResultsRequest($get_movie_remote_search_results_request, string $contentType = self::contentTypes['getMovieRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_movie_remote_search_results_request' is set
        if ($get_movie_remote_search_results_request === null || (is_array($get_movie_remote_search_results_request) && count($get_movie_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_movie_remote_search_results_request when calling getMovieRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/Movie';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_movie_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_movie_remote_search_results_request));
            } else {
                $httpBody = $get_movie_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMusicAlbumRemoteSearchResults
     *
     * Get music album remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicAlbumRemoteSearchResultsRequest $get_music_album_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicAlbumRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getMusicAlbumRemoteSearchResults($get_music_album_remote_search_results_request, string $contentType = self::contentTypes['getMusicAlbumRemoteSearchResults'][0])
    {
        list($response) = $this->getMusicAlbumRemoteSearchResultsWithHttpInfo($get_music_album_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getMusicAlbumRemoteSearchResultsWithHttpInfo
     *
     * Get music album remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicAlbumRemoteSearchResultsRequest $get_music_album_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicAlbumRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMusicAlbumRemoteSearchResultsWithHttpInfo($get_music_album_remote_search_results_request, string $contentType = self::contentTypes['getMusicAlbumRemoteSearchResults'][0])
    {
        $request = $this->getMusicAlbumRemoteSearchResultsRequest($get_music_album_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMusicAlbumRemoteSearchResultsAsync
     *
     * Get music album remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicAlbumRemoteSearchResultsRequest $get_music_album_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicAlbumRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicAlbumRemoteSearchResultsAsync($get_music_album_remote_search_results_request, string $contentType = self::contentTypes['getMusicAlbumRemoteSearchResults'][0])
    {
        return $this->getMusicAlbumRemoteSearchResultsAsyncWithHttpInfo($get_music_album_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMusicAlbumRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get music album remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicAlbumRemoteSearchResultsRequest $get_music_album_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicAlbumRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicAlbumRemoteSearchResultsAsyncWithHttpInfo($get_music_album_remote_search_results_request, string $contentType = self::contentTypes['getMusicAlbumRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getMusicAlbumRemoteSearchResultsRequest($get_music_album_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMusicAlbumRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetMusicAlbumRemoteSearchResultsRequest $get_music_album_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicAlbumRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMusicAlbumRemoteSearchResultsRequest($get_music_album_remote_search_results_request, string $contentType = self::contentTypes['getMusicAlbumRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_music_album_remote_search_results_request' is set
        if ($get_music_album_remote_search_results_request === null || (is_array($get_music_album_remote_search_results_request) && count($get_music_album_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_music_album_remote_search_results_request when calling getMusicAlbumRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/MusicAlbum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_music_album_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_music_album_remote_search_results_request));
            } else {
                $httpBody = $get_music_album_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMusicArtistRemoteSearchResults
     *
     * Get music artist remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicArtistRemoteSearchResultsRequest $get_music_artist_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicArtistRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getMusicArtistRemoteSearchResults($get_music_artist_remote_search_results_request, string $contentType = self::contentTypes['getMusicArtistRemoteSearchResults'][0])
    {
        list($response) = $this->getMusicArtistRemoteSearchResultsWithHttpInfo($get_music_artist_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getMusicArtistRemoteSearchResultsWithHttpInfo
     *
     * Get music artist remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicArtistRemoteSearchResultsRequest $get_music_artist_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicArtistRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMusicArtistRemoteSearchResultsWithHttpInfo($get_music_artist_remote_search_results_request, string $contentType = self::contentTypes['getMusicArtistRemoteSearchResults'][0])
    {
        $request = $this->getMusicArtistRemoteSearchResultsRequest($get_music_artist_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMusicArtistRemoteSearchResultsAsync
     *
     * Get music artist remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicArtistRemoteSearchResultsRequest $get_music_artist_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicArtistRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicArtistRemoteSearchResultsAsync($get_music_artist_remote_search_results_request, string $contentType = self::contentTypes['getMusicArtistRemoteSearchResults'][0])
    {
        return $this->getMusicArtistRemoteSearchResultsAsyncWithHttpInfo($get_music_artist_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMusicArtistRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get music artist remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicArtistRemoteSearchResultsRequest $get_music_artist_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicArtistRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicArtistRemoteSearchResultsAsyncWithHttpInfo($get_music_artist_remote_search_results_request, string $contentType = self::contentTypes['getMusicArtistRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getMusicArtistRemoteSearchResultsRequest($get_music_artist_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMusicArtistRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetMusicArtistRemoteSearchResultsRequest $get_music_artist_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicArtistRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMusicArtistRemoteSearchResultsRequest($get_music_artist_remote_search_results_request, string $contentType = self::contentTypes['getMusicArtistRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_music_artist_remote_search_results_request' is set
        if ($get_music_artist_remote_search_results_request === null || (is_array($get_music_artist_remote_search_results_request) && count($get_music_artist_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_music_artist_remote_search_results_request when calling getMusicArtistRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/MusicArtist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_music_artist_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_music_artist_remote_search_results_request));
            } else {
                $httpBody = $get_music_artist_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMusicVideoRemoteSearchResults
     *
     * Get music video remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicVideoRemoteSearchResultsRequest $get_music_video_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicVideoRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getMusicVideoRemoteSearchResults($get_music_video_remote_search_results_request, string $contentType = self::contentTypes['getMusicVideoRemoteSearchResults'][0])
    {
        list($response) = $this->getMusicVideoRemoteSearchResultsWithHttpInfo($get_music_video_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getMusicVideoRemoteSearchResultsWithHttpInfo
     *
     * Get music video remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicVideoRemoteSearchResultsRequest $get_music_video_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicVideoRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMusicVideoRemoteSearchResultsWithHttpInfo($get_music_video_remote_search_results_request, string $contentType = self::contentTypes['getMusicVideoRemoteSearchResults'][0])
    {
        $request = $this->getMusicVideoRemoteSearchResultsRequest($get_music_video_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMusicVideoRemoteSearchResultsAsync
     *
     * Get music video remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicVideoRemoteSearchResultsRequest $get_music_video_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicVideoRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicVideoRemoteSearchResultsAsync($get_music_video_remote_search_results_request, string $contentType = self::contentTypes['getMusicVideoRemoteSearchResults'][0])
    {
        return $this->getMusicVideoRemoteSearchResultsAsyncWithHttpInfo($get_music_video_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMusicVideoRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get music video remote search.
     *
     * @param  \OpenAPI\Client\Model\GetMusicVideoRemoteSearchResultsRequest $get_music_video_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicVideoRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMusicVideoRemoteSearchResultsAsyncWithHttpInfo($get_music_video_remote_search_results_request, string $contentType = self::contentTypes['getMusicVideoRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getMusicVideoRemoteSearchResultsRequest($get_music_video_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMusicVideoRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetMusicVideoRemoteSearchResultsRequest $get_music_video_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMusicVideoRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMusicVideoRemoteSearchResultsRequest($get_music_video_remote_search_results_request, string $contentType = self::contentTypes['getMusicVideoRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_music_video_remote_search_results_request' is set
        if ($get_music_video_remote_search_results_request === null || (is_array($get_music_video_remote_search_results_request) && count($get_music_video_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_music_video_remote_search_results_request when calling getMusicVideoRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/MusicVideo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_music_video_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_music_video_remote_search_results_request));
            } else {
                $httpBody = $get_music_video_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonRemoteSearchResults
     *
     * Get person remote search.
     *
     * @param  \OpenAPI\Client\Model\GetPersonRemoteSearchResultsRequest $get_person_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getPersonRemoteSearchResults($get_person_remote_search_results_request, string $contentType = self::contentTypes['getPersonRemoteSearchResults'][0])
    {
        list($response) = $this->getPersonRemoteSearchResultsWithHttpInfo($get_person_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getPersonRemoteSearchResultsWithHttpInfo
     *
     * Get person remote search.
     *
     * @param  \OpenAPI\Client\Model\GetPersonRemoteSearchResultsRequest $get_person_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonRemoteSearchResultsWithHttpInfo($get_person_remote_search_results_request, string $contentType = self::contentTypes['getPersonRemoteSearchResults'][0])
    {
        $request = $this->getPersonRemoteSearchResultsRequest($get_person_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonRemoteSearchResultsAsync
     *
     * Get person remote search.
     *
     * @param  \OpenAPI\Client\Model\GetPersonRemoteSearchResultsRequest $get_person_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonRemoteSearchResultsAsync($get_person_remote_search_results_request, string $contentType = self::contentTypes['getPersonRemoteSearchResults'][0])
    {
        return $this->getPersonRemoteSearchResultsAsyncWithHttpInfo($get_person_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get person remote search.
     *
     * @param  \OpenAPI\Client\Model\GetPersonRemoteSearchResultsRequest $get_person_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonRemoteSearchResultsAsyncWithHttpInfo($get_person_remote_search_results_request, string $contentType = self::contentTypes['getPersonRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getPersonRemoteSearchResultsRequest($get_person_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetPersonRemoteSearchResultsRequest $get_person_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonRemoteSearchResultsRequest($get_person_remote_search_results_request, string $contentType = self::contentTypes['getPersonRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_person_remote_search_results_request' is set
        if ($get_person_remote_search_results_request === null || (is_array($get_person_remote_search_results_request) && count($get_person_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_person_remote_search_results_request when calling getPersonRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/Person';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_person_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_person_remote_search_results_request));
            } else {
                $httpBody = $get_person_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSeriesRemoteSearchResults
     *
     * Get series remote search.
     *
     * @param  \OpenAPI\Client\Model\GetSeriesRemoteSearchResultsRequest $get_series_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeriesRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getSeriesRemoteSearchResults($get_series_remote_search_results_request, string $contentType = self::contentTypes['getSeriesRemoteSearchResults'][0])
    {
        list($response) = $this->getSeriesRemoteSearchResultsWithHttpInfo($get_series_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getSeriesRemoteSearchResultsWithHttpInfo
     *
     * Get series remote search.
     *
     * @param  \OpenAPI\Client\Model\GetSeriesRemoteSearchResultsRequest $get_series_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeriesRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSeriesRemoteSearchResultsWithHttpInfo($get_series_remote_search_results_request, string $contentType = self::contentTypes['getSeriesRemoteSearchResults'][0])
    {
        $request = $this->getSeriesRemoteSearchResultsRequest($get_series_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSeriesRemoteSearchResultsAsync
     *
     * Get series remote search.
     *
     * @param  \OpenAPI\Client\Model\GetSeriesRemoteSearchResultsRequest $get_series_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeriesRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSeriesRemoteSearchResultsAsync($get_series_remote_search_results_request, string $contentType = self::contentTypes['getSeriesRemoteSearchResults'][0])
    {
        return $this->getSeriesRemoteSearchResultsAsyncWithHttpInfo($get_series_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSeriesRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get series remote search.
     *
     * @param  \OpenAPI\Client\Model\GetSeriesRemoteSearchResultsRequest $get_series_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeriesRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSeriesRemoteSearchResultsAsyncWithHttpInfo($get_series_remote_search_results_request, string $contentType = self::contentTypes['getSeriesRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getSeriesRemoteSearchResultsRequest($get_series_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSeriesRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetSeriesRemoteSearchResultsRequest $get_series_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeriesRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSeriesRemoteSearchResultsRequest($get_series_remote_search_results_request, string $contentType = self::contentTypes['getSeriesRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_series_remote_search_results_request' is set
        if ($get_series_remote_search_results_request === null || (is_array($get_series_remote_search_results_request) && count($get_series_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_series_remote_search_results_request when calling getSeriesRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/Series';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_series_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_series_remote_search_results_request));
            } else {
                $httpBody = $get_series_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrailerRemoteSearchResults
     *
     * Get trailer remote search.
     *
     * @param  \OpenAPI\Client\Model\GetTrailerRemoteSearchResultsRequest $get_trailer_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrailerRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSearchResult[]
     */
    public function getTrailerRemoteSearchResults($get_trailer_remote_search_results_request, string $contentType = self::contentTypes['getTrailerRemoteSearchResults'][0])
    {
        list($response) = $this->getTrailerRemoteSearchResultsWithHttpInfo($get_trailer_remote_search_results_request, $contentType);
        return $response;
    }

    /**
     * Operation getTrailerRemoteSearchResultsWithHttpInfo
     *
     * Get trailer remote search.
     *
     * @param  \OpenAPI\Client\Model\GetTrailerRemoteSearchResultsRequest $get_trailer_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrailerRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrailerRemoteSearchResultsWithHttpInfo($get_trailer_remote_search_results_request, string $contentType = self::contentTypes['getTrailerRemoteSearchResults'][0])
    {
        $request = $this->getTrailerRemoteSearchResultsRequest($get_trailer_remote_search_results_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSearchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSearchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSearchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSearchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrailerRemoteSearchResultsAsync
     *
     * Get trailer remote search.
     *
     * @param  \OpenAPI\Client\Model\GetTrailerRemoteSearchResultsRequest $get_trailer_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrailerRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrailerRemoteSearchResultsAsync($get_trailer_remote_search_results_request, string $contentType = self::contentTypes['getTrailerRemoteSearchResults'][0])
    {
        return $this->getTrailerRemoteSearchResultsAsyncWithHttpInfo($get_trailer_remote_search_results_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrailerRemoteSearchResultsAsyncWithHttpInfo
     *
     * Get trailer remote search.
     *
     * @param  \OpenAPI\Client\Model\GetTrailerRemoteSearchResultsRequest $get_trailer_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrailerRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrailerRemoteSearchResultsAsyncWithHttpInfo($get_trailer_remote_search_results_request, string $contentType = self::contentTypes['getTrailerRemoteSearchResults'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSearchResult[]';
        $request = $this->getTrailerRemoteSearchResultsRequest($get_trailer_remote_search_results_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrailerRemoteSearchResults'
     *
     * @param  \OpenAPI\Client\Model\GetTrailerRemoteSearchResultsRequest $get_trailer_remote_search_results_request Remote search query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrailerRemoteSearchResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrailerRemoteSearchResultsRequest($get_trailer_remote_search_results_request, string $contentType = self::contentTypes['getTrailerRemoteSearchResults'][0])
    {

        // verify the required parameter 'get_trailer_remote_search_results_request' is set
        if ($get_trailer_remote_search_results_request === null || (is_array($get_trailer_remote_search_results_request) && count($get_trailer_remote_search_results_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_trailer_remote_search_results_request when calling getTrailerRemoteSearchResults'
            );
        }


        $resourcePath = '/Items/RemoteSearch/Trailer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_trailer_remote_search_results_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_trailer_remote_search_results_request));
            } else {
                $httpBody = $get_trailer_remote_search_results_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
