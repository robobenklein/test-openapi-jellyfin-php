<?php
/**
 * TranscodingProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TranscodingProfile Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TranscodingProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TranscodingProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'container' => 'string',
        'type' => '\OpenAPI\Client\Model\DlnaProfileType',
        'video_codec' => 'string',
        'audio_codec' => 'string',
        'protocol' => 'string',
        'estimate_content_length' => 'bool',
        'enable_mpegts_m2_ts_mode' => 'bool',
        'transcode_seek_info' => '\OpenAPI\Client\Model\TranscodeSeekInfo',
        'copy_timestamps' => 'bool',
        'context' => '\OpenAPI\Client\Model\EncodingContext',
        'enable_subtitles_in_manifest' => 'bool',
        'max_audio_channels' => 'string',
        'min_segments' => 'int',
        'segment_length' => 'int',
        'break_on_non_key_frames' => 'bool',
        'conditions' => '\OpenAPI\Client\Model\ProfileCondition[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'container' => null,
        'type' => null,
        'video_codec' => null,
        'audio_codec' => null,
        'protocol' => null,
        'estimate_content_length' => null,
        'enable_mpegts_m2_ts_mode' => null,
        'transcode_seek_info' => null,
        'copy_timestamps' => null,
        'context' => null,
        'enable_subtitles_in_manifest' => null,
        'max_audio_channels' => null,
        'min_segments' => 'int32',
        'segment_length' => 'int32',
        'break_on_non_key_frames' => null,
        'conditions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'container' => false,
		'type' => false,
		'video_codec' => false,
		'audio_codec' => false,
		'protocol' => false,
		'estimate_content_length' => false,
		'enable_mpegts_m2_ts_mode' => false,
		'transcode_seek_info' => false,
		'copy_timestamps' => false,
		'context' => false,
		'enable_subtitles_in_manifest' => false,
		'max_audio_channels' => true,
		'min_segments' => false,
		'segment_length' => false,
		'break_on_non_key_frames' => false,
		'conditions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'container' => 'Container',
        'type' => 'Type',
        'video_codec' => 'VideoCodec',
        'audio_codec' => 'AudioCodec',
        'protocol' => 'Protocol',
        'estimate_content_length' => 'EstimateContentLength',
        'enable_mpegts_m2_ts_mode' => 'EnableMpegtsM2TsMode',
        'transcode_seek_info' => 'TranscodeSeekInfo',
        'copy_timestamps' => 'CopyTimestamps',
        'context' => 'Context',
        'enable_subtitles_in_manifest' => 'EnableSubtitlesInManifest',
        'max_audio_channels' => 'MaxAudioChannels',
        'min_segments' => 'MinSegments',
        'segment_length' => 'SegmentLength',
        'break_on_non_key_frames' => 'BreakOnNonKeyFrames',
        'conditions' => 'Conditions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'container' => 'setContainer',
        'type' => 'setType',
        'video_codec' => 'setVideoCodec',
        'audio_codec' => 'setAudioCodec',
        'protocol' => 'setProtocol',
        'estimate_content_length' => 'setEstimateContentLength',
        'enable_mpegts_m2_ts_mode' => 'setEnableMpegtsM2TsMode',
        'transcode_seek_info' => 'setTranscodeSeekInfo',
        'copy_timestamps' => 'setCopyTimestamps',
        'context' => 'setContext',
        'enable_subtitles_in_manifest' => 'setEnableSubtitlesInManifest',
        'max_audio_channels' => 'setMaxAudioChannels',
        'min_segments' => 'setMinSegments',
        'segment_length' => 'setSegmentLength',
        'break_on_non_key_frames' => 'setBreakOnNonKeyFrames',
        'conditions' => 'setConditions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'container' => 'getContainer',
        'type' => 'getType',
        'video_codec' => 'getVideoCodec',
        'audio_codec' => 'getAudioCodec',
        'protocol' => 'getProtocol',
        'estimate_content_length' => 'getEstimateContentLength',
        'enable_mpegts_m2_ts_mode' => 'getEnableMpegtsM2TsMode',
        'transcode_seek_info' => 'getTranscodeSeekInfo',
        'copy_timestamps' => 'getCopyTimestamps',
        'context' => 'getContext',
        'enable_subtitles_in_manifest' => 'getEnableSubtitlesInManifest',
        'max_audio_channels' => 'getMaxAudioChannels',
        'min_segments' => 'getMinSegments',
        'segment_length' => 'getSegmentLength',
        'break_on_non_key_frames' => 'getBreakOnNonKeyFrames',
        'conditions' => 'getConditions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('video_codec', $data ?? [], null);
        $this->setIfExists('audio_codec', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('estimate_content_length', $data ?? [], false);
        $this->setIfExists('enable_mpegts_m2_ts_mode', $data ?? [], false);
        $this->setIfExists('transcode_seek_info', $data ?? [], null);
        $this->setIfExists('copy_timestamps', $data ?? [], false);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('enable_subtitles_in_manifest', $data ?? [], false);
        $this->setIfExists('max_audio_channels', $data ?? [], null);
        $this->setIfExists('min_segments', $data ?? [], 0);
        $this->setIfExists('segment_length', $data ?? [], 0);
        $this->setIfExists('break_on_non_key_frames', $data ?? [], false);
        $this->setIfExists('conditions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DlnaProfileType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DlnaProfileType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets video_codec
     *
     * @return string|null
     */
    public function getVideoCodec()
    {
        return $this->container['video_codec'];
    }

    /**
     * Sets video_codec
     *
     * @param string|null $video_codec video_codec
     *
     * @return self
     */
    public function setVideoCodec($video_codec)
    {
        if (is_null($video_codec)) {
            throw new \InvalidArgumentException('non-nullable video_codec cannot be null');
        }
        $this->container['video_codec'] = $video_codec;

        return $this;
    }

    /**
     * Gets audio_codec
     *
     * @return string|null
     */
    public function getAudioCodec()
    {
        return $this->container['audio_codec'];
    }

    /**
     * Sets audio_codec
     *
     * @param string|null $audio_codec audio_codec
     *
     * @return self
     */
    public function setAudioCodec($audio_codec)
    {
        if (is_null($audio_codec)) {
            throw new \InvalidArgumentException('non-nullable audio_codec cannot be null');
        }
        $this->container['audio_codec'] = $audio_codec;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets estimate_content_length
     *
     * @return bool|null
     */
    public function getEstimateContentLength()
    {
        return $this->container['estimate_content_length'];
    }

    /**
     * Sets estimate_content_length
     *
     * @param bool|null $estimate_content_length estimate_content_length
     *
     * @return self
     */
    public function setEstimateContentLength($estimate_content_length)
    {
        if (is_null($estimate_content_length)) {
            throw new \InvalidArgumentException('non-nullable estimate_content_length cannot be null');
        }
        $this->container['estimate_content_length'] = $estimate_content_length;

        return $this;
    }

    /**
     * Gets enable_mpegts_m2_ts_mode
     *
     * @return bool|null
     */
    public function getEnableMpegtsM2TsMode()
    {
        return $this->container['enable_mpegts_m2_ts_mode'];
    }

    /**
     * Sets enable_mpegts_m2_ts_mode
     *
     * @param bool|null $enable_mpegts_m2_ts_mode enable_mpegts_m2_ts_mode
     *
     * @return self
     */
    public function setEnableMpegtsM2TsMode($enable_mpegts_m2_ts_mode)
    {
        if (is_null($enable_mpegts_m2_ts_mode)) {
            throw new \InvalidArgumentException('non-nullable enable_mpegts_m2_ts_mode cannot be null');
        }
        $this->container['enable_mpegts_m2_ts_mode'] = $enable_mpegts_m2_ts_mode;

        return $this;
    }

    /**
     * Gets transcode_seek_info
     *
     * @return \OpenAPI\Client\Model\TranscodeSeekInfo|null
     */
    public function getTranscodeSeekInfo()
    {
        return $this->container['transcode_seek_info'];
    }

    /**
     * Sets transcode_seek_info
     *
     * @param \OpenAPI\Client\Model\TranscodeSeekInfo|null $transcode_seek_info transcode_seek_info
     *
     * @return self
     */
    public function setTranscodeSeekInfo($transcode_seek_info)
    {
        if (is_null($transcode_seek_info)) {
            throw new \InvalidArgumentException('non-nullable transcode_seek_info cannot be null');
        }
        $this->container['transcode_seek_info'] = $transcode_seek_info;

        return $this;
    }

    /**
     * Gets copy_timestamps
     *
     * @return bool|null
     */
    public function getCopyTimestamps()
    {
        return $this->container['copy_timestamps'];
    }

    /**
     * Sets copy_timestamps
     *
     * @param bool|null $copy_timestamps copy_timestamps
     *
     * @return self
     */
    public function setCopyTimestamps($copy_timestamps)
    {
        if (is_null($copy_timestamps)) {
            throw new \InvalidArgumentException('non-nullable copy_timestamps cannot be null');
        }
        $this->container['copy_timestamps'] = $copy_timestamps;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \OpenAPI\Client\Model\EncodingContext|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \OpenAPI\Client\Model\EncodingContext|null $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        if (is_null($context)) {
            throw new \InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets enable_subtitles_in_manifest
     *
     * @return bool|null
     */
    public function getEnableSubtitlesInManifest()
    {
        return $this->container['enable_subtitles_in_manifest'];
    }

    /**
     * Sets enable_subtitles_in_manifest
     *
     * @param bool|null $enable_subtitles_in_manifest enable_subtitles_in_manifest
     *
     * @return self
     */
    public function setEnableSubtitlesInManifest($enable_subtitles_in_manifest)
    {
        if (is_null($enable_subtitles_in_manifest)) {
            throw new \InvalidArgumentException('non-nullable enable_subtitles_in_manifest cannot be null');
        }
        $this->container['enable_subtitles_in_manifest'] = $enable_subtitles_in_manifest;

        return $this;
    }

    /**
     * Gets max_audio_channels
     *
     * @return string|null
     */
    public function getMaxAudioChannels()
    {
        return $this->container['max_audio_channels'];
    }

    /**
     * Sets max_audio_channels
     *
     * @param string|null $max_audio_channels max_audio_channels
     *
     * @return self
     */
    public function setMaxAudioChannels($max_audio_channels)
    {
        if (is_null($max_audio_channels)) {
            array_push($this->openAPINullablesSetToNull, 'max_audio_channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_audio_channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_audio_channels'] = $max_audio_channels;

        return $this;
    }

    /**
     * Gets min_segments
     *
     * @return int|null
     */
    public function getMinSegments()
    {
        return $this->container['min_segments'];
    }

    /**
     * Sets min_segments
     *
     * @param int|null $min_segments min_segments
     *
     * @return self
     */
    public function setMinSegments($min_segments)
    {
        if (is_null($min_segments)) {
            throw new \InvalidArgumentException('non-nullable min_segments cannot be null');
        }
        $this->container['min_segments'] = $min_segments;

        return $this;
    }

    /**
     * Gets segment_length
     *
     * @return int|null
     */
    public function getSegmentLength()
    {
        return $this->container['segment_length'];
    }

    /**
     * Sets segment_length
     *
     * @param int|null $segment_length segment_length
     *
     * @return self
     */
    public function setSegmentLength($segment_length)
    {
        if (is_null($segment_length)) {
            throw new \InvalidArgumentException('non-nullable segment_length cannot be null');
        }
        $this->container['segment_length'] = $segment_length;

        return $this;
    }

    /**
     * Gets break_on_non_key_frames
     *
     * @return bool|null
     */
    public function getBreakOnNonKeyFrames()
    {
        return $this->container['break_on_non_key_frames'];
    }

    /**
     * Sets break_on_non_key_frames
     *
     * @param bool|null $break_on_non_key_frames break_on_non_key_frames
     *
     * @return self
     */
    public function setBreakOnNonKeyFrames($break_on_non_key_frames)
    {
        if (is_null($break_on_non_key_frames)) {
            throw new \InvalidArgumentException('non-nullable break_on_non_key_frames cannot be null');
        }
        $this->container['break_on_non_key_frames'] = $break_on_non_key_frames;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \OpenAPI\Client\Model\ProfileCondition[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \OpenAPI\Client\Model\ProfileCondition[]|null $conditions conditions
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


