<?php
/**
 * UpdateItemRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateItemRequest Class Doc Comment
 *
 * @category Class
 * @description This is strictly used as a data transfer object from the api layer.  This holds information about a BaseItem in a format that is convenient for the client.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateItemRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateItem_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'original_title' => 'string',
        'server_id' => 'string',
        'id' => 'string',
        'etag' => 'string',
        'source_type' => 'string',
        'playlist_item_id' => 'string',
        'date_created' => '\DateTime',
        'date_last_media_added' => '\DateTime',
        'extra_type' => 'string',
        'airs_before_season_number' => 'int',
        'airs_after_season_number' => 'int',
        'airs_before_episode_number' => 'int',
        'can_delete' => 'bool',
        'can_download' => 'bool',
        'has_subtitles' => 'bool',
        'preferred_metadata_language' => 'string',
        'preferred_metadata_country_code' => 'string',
        'supports_sync' => 'bool',
        'container' => 'string',
        'sort_name' => 'string',
        'forced_sort_name' => 'string',
        'video3_d_format' => '\OpenAPI\Client\Model\Video3DFormat',
        'premiere_date' => '\DateTime',
        'external_urls' => '\OpenAPI\Client\Model\ExternalUrl[]',
        'media_sources' => '\OpenAPI\Client\Model\MediaSourceInfo[]',
        'critic_rating' => 'float',
        'production_locations' => 'string[]',
        'path' => 'string',
        'enable_media_source_display' => 'bool',
        'official_rating' => 'string',
        'custom_rating' => 'string',
        'channel_id' => 'string',
        'channel_name' => 'string',
        'overview' => 'string',
        'taglines' => 'string[]',
        'genres' => 'string[]',
        'community_rating' => 'float',
        'cumulative_run_time_ticks' => 'int',
        'run_time_ticks' => 'int',
        'play_access' => '\OpenAPI\Client\Model\PlayAccess',
        'aspect_ratio' => 'string',
        'production_year' => 'int',
        'is_place_holder' => 'bool',
        'number' => 'string',
        'channel_number' => 'string',
        'index_number' => 'int',
        'index_number_end' => 'int',
        'parent_index_number' => 'int',
        'remote_trailers' => '\OpenAPI\Client\Model\MediaUrl[]',
        'provider_ids' => 'array<string,string>',
        'is_hd' => 'bool',
        'is_folder' => 'bool',
        'parent_id' => 'string',
        'type' => '\OpenAPI\Client\Model\BaseItemKind',
        'people' => '\OpenAPI\Client\Model\BaseItemPerson[]',
        'studios' => '\OpenAPI\Client\Model\NameGuidPair[]',
        'genre_items' => '\OpenAPI\Client\Model\NameGuidPair[]',
        'parent_logo_item_id' => 'string',
        'parent_backdrop_item_id' => 'string',
        'parent_backdrop_image_tags' => 'string[]',
        'local_trailer_count' => 'int',
        'user_data' => '\OpenAPI\Client\Model\BaseItemDtoUserData',
        'recursive_item_count' => 'int',
        'child_count' => 'int',
        'series_name' => 'string',
        'series_id' => 'string',
        'season_id' => 'string',
        'special_feature_count' => 'int',
        'display_preferences_id' => 'string',
        'status' => 'string',
        'air_time' => 'string',
        'air_days' => '\OpenAPI\Client\Model\DayOfWeek[]',
        'tags' => 'string[]',
        'primary_image_aspect_ratio' => 'float',
        'artists' => 'string[]',
        'artist_items' => '\OpenAPI\Client\Model\NameGuidPair[]',
        'album' => 'string',
        'collection_type' => 'string',
        'display_order' => 'string',
        'album_id' => 'string',
        'album_primary_image_tag' => 'string',
        'series_primary_image_tag' => 'string',
        'album_artist' => 'string',
        'album_artists' => '\OpenAPI\Client\Model\NameGuidPair[]',
        'season_name' => 'string',
        'media_streams' => '\OpenAPI\Client\Model\MediaStream[]',
        'video_type' => '\OpenAPI\Client\Model\VideoType',
        'part_count' => 'int',
        'media_source_count' => 'int',
        'image_tags' => 'array<string,string>',
        'backdrop_image_tags' => 'string[]',
        'screenshot_image_tags' => 'string[]',
        'parent_logo_image_tag' => 'string',
        'parent_art_item_id' => 'string',
        'parent_art_image_tag' => 'string',
        'series_thumb_image_tag' => 'string',
        'image_blur_hashes' => '\OpenAPI\Client\Model\BaseItemDtoImageBlurHashes',
        'series_studio' => 'string',
        'parent_thumb_item_id' => 'string',
        'parent_thumb_image_tag' => 'string',
        'parent_primary_image_item_id' => 'string',
        'parent_primary_image_tag' => 'string',
        'chapters' => '\OpenAPI\Client\Model\ChapterInfo[]',
        'location_type' => '\OpenAPI\Client\Model\LocationType',
        'iso_type' => '\OpenAPI\Client\Model\IsoType',
        'media_type' => 'string',
        'end_date' => '\DateTime',
        'locked_fields' => '\OpenAPI\Client\Model\MetadataField[]',
        'trailer_count' => 'int',
        'movie_count' => 'int',
        'series_count' => 'int',
        'program_count' => 'int',
        'episode_count' => 'int',
        'song_count' => 'int',
        'album_count' => 'int',
        'artist_count' => 'int',
        'music_video_count' => 'int',
        'lock_data' => 'bool',
        'width' => 'int',
        'height' => 'int',
        'camera_make' => 'string',
        'camera_model' => 'string',
        'software' => 'string',
        'exposure_time' => 'float',
        'focal_length' => 'float',
        'image_orientation' => '\OpenAPI\Client\Model\ImageOrientation',
        'aperture' => 'float',
        'shutter_speed' => 'float',
        'latitude' => 'float',
        'longitude' => 'float',
        'altitude' => 'float',
        'iso_speed_rating' => 'int',
        'series_timer_id' => 'string',
        'program_id' => 'string',
        'channel_primary_image_tag' => 'string',
        'start_date' => '\DateTime',
        'completion_percentage' => 'float',
        'is_repeat' => 'bool',
        'episode_title' => 'string',
        'channel_type' => '\OpenAPI\Client\Model\ChannelType',
        'audio' => '\OpenAPI\Client\Model\ProgramAudio',
        'is_movie' => 'bool',
        'is_sports' => 'bool',
        'is_series' => 'bool',
        'is_live' => 'bool',
        'is_news' => 'bool',
        'is_kids' => 'bool',
        'is_premiere' => 'bool',
        'timer_id' => 'string',
        'current_program' => '\OpenAPI\Client\Model\BaseItemDtoCurrentProgram'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'original_title' => null,
        'server_id' => null,
        'id' => 'uuid',
        'etag' => null,
        'source_type' => null,
        'playlist_item_id' => null,
        'date_created' => 'date-time',
        'date_last_media_added' => 'date-time',
        'extra_type' => null,
        'airs_before_season_number' => 'int32',
        'airs_after_season_number' => 'int32',
        'airs_before_episode_number' => 'int32',
        'can_delete' => null,
        'can_download' => null,
        'has_subtitles' => null,
        'preferred_metadata_language' => null,
        'preferred_metadata_country_code' => null,
        'supports_sync' => null,
        'container' => null,
        'sort_name' => null,
        'forced_sort_name' => null,
        'video3_d_format' => null,
        'premiere_date' => 'date-time',
        'external_urls' => null,
        'media_sources' => null,
        'critic_rating' => 'float',
        'production_locations' => null,
        'path' => null,
        'enable_media_source_display' => null,
        'official_rating' => null,
        'custom_rating' => null,
        'channel_id' => 'uuid',
        'channel_name' => null,
        'overview' => null,
        'taglines' => null,
        'genres' => null,
        'community_rating' => 'float',
        'cumulative_run_time_ticks' => 'int64',
        'run_time_ticks' => 'int64',
        'play_access' => null,
        'aspect_ratio' => null,
        'production_year' => 'int32',
        'is_place_holder' => null,
        'number' => null,
        'channel_number' => null,
        'index_number' => 'int32',
        'index_number_end' => 'int32',
        'parent_index_number' => 'int32',
        'remote_trailers' => null,
        'provider_ids' => null,
        'is_hd' => null,
        'is_folder' => null,
        'parent_id' => 'uuid',
        'type' => null,
        'people' => null,
        'studios' => null,
        'genre_items' => null,
        'parent_logo_item_id' => 'uuid',
        'parent_backdrop_item_id' => 'uuid',
        'parent_backdrop_image_tags' => null,
        'local_trailer_count' => 'int32',
        'user_data' => null,
        'recursive_item_count' => 'int32',
        'child_count' => 'int32',
        'series_name' => null,
        'series_id' => 'uuid',
        'season_id' => 'uuid',
        'special_feature_count' => 'int32',
        'display_preferences_id' => null,
        'status' => null,
        'air_time' => null,
        'air_days' => null,
        'tags' => null,
        'primary_image_aspect_ratio' => 'double',
        'artists' => null,
        'artist_items' => null,
        'album' => null,
        'collection_type' => null,
        'display_order' => null,
        'album_id' => 'uuid',
        'album_primary_image_tag' => null,
        'series_primary_image_tag' => null,
        'album_artist' => null,
        'album_artists' => null,
        'season_name' => null,
        'media_streams' => null,
        'video_type' => null,
        'part_count' => 'int32',
        'media_source_count' => 'int32',
        'image_tags' => null,
        'backdrop_image_tags' => null,
        'screenshot_image_tags' => null,
        'parent_logo_image_tag' => null,
        'parent_art_item_id' => 'uuid',
        'parent_art_image_tag' => null,
        'series_thumb_image_tag' => null,
        'image_blur_hashes' => null,
        'series_studio' => null,
        'parent_thumb_item_id' => 'uuid',
        'parent_thumb_image_tag' => null,
        'parent_primary_image_item_id' => null,
        'parent_primary_image_tag' => null,
        'chapters' => null,
        'location_type' => null,
        'iso_type' => null,
        'media_type' => null,
        'end_date' => 'date-time',
        'locked_fields' => null,
        'trailer_count' => 'int32',
        'movie_count' => 'int32',
        'series_count' => 'int32',
        'program_count' => 'int32',
        'episode_count' => 'int32',
        'song_count' => 'int32',
        'album_count' => 'int32',
        'artist_count' => 'int32',
        'music_video_count' => 'int32',
        'lock_data' => null,
        'width' => 'int32',
        'height' => 'int32',
        'camera_make' => null,
        'camera_model' => null,
        'software' => null,
        'exposure_time' => 'double',
        'focal_length' => 'double',
        'image_orientation' => null,
        'aperture' => 'double',
        'shutter_speed' => 'double',
        'latitude' => 'double',
        'longitude' => 'double',
        'altitude' => 'double',
        'iso_speed_rating' => 'int32',
        'series_timer_id' => null,
        'program_id' => null,
        'channel_primary_image_tag' => null,
        'start_date' => 'date-time',
        'completion_percentage' => 'double',
        'is_repeat' => null,
        'episode_title' => null,
        'channel_type' => null,
        'audio' => null,
        'is_movie' => null,
        'is_sports' => null,
        'is_series' => null,
        'is_live' => null,
        'is_news' => null,
        'is_kids' => null,
        'is_premiere' => null,
        'timer_id' => null,
        'current_program' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'original_title' => true,
		'server_id' => true,
		'id' => false,
		'etag' => true,
		'source_type' => true,
		'playlist_item_id' => true,
		'date_created' => true,
		'date_last_media_added' => true,
		'extra_type' => true,
		'airs_before_season_number' => true,
		'airs_after_season_number' => true,
		'airs_before_episode_number' => true,
		'can_delete' => true,
		'can_download' => true,
		'has_subtitles' => true,
		'preferred_metadata_language' => true,
		'preferred_metadata_country_code' => true,
		'supports_sync' => true,
		'container' => true,
		'sort_name' => true,
		'forced_sort_name' => true,
		'video3_d_format' => true,
		'premiere_date' => true,
		'external_urls' => true,
		'media_sources' => true,
		'critic_rating' => true,
		'production_locations' => true,
		'path' => true,
		'enable_media_source_display' => true,
		'official_rating' => true,
		'custom_rating' => true,
		'channel_id' => true,
		'channel_name' => true,
		'overview' => true,
		'taglines' => true,
		'genres' => true,
		'community_rating' => true,
		'cumulative_run_time_ticks' => true,
		'run_time_ticks' => true,
		'play_access' => true,
		'aspect_ratio' => true,
		'production_year' => true,
		'is_place_holder' => true,
		'number' => true,
		'channel_number' => true,
		'index_number' => true,
		'index_number_end' => true,
		'parent_index_number' => true,
		'remote_trailers' => true,
		'provider_ids' => true,
		'is_hd' => true,
		'is_folder' => true,
		'parent_id' => true,
		'type' => false,
		'people' => true,
		'studios' => true,
		'genre_items' => true,
		'parent_logo_item_id' => true,
		'parent_backdrop_item_id' => true,
		'parent_backdrop_image_tags' => true,
		'local_trailer_count' => true,
		'user_data' => true,
		'recursive_item_count' => true,
		'child_count' => true,
		'series_name' => true,
		'series_id' => true,
		'season_id' => true,
		'special_feature_count' => true,
		'display_preferences_id' => true,
		'status' => true,
		'air_time' => true,
		'air_days' => true,
		'tags' => true,
		'primary_image_aspect_ratio' => true,
		'artists' => true,
		'artist_items' => true,
		'album' => true,
		'collection_type' => true,
		'display_order' => true,
		'album_id' => true,
		'album_primary_image_tag' => true,
		'series_primary_image_tag' => true,
		'album_artist' => true,
		'album_artists' => true,
		'season_name' => true,
		'media_streams' => true,
		'video_type' => true,
		'part_count' => true,
		'media_source_count' => true,
		'image_tags' => true,
		'backdrop_image_tags' => true,
		'screenshot_image_tags' => true,
		'parent_logo_image_tag' => true,
		'parent_art_item_id' => true,
		'parent_art_image_tag' => true,
		'series_thumb_image_tag' => true,
		'image_blur_hashes' => true,
		'series_studio' => true,
		'parent_thumb_item_id' => true,
		'parent_thumb_image_tag' => true,
		'parent_primary_image_item_id' => true,
		'parent_primary_image_tag' => true,
		'chapters' => true,
		'location_type' => true,
		'iso_type' => true,
		'media_type' => true,
		'end_date' => true,
		'locked_fields' => true,
		'trailer_count' => true,
		'movie_count' => true,
		'series_count' => true,
		'program_count' => true,
		'episode_count' => true,
		'song_count' => true,
		'album_count' => true,
		'artist_count' => true,
		'music_video_count' => true,
		'lock_data' => true,
		'width' => true,
		'height' => true,
		'camera_make' => true,
		'camera_model' => true,
		'software' => true,
		'exposure_time' => true,
		'focal_length' => true,
		'image_orientation' => true,
		'aperture' => true,
		'shutter_speed' => true,
		'latitude' => true,
		'longitude' => true,
		'altitude' => true,
		'iso_speed_rating' => true,
		'series_timer_id' => true,
		'program_id' => true,
		'channel_primary_image_tag' => true,
		'start_date' => true,
		'completion_percentage' => true,
		'is_repeat' => true,
		'episode_title' => true,
		'channel_type' => true,
		'audio' => true,
		'is_movie' => true,
		'is_sports' => true,
		'is_series' => true,
		'is_live' => true,
		'is_news' => true,
		'is_kids' => true,
		'is_premiere' => true,
		'timer_id' => true,
		'current_program' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'original_title' => 'OriginalTitle',
        'server_id' => 'ServerId',
        'id' => 'Id',
        'etag' => 'Etag',
        'source_type' => 'SourceType',
        'playlist_item_id' => 'PlaylistItemId',
        'date_created' => 'DateCreated',
        'date_last_media_added' => 'DateLastMediaAdded',
        'extra_type' => 'ExtraType',
        'airs_before_season_number' => 'AirsBeforeSeasonNumber',
        'airs_after_season_number' => 'AirsAfterSeasonNumber',
        'airs_before_episode_number' => 'AirsBeforeEpisodeNumber',
        'can_delete' => 'CanDelete',
        'can_download' => 'CanDownload',
        'has_subtitles' => 'HasSubtitles',
        'preferred_metadata_language' => 'PreferredMetadataLanguage',
        'preferred_metadata_country_code' => 'PreferredMetadataCountryCode',
        'supports_sync' => 'SupportsSync',
        'container' => 'Container',
        'sort_name' => 'SortName',
        'forced_sort_name' => 'ForcedSortName',
        'video3_d_format' => 'Video3DFormat',
        'premiere_date' => 'PremiereDate',
        'external_urls' => 'ExternalUrls',
        'media_sources' => 'MediaSources',
        'critic_rating' => 'CriticRating',
        'production_locations' => 'ProductionLocations',
        'path' => 'Path',
        'enable_media_source_display' => 'EnableMediaSourceDisplay',
        'official_rating' => 'OfficialRating',
        'custom_rating' => 'CustomRating',
        'channel_id' => 'ChannelId',
        'channel_name' => 'ChannelName',
        'overview' => 'Overview',
        'taglines' => 'Taglines',
        'genres' => 'Genres',
        'community_rating' => 'CommunityRating',
        'cumulative_run_time_ticks' => 'CumulativeRunTimeTicks',
        'run_time_ticks' => 'RunTimeTicks',
        'play_access' => 'PlayAccess',
        'aspect_ratio' => 'AspectRatio',
        'production_year' => 'ProductionYear',
        'is_place_holder' => 'IsPlaceHolder',
        'number' => 'Number',
        'channel_number' => 'ChannelNumber',
        'index_number' => 'IndexNumber',
        'index_number_end' => 'IndexNumberEnd',
        'parent_index_number' => 'ParentIndexNumber',
        'remote_trailers' => 'RemoteTrailers',
        'provider_ids' => 'ProviderIds',
        'is_hd' => 'IsHD',
        'is_folder' => 'IsFolder',
        'parent_id' => 'ParentId',
        'type' => 'Type',
        'people' => 'People',
        'studios' => 'Studios',
        'genre_items' => 'GenreItems',
        'parent_logo_item_id' => 'ParentLogoItemId',
        'parent_backdrop_item_id' => 'ParentBackdropItemId',
        'parent_backdrop_image_tags' => 'ParentBackdropImageTags',
        'local_trailer_count' => 'LocalTrailerCount',
        'user_data' => 'UserData',
        'recursive_item_count' => 'RecursiveItemCount',
        'child_count' => 'ChildCount',
        'series_name' => 'SeriesName',
        'series_id' => 'SeriesId',
        'season_id' => 'SeasonId',
        'special_feature_count' => 'SpecialFeatureCount',
        'display_preferences_id' => 'DisplayPreferencesId',
        'status' => 'Status',
        'air_time' => 'AirTime',
        'air_days' => 'AirDays',
        'tags' => 'Tags',
        'primary_image_aspect_ratio' => 'PrimaryImageAspectRatio',
        'artists' => 'Artists',
        'artist_items' => 'ArtistItems',
        'album' => 'Album',
        'collection_type' => 'CollectionType',
        'display_order' => 'DisplayOrder',
        'album_id' => 'AlbumId',
        'album_primary_image_tag' => 'AlbumPrimaryImageTag',
        'series_primary_image_tag' => 'SeriesPrimaryImageTag',
        'album_artist' => 'AlbumArtist',
        'album_artists' => 'AlbumArtists',
        'season_name' => 'SeasonName',
        'media_streams' => 'MediaStreams',
        'video_type' => 'VideoType',
        'part_count' => 'PartCount',
        'media_source_count' => 'MediaSourceCount',
        'image_tags' => 'ImageTags',
        'backdrop_image_tags' => 'BackdropImageTags',
        'screenshot_image_tags' => 'ScreenshotImageTags',
        'parent_logo_image_tag' => 'ParentLogoImageTag',
        'parent_art_item_id' => 'ParentArtItemId',
        'parent_art_image_tag' => 'ParentArtImageTag',
        'series_thumb_image_tag' => 'SeriesThumbImageTag',
        'image_blur_hashes' => 'ImageBlurHashes',
        'series_studio' => 'SeriesStudio',
        'parent_thumb_item_id' => 'ParentThumbItemId',
        'parent_thumb_image_tag' => 'ParentThumbImageTag',
        'parent_primary_image_item_id' => 'ParentPrimaryImageItemId',
        'parent_primary_image_tag' => 'ParentPrimaryImageTag',
        'chapters' => 'Chapters',
        'location_type' => 'LocationType',
        'iso_type' => 'IsoType',
        'media_type' => 'MediaType',
        'end_date' => 'EndDate',
        'locked_fields' => 'LockedFields',
        'trailer_count' => 'TrailerCount',
        'movie_count' => 'MovieCount',
        'series_count' => 'SeriesCount',
        'program_count' => 'ProgramCount',
        'episode_count' => 'EpisodeCount',
        'song_count' => 'SongCount',
        'album_count' => 'AlbumCount',
        'artist_count' => 'ArtistCount',
        'music_video_count' => 'MusicVideoCount',
        'lock_data' => 'LockData',
        'width' => 'Width',
        'height' => 'Height',
        'camera_make' => 'CameraMake',
        'camera_model' => 'CameraModel',
        'software' => 'Software',
        'exposure_time' => 'ExposureTime',
        'focal_length' => 'FocalLength',
        'image_orientation' => 'ImageOrientation',
        'aperture' => 'Aperture',
        'shutter_speed' => 'ShutterSpeed',
        'latitude' => 'Latitude',
        'longitude' => 'Longitude',
        'altitude' => 'Altitude',
        'iso_speed_rating' => 'IsoSpeedRating',
        'series_timer_id' => 'SeriesTimerId',
        'program_id' => 'ProgramId',
        'channel_primary_image_tag' => 'ChannelPrimaryImageTag',
        'start_date' => 'StartDate',
        'completion_percentage' => 'CompletionPercentage',
        'is_repeat' => 'IsRepeat',
        'episode_title' => 'EpisodeTitle',
        'channel_type' => 'ChannelType',
        'audio' => 'Audio',
        'is_movie' => 'IsMovie',
        'is_sports' => 'IsSports',
        'is_series' => 'IsSeries',
        'is_live' => 'IsLive',
        'is_news' => 'IsNews',
        'is_kids' => 'IsKids',
        'is_premiere' => 'IsPremiere',
        'timer_id' => 'TimerId',
        'current_program' => 'CurrentProgram'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'original_title' => 'setOriginalTitle',
        'server_id' => 'setServerId',
        'id' => 'setId',
        'etag' => 'setEtag',
        'source_type' => 'setSourceType',
        'playlist_item_id' => 'setPlaylistItemId',
        'date_created' => 'setDateCreated',
        'date_last_media_added' => 'setDateLastMediaAdded',
        'extra_type' => 'setExtraType',
        'airs_before_season_number' => 'setAirsBeforeSeasonNumber',
        'airs_after_season_number' => 'setAirsAfterSeasonNumber',
        'airs_before_episode_number' => 'setAirsBeforeEpisodeNumber',
        'can_delete' => 'setCanDelete',
        'can_download' => 'setCanDownload',
        'has_subtitles' => 'setHasSubtitles',
        'preferred_metadata_language' => 'setPreferredMetadataLanguage',
        'preferred_metadata_country_code' => 'setPreferredMetadataCountryCode',
        'supports_sync' => 'setSupportsSync',
        'container' => 'setContainer',
        'sort_name' => 'setSortName',
        'forced_sort_name' => 'setForcedSortName',
        'video3_d_format' => 'setVideo3DFormat',
        'premiere_date' => 'setPremiereDate',
        'external_urls' => 'setExternalUrls',
        'media_sources' => 'setMediaSources',
        'critic_rating' => 'setCriticRating',
        'production_locations' => 'setProductionLocations',
        'path' => 'setPath',
        'enable_media_source_display' => 'setEnableMediaSourceDisplay',
        'official_rating' => 'setOfficialRating',
        'custom_rating' => 'setCustomRating',
        'channel_id' => 'setChannelId',
        'channel_name' => 'setChannelName',
        'overview' => 'setOverview',
        'taglines' => 'setTaglines',
        'genres' => 'setGenres',
        'community_rating' => 'setCommunityRating',
        'cumulative_run_time_ticks' => 'setCumulativeRunTimeTicks',
        'run_time_ticks' => 'setRunTimeTicks',
        'play_access' => 'setPlayAccess',
        'aspect_ratio' => 'setAspectRatio',
        'production_year' => 'setProductionYear',
        'is_place_holder' => 'setIsPlaceHolder',
        'number' => 'setNumber',
        'channel_number' => 'setChannelNumber',
        'index_number' => 'setIndexNumber',
        'index_number_end' => 'setIndexNumberEnd',
        'parent_index_number' => 'setParentIndexNumber',
        'remote_trailers' => 'setRemoteTrailers',
        'provider_ids' => 'setProviderIds',
        'is_hd' => 'setIsHd',
        'is_folder' => 'setIsFolder',
        'parent_id' => 'setParentId',
        'type' => 'setType',
        'people' => 'setPeople',
        'studios' => 'setStudios',
        'genre_items' => 'setGenreItems',
        'parent_logo_item_id' => 'setParentLogoItemId',
        'parent_backdrop_item_id' => 'setParentBackdropItemId',
        'parent_backdrop_image_tags' => 'setParentBackdropImageTags',
        'local_trailer_count' => 'setLocalTrailerCount',
        'user_data' => 'setUserData',
        'recursive_item_count' => 'setRecursiveItemCount',
        'child_count' => 'setChildCount',
        'series_name' => 'setSeriesName',
        'series_id' => 'setSeriesId',
        'season_id' => 'setSeasonId',
        'special_feature_count' => 'setSpecialFeatureCount',
        'display_preferences_id' => 'setDisplayPreferencesId',
        'status' => 'setStatus',
        'air_time' => 'setAirTime',
        'air_days' => 'setAirDays',
        'tags' => 'setTags',
        'primary_image_aspect_ratio' => 'setPrimaryImageAspectRatio',
        'artists' => 'setArtists',
        'artist_items' => 'setArtistItems',
        'album' => 'setAlbum',
        'collection_type' => 'setCollectionType',
        'display_order' => 'setDisplayOrder',
        'album_id' => 'setAlbumId',
        'album_primary_image_tag' => 'setAlbumPrimaryImageTag',
        'series_primary_image_tag' => 'setSeriesPrimaryImageTag',
        'album_artist' => 'setAlbumArtist',
        'album_artists' => 'setAlbumArtists',
        'season_name' => 'setSeasonName',
        'media_streams' => 'setMediaStreams',
        'video_type' => 'setVideoType',
        'part_count' => 'setPartCount',
        'media_source_count' => 'setMediaSourceCount',
        'image_tags' => 'setImageTags',
        'backdrop_image_tags' => 'setBackdropImageTags',
        'screenshot_image_tags' => 'setScreenshotImageTags',
        'parent_logo_image_tag' => 'setParentLogoImageTag',
        'parent_art_item_id' => 'setParentArtItemId',
        'parent_art_image_tag' => 'setParentArtImageTag',
        'series_thumb_image_tag' => 'setSeriesThumbImageTag',
        'image_blur_hashes' => 'setImageBlurHashes',
        'series_studio' => 'setSeriesStudio',
        'parent_thumb_item_id' => 'setParentThumbItemId',
        'parent_thumb_image_tag' => 'setParentThumbImageTag',
        'parent_primary_image_item_id' => 'setParentPrimaryImageItemId',
        'parent_primary_image_tag' => 'setParentPrimaryImageTag',
        'chapters' => 'setChapters',
        'location_type' => 'setLocationType',
        'iso_type' => 'setIsoType',
        'media_type' => 'setMediaType',
        'end_date' => 'setEndDate',
        'locked_fields' => 'setLockedFields',
        'trailer_count' => 'setTrailerCount',
        'movie_count' => 'setMovieCount',
        'series_count' => 'setSeriesCount',
        'program_count' => 'setProgramCount',
        'episode_count' => 'setEpisodeCount',
        'song_count' => 'setSongCount',
        'album_count' => 'setAlbumCount',
        'artist_count' => 'setArtistCount',
        'music_video_count' => 'setMusicVideoCount',
        'lock_data' => 'setLockData',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'camera_make' => 'setCameraMake',
        'camera_model' => 'setCameraModel',
        'software' => 'setSoftware',
        'exposure_time' => 'setExposureTime',
        'focal_length' => 'setFocalLength',
        'image_orientation' => 'setImageOrientation',
        'aperture' => 'setAperture',
        'shutter_speed' => 'setShutterSpeed',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'altitude' => 'setAltitude',
        'iso_speed_rating' => 'setIsoSpeedRating',
        'series_timer_id' => 'setSeriesTimerId',
        'program_id' => 'setProgramId',
        'channel_primary_image_tag' => 'setChannelPrimaryImageTag',
        'start_date' => 'setStartDate',
        'completion_percentage' => 'setCompletionPercentage',
        'is_repeat' => 'setIsRepeat',
        'episode_title' => 'setEpisodeTitle',
        'channel_type' => 'setChannelType',
        'audio' => 'setAudio',
        'is_movie' => 'setIsMovie',
        'is_sports' => 'setIsSports',
        'is_series' => 'setIsSeries',
        'is_live' => 'setIsLive',
        'is_news' => 'setIsNews',
        'is_kids' => 'setIsKids',
        'is_premiere' => 'setIsPremiere',
        'timer_id' => 'setTimerId',
        'current_program' => 'setCurrentProgram'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'original_title' => 'getOriginalTitle',
        'server_id' => 'getServerId',
        'id' => 'getId',
        'etag' => 'getEtag',
        'source_type' => 'getSourceType',
        'playlist_item_id' => 'getPlaylistItemId',
        'date_created' => 'getDateCreated',
        'date_last_media_added' => 'getDateLastMediaAdded',
        'extra_type' => 'getExtraType',
        'airs_before_season_number' => 'getAirsBeforeSeasonNumber',
        'airs_after_season_number' => 'getAirsAfterSeasonNumber',
        'airs_before_episode_number' => 'getAirsBeforeEpisodeNumber',
        'can_delete' => 'getCanDelete',
        'can_download' => 'getCanDownload',
        'has_subtitles' => 'getHasSubtitles',
        'preferred_metadata_language' => 'getPreferredMetadataLanguage',
        'preferred_metadata_country_code' => 'getPreferredMetadataCountryCode',
        'supports_sync' => 'getSupportsSync',
        'container' => 'getContainer',
        'sort_name' => 'getSortName',
        'forced_sort_name' => 'getForcedSortName',
        'video3_d_format' => 'getVideo3DFormat',
        'premiere_date' => 'getPremiereDate',
        'external_urls' => 'getExternalUrls',
        'media_sources' => 'getMediaSources',
        'critic_rating' => 'getCriticRating',
        'production_locations' => 'getProductionLocations',
        'path' => 'getPath',
        'enable_media_source_display' => 'getEnableMediaSourceDisplay',
        'official_rating' => 'getOfficialRating',
        'custom_rating' => 'getCustomRating',
        'channel_id' => 'getChannelId',
        'channel_name' => 'getChannelName',
        'overview' => 'getOverview',
        'taglines' => 'getTaglines',
        'genres' => 'getGenres',
        'community_rating' => 'getCommunityRating',
        'cumulative_run_time_ticks' => 'getCumulativeRunTimeTicks',
        'run_time_ticks' => 'getRunTimeTicks',
        'play_access' => 'getPlayAccess',
        'aspect_ratio' => 'getAspectRatio',
        'production_year' => 'getProductionYear',
        'is_place_holder' => 'getIsPlaceHolder',
        'number' => 'getNumber',
        'channel_number' => 'getChannelNumber',
        'index_number' => 'getIndexNumber',
        'index_number_end' => 'getIndexNumberEnd',
        'parent_index_number' => 'getParentIndexNumber',
        'remote_trailers' => 'getRemoteTrailers',
        'provider_ids' => 'getProviderIds',
        'is_hd' => 'getIsHd',
        'is_folder' => 'getIsFolder',
        'parent_id' => 'getParentId',
        'type' => 'getType',
        'people' => 'getPeople',
        'studios' => 'getStudios',
        'genre_items' => 'getGenreItems',
        'parent_logo_item_id' => 'getParentLogoItemId',
        'parent_backdrop_item_id' => 'getParentBackdropItemId',
        'parent_backdrop_image_tags' => 'getParentBackdropImageTags',
        'local_trailer_count' => 'getLocalTrailerCount',
        'user_data' => 'getUserData',
        'recursive_item_count' => 'getRecursiveItemCount',
        'child_count' => 'getChildCount',
        'series_name' => 'getSeriesName',
        'series_id' => 'getSeriesId',
        'season_id' => 'getSeasonId',
        'special_feature_count' => 'getSpecialFeatureCount',
        'display_preferences_id' => 'getDisplayPreferencesId',
        'status' => 'getStatus',
        'air_time' => 'getAirTime',
        'air_days' => 'getAirDays',
        'tags' => 'getTags',
        'primary_image_aspect_ratio' => 'getPrimaryImageAspectRatio',
        'artists' => 'getArtists',
        'artist_items' => 'getArtistItems',
        'album' => 'getAlbum',
        'collection_type' => 'getCollectionType',
        'display_order' => 'getDisplayOrder',
        'album_id' => 'getAlbumId',
        'album_primary_image_tag' => 'getAlbumPrimaryImageTag',
        'series_primary_image_tag' => 'getSeriesPrimaryImageTag',
        'album_artist' => 'getAlbumArtist',
        'album_artists' => 'getAlbumArtists',
        'season_name' => 'getSeasonName',
        'media_streams' => 'getMediaStreams',
        'video_type' => 'getVideoType',
        'part_count' => 'getPartCount',
        'media_source_count' => 'getMediaSourceCount',
        'image_tags' => 'getImageTags',
        'backdrop_image_tags' => 'getBackdropImageTags',
        'screenshot_image_tags' => 'getScreenshotImageTags',
        'parent_logo_image_tag' => 'getParentLogoImageTag',
        'parent_art_item_id' => 'getParentArtItemId',
        'parent_art_image_tag' => 'getParentArtImageTag',
        'series_thumb_image_tag' => 'getSeriesThumbImageTag',
        'image_blur_hashes' => 'getImageBlurHashes',
        'series_studio' => 'getSeriesStudio',
        'parent_thumb_item_id' => 'getParentThumbItemId',
        'parent_thumb_image_tag' => 'getParentThumbImageTag',
        'parent_primary_image_item_id' => 'getParentPrimaryImageItemId',
        'parent_primary_image_tag' => 'getParentPrimaryImageTag',
        'chapters' => 'getChapters',
        'location_type' => 'getLocationType',
        'iso_type' => 'getIsoType',
        'media_type' => 'getMediaType',
        'end_date' => 'getEndDate',
        'locked_fields' => 'getLockedFields',
        'trailer_count' => 'getTrailerCount',
        'movie_count' => 'getMovieCount',
        'series_count' => 'getSeriesCount',
        'program_count' => 'getProgramCount',
        'episode_count' => 'getEpisodeCount',
        'song_count' => 'getSongCount',
        'album_count' => 'getAlbumCount',
        'artist_count' => 'getArtistCount',
        'music_video_count' => 'getMusicVideoCount',
        'lock_data' => 'getLockData',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'camera_make' => 'getCameraMake',
        'camera_model' => 'getCameraModel',
        'software' => 'getSoftware',
        'exposure_time' => 'getExposureTime',
        'focal_length' => 'getFocalLength',
        'image_orientation' => 'getImageOrientation',
        'aperture' => 'getAperture',
        'shutter_speed' => 'getShutterSpeed',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'altitude' => 'getAltitude',
        'iso_speed_rating' => 'getIsoSpeedRating',
        'series_timer_id' => 'getSeriesTimerId',
        'program_id' => 'getProgramId',
        'channel_primary_image_tag' => 'getChannelPrimaryImageTag',
        'start_date' => 'getStartDate',
        'completion_percentage' => 'getCompletionPercentage',
        'is_repeat' => 'getIsRepeat',
        'episode_title' => 'getEpisodeTitle',
        'channel_type' => 'getChannelType',
        'audio' => 'getAudio',
        'is_movie' => 'getIsMovie',
        'is_sports' => 'getIsSports',
        'is_series' => 'getIsSeries',
        'is_live' => 'getIsLive',
        'is_news' => 'getIsNews',
        'is_kids' => 'getIsKids',
        'is_premiere' => 'getIsPremiere',
        'timer_id' => 'getTimerId',
        'current_program' => 'getCurrentProgram'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_title', $data ?? [], null);
        $this->setIfExists('server_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('etag', $data ?? [], null);
        $this->setIfExists('source_type', $data ?? [], null);
        $this->setIfExists('playlist_item_id', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_last_media_added', $data ?? [], null);
        $this->setIfExists('extra_type', $data ?? [], null);
        $this->setIfExists('airs_before_season_number', $data ?? [], null);
        $this->setIfExists('airs_after_season_number', $data ?? [], null);
        $this->setIfExists('airs_before_episode_number', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('can_download', $data ?? [], null);
        $this->setIfExists('has_subtitles', $data ?? [], null);
        $this->setIfExists('preferred_metadata_language', $data ?? [], null);
        $this->setIfExists('preferred_metadata_country_code', $data ?? [], null);
        $this->setIfExists('supports_sync', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('sort_name', $data ?? [], null);
        $this->setIfExists('forced_sort_name', $data ?? [], null);
        $this->setIfExists('video3_d_format', $data ?? [], null);
        $this->setIfExists('premiere_date', $data ?? [], null);
        $this->setIfExists('external_urls', $data ?? [], null);
        $this->setIfExists('media_sources', $data ?? [], null);
        $this->setIfExists('critic_rating', $data ?? [], null);
        $this->setIfExists('production_locations', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('enable_media_source_display', $data ?? [], null);
        $this->setIfExists('official_rating', $data ?? [], null);
        $this->setIfExists('custom_rating', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('channel_name', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('taglines', $data ?? [], null);
        $this->setIfExists('genres', $data ?? [], null);
        $this->setIfExists('community_rating', $data ?? [], null);
        $this->setIfExists('cumulative_run_time_ticks', $data ?? [], null);
        $this->setIfExists('run_time_ticks', $data ?? [], null);
        $this->setIfExists('play_access', $data ?? [], null);
        $this->setIfExists('aspect_ratio', $data ?? [], null);
        $this->setIfExists('production_year', $data ?? [], null);
        $this->setIfExists('is_place_holder', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('channel_number', $data ?? [], null);
        $this->setIfExists('index_number', $data ?? [], null);
        $this->setIfExists('index_number_end', $data ?? [], null);
        $this->setIfExists('parent_index_number', $data ?? [], null);
        $this->setIfExists('remote_trailers', $data ?? [], null);
        $this->setIfExists('provider_ids', $data ?? [], null);
        $this->setIfExists('is_hd', $data ?? [], null);
        $this->setIfExists('is_folder', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('people', $data ?? [], null);
        $this->setIfExists('studios', $data ?? [], null);
        $this->setIfExists('genre_items', $data ?? [], null);
        $this->setIfExists('parent_logo_item_id', $data ?? [], null);
        $this->setIfExists('parent_backdrop_item_id', $data ?? [], null);
        $this->setIfExists('parent_backdrop_image_tags', $data ?? [], null);
        $this->setIfExists('local_trailer_count', $data ?? [], null);
        $this->setIfExists('user_data', $data ?? [], null);
        $this->setIfExists('recursive_item_count', $data ?? [], null);
        $this->setIfExists('child_count', $data ?? [], null);
        $this->setIfExists('series_name', $data ?? [], null);
        $this->setIfExists('series_id', $data ?? [], null);
        $this->setIfExists('season_id', $data ?? [], null);
        $this->setIfExists('special_feature_count', $data ?? [], null);
        $this->setIfExists('display_preferences_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('air_time', $data ?? [], null);
        $this->setIfExists('air_days', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('primary_image_aspect_ratio', $data ?? [], null);
        $this->setIfExists('artists', $data ?? [], null);
        $this->setIfExists('artist_items', $data ?? [], null);
        $this->setIfExists('album', $data ?? [], null);
        $this->setIfExists('collection_type', $data ?? [], null);
        $this->setIfExists('display_order', $data ?? [], null);
        $this->setIfExists('album_id', $data ?? [], null);
        $this->setIfExists('album_primary_image_tag', $data ?? [], null);
        $this->setIfExists('series_primary_image_tag', $data ?? [], null);
        $this->setIfExists('album_artist', $data ?? [], null);
        $this->setIfExists('album_artists', $data ?? [], null);
        $this->setIfExists('season_name', $data ?? [], null);
        $this->setIfExists('media_streams', $data ?? [], null);
        $this->setIfExists('video_type', $data ?? [], null);
        $this->setIfExists('part_count', $data ?? [], null);
        $this->setIfExists('media_source_count', $data ?? [], null);
        $this->setIfExists('image_tags', $data ?? [], null);
        $this->setIfExists('backdrop_image_tags', $data ?? [], null);
        $this->setIfExists('screenshot_image_tags', $data ?? [], null);
        $this->setIfExists('parent_logo_image_tag', $data ?? [], null);
        $this->setIfExists('parent_art_item_id', $data ?? [], null);
        $this->setIfExists('parent_art_image_tag', $data ?? [], null);
        $this->setIfExists('series_thumb_image_tag', $data ?? [], null);
        $this->setIfExists('image_blur_hashes', $data ?? [], null);
        $this->setIfExists('series_studio', $data ?? [], null);
        $this->setIfExists('parent_thumb_item_id', $data ?? [], null);
        $this->setIfExists('parent_thumb_image_tag', $data ?? [], null);
        $this->setIfExists('parent_primary_image_item_id', $data ?? [], null);
        $this->setIfExists('parent_primary_image_tag', $data ?? [], null);
        $this->setIfExists('chapters', $data ?? [], null);
        $this->setIfExists('location_type', $data ?? [], null);
        $this->setIfExists('iso_type', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('locked_fields', $data ?? [], null);
        $this->setIfExists('trailer_count', $data ?? [], null);
        $this->setIfExists('movie_count', $data ?? [], null);
        $this->setIfExists('series_count', $data ?? [], null);
        $this->setIfExists('program_count', $data ?? [], null);
        $this->setIfExists('episode_count', $data ?? [], null);
        $this->setIfExists('song_count', $data ?? [], null);
        $this->setIfExists('album_count', $data ?? [], null);
        $this->setIfExists('artist_count', $data ?? [], null);
        $this->setIfExists('music_video_count', $data ?? [], null);
        $this->setIfExists('lock_data', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('camera_make', $data ?? [], null);
        $this->setIfExists('camera_model', $data ?? [], null);
        $this->setIfExists('software', $data ?? [], null);
        $this->setIfExists('exposure_time', $data ?? [], null);
        $this->setIfExists('focal_length', $data ?? [], null);
        $this->setIfExists('image_orientation', $data ?? [], null);
        $this->setIfExists('aperture', $data ?? [], null);
        $this->setIfExists('shutter_speed', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('altitude', $data ?? [], null);
        $this->setIfExists('iso_speed_rating', $data ?? [], null);
        $this->setIfExists('series_timer_id', $data ?? [], null);
        $this->setIfExists('program_id', $data ?? [], null);
        $this->setIfExists('channel_primary_image_tag', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('completion_percentage', $data ?? [], null);
        $this->setIfExists('is_repeat', $data ?? [], null);
        $this->setIfExists('episode_title', $data ?? [], null);
        $this->setIfExists('channel_type', $data ?? [], null);
        $this->setIfExists('audio', $data ?? [], null);
        $this->setIfExists('is_movie', $data ?? [], null);
        $this->setIfExists('is_sports', $data ?? [], null);
        $this->setIfExists('is_series', $data ?? [], null);
        $this->setIfExists('is_live', $data ?? [], null);
        $this->setIfExists('is_news', $data ?? [], null);
        $this->setIfExists('is_kids', $data ?? [], null);
        $this->setIfExists('is_premiere', $data ?? [], null);
        $this->setIfExists('timer_id', $data ?? [], null);
        $this->setIfExists('current_program', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string|null
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string|null $original_title original_title
     *
     * @return self
     */
    public function setOriginalTitle($original_title)
    {
        if (is_null($original_title)) {
            array_push($this->openAPINullablesSetToNull, 'original_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id Gets or sets the server identifier.
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        if (is_null($server_id)) {
            array_push($this->openAPINullablesSetToNull, 'server_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['etag'];
    }

    /**
     * Sets etag
     *
     * @param string|null $etag Gets or sets the etag.
     *
     * @return self
     */
    public function setEtag($etag)
    {
        if (is_null($etag)) {
            array_push($this->openAPINullablesSetToNull, 'etag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('etag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['etag'] = $etag;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string|null
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string|null $source_type Gets or sets the type of the source.
     *
     * @return self
     */
    public function setSourceType($source_type)
    {
        if (is_null($source_type)) {
            array_push($this->openAPINullablesSetToNull, 'source_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets playlist_item_id
     *
     * @return string|null
     */
    public function getPlaylistItemId()
    {
        return $this->container['playlist_item_id'];
    }

    /**
     * Sets playlist_item_id
     *
     * @param string|null $playlist_item_id Gets or sets the playlist item identifier.
     *
     * @return self
     */
    public function setPlaylistItemId($playlist_item_id)
    {
        if (is_null($playlist_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'playlist_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist_item_id'] = $playlist_item_id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Gets or sets the date created.
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            array_push($this->openAPINullablesSetToNull, 'date_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_last_media_added
     *
     * @return \DateTime|null
     */
    public function getDateLastMediaAdded()
    {
        return $this->container['date_last_media_added'];
    }

    /**
     * Sets date_last_media_added
     *
     * @param \DateTime|null $date_last_media_added date_last_media_added
     *
     * @return self
     */
    public function setDateLastMediaAdded($date_last_media_added)
    {
        if (is_null($date_last_media_added)) {
            array_push($this->openAPINullablesSetToNull, 'date_last_media_added');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_last_media_added', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_last_media_added'] = $date_last_media_added;

        return $this;
    }

    /**
     * Gets extra_type
     *
     * @return string|null
     */
    public function getExtraType()
    {
        return $this->container['extra_type'];
    }

    /**
     * Sets extra_type
     *
     * @param string|null $extra_type extra_type
     *
     * @return self
     */
    public function setExtraType($extra_type)
    {
        if (is_null($extra_type)) {
            array_push($this->openAPINullablesSetToNull, 'extra_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extra_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extra_type'] = $extra_type;

        return $this;
    }

    /**
     * Gets airs_before_season_number
     *
     * @return int|null
     */
    public function getAirsBeforeSeasonNumber()
    {
        return $this->container['airs_before_season_number'];
    }

    /**
     * Sets airs_before_season_number
     *
     * @param int|null $airs_before_season_number airs_before_season_number
     *
     * @return self
     */
    public function setAirsBeforeSeasonNumber($airs_before_season_number)
    {
        if (is_null($airs_before_season_number)) {
            array_push($this->openAPINullablesSetToNull, 'airs_before_season_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('airs_before_season_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['airs_before_season_number'] = $airs_before_season_number;

        return $this;
    }

    /**
     * Gets airs_after_season_number
     *
     * @return int|null
     */
    public function getAirsAfterSeasonNumber()
    {
        return $this->container['airs_after_season_number'];
    }

    /**
     * Sets airs_after_season_number
     *
     * @param int|null $airs_after_season_number airs_after_season_number
     *
     * @return self
     */
    public function setAirsAfterSeasonNumber($airs_after_season_number)
    {
        if (is_null($airs_after_season_number)) {
            array_push($this->openAPINullablesSetToNull, 'airs_after_season_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('airs_after_season_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['airs_after_season_number'] = $airs_after_season_number;

        return $this;
    }

    /**
     * Gets airs_before_episode_number
     *
     * @return int|null
     */
    public function getAirsBeforeEpisodeNumber()
    {
        return $this->container['airs_before_episode_number'];
    }

    /**
     * Sets airs_before_episode_number
     *
     * @param int|null $airs_before_episode_number airs_before_episode_number
     *
     * @return self
     */
    public function setAirsBeforeEpisodeNumber($airs_before_episode_number)
    {
        if (is_null($airs_before_episode_number)) {
            array_push($this->openAPINullablesSetToNull, 'airs_before_episode_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('airs_before_episode_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['airs_before_episode_number'] = $airs_before_episode_number;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete can_delete
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            array_push($this->openAPINullablesSetToNull, 'can_delete');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('can_delete', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets can_download
     *
     * @return bool|null
     */
    public function getCanDownload()
    {
        return $this->container['can_download'];
    }

    /**
     * Sets can_download
     *
     * @param bool|null $can_download can_download
     *
     * @return self
     */
    public function setCanDownload($can_download)
    {
        if (is_null($can_download)) {
            array_push($this->openAPINullablesSetToNull, 'can_download');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('can_download', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['can_download'] = $can_download;

        return $this;
    }

    /**
     * Gets has_subtitles
     *
     * @return bool|null
     */
    public function getHasSubtitles()
    {
        return $this->container['has_subtitles'];
    }

    /**
     * Sets has_subtitles
     *
     * @param bool|null $has_subtitles has_subtitles
     *
     * @return self
     */
    public function setHasSubtitles($has_subtitles)
    {
        if (is_null($has_subtitles)) {
            array_push($this->openAPINullablesSetToNull, 'has_subtitles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_subtitles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_subtitles'] = $has_subtitles;

        return $this;
    }

    /**
     * Gets preferred_metadata_language
     *
     * @return string|null
     */
    public function getPreferredMetadataLanguage()
    {
        return $this->container['preferred_metadata_language'];
    }

    /**
     * Sets preferred_metadata_language
     *
     * @param string|null $preferred_metadata_language preferred_metadata_language
     *
     * @return self
     */
    public function setPreferredMetadataLanguage($preferred_metadata_language)
    {
        if (is_null($preferred_metadata_language)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_metadata_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_metadata_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_metadata_language'] = $preferred_metadata_language;

        return $this;
    }

    /**
     * Gets preferred_metadata_country_code
     *
     * @return string|null
     */
    public function getPreferredMetadataCountryCode()
    {
        return $this->container['preferred_metadata_country_code'];
    }

    /**
     * Sets preferred_metadata_country_code
     *
     * @param string|null $preferred_metadata_country_code preferred_metadata_country_code
     *
     * @return self
     */
    public function setPreferredMetadataCountryCode($preferred_metadata_country_code)
    {
        if (is_null($preferred_metadata_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_metadata_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_metadata_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_metadata_country_code'] = $preferred_metadata_country_code;

        return $this;
    }

    /**
     * Gets supports_sync
     *
     * @return bool|null
     */
    public function getSupportsSync()
    {
        return $this->container['supports_sync'];
    }

    /**
     * Sets supports_sync
     *
     * @param bool|null $supports_sync Gets or sets a value indicating whether [supports synchronize].
     *
     * @return self
     */
    public function setSupportsSync($supports_sync)
    {
        if (is_null($supports_sync)) {
            array_push($this->openAPINullablesSetToNull, 'supports_sync');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supports_sync', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supports_sync'] = $supports_sync;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container container
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            array_push($this->openAPINullablesSetToNull, 'container');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('container', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets sort_name
     *
     * @return string|null
     */
    public function getSortName()
    {
        return $this->container['sort_name'];
    }

    /**
     * Sets sort_name
     *
     * @param string|null $sort_name Gets or sets the name of the sort.
     *
     * @return self
     */
    public function setSortName($sort_name)
    {
        if (is_null($sort_name)) {
            array_push($this->openAPINullablesSetToNull, 'sort_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort_name'] = $sort_name;

        return $this;
    }

    /**
     * Gets forced_sort_name
     *
     * @return string|null
     */
    public function getForcedSortName()
    {
        return $this->container['forced_sort_name'];
    }

    /**
     * Sets forced_sort_name
     *
     * @param string|null $forced_sort_name forced_sort_name
     *
     * @return self
     */
    public function setForcedSortName($forced_sort_name)
    {
        if (is_null($forced_sort_name)) {
            array_push($this->openAPINullablesSetToNull, 'forced_sort_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forced_sort_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forced_sort_name'] = $forced_sort_name;

        return $this;
    }

    /**
     * Gets video3_d_format
     *
     * @return \OpenAPI\Client\Model\Video3DFormat|null
     */
    public function getVideo3DFormat()
    {
        return $this->container['video3_d_format'];
    }

    /**
     * Sets video3_d_format
     *
     * @param \OpenAPI\Client\Model\Video3DFormat|null $video3_d_format video3_d_format
     *
     * @return self
     */
    public function setVideo3DFormat($video3_d_format)
    {
        if (is_null($video3_d_format)) {
            array_push($this->openAPINullablesSetToNull, 'video3_d_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video3_d_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video3_d_format'] = $video3_d_format;

        return $this;
    }

    /**
     * Gets premiere_date
     *
     * @return \DateTime|null
     */
    public function getPremiereDate()
    {
        return $this->container['premiere_date'];
    }

    /**
     * Sets premiere_date
     *
     * @param \DateTime|null $premiere_date Gets or sets the premiere date.
     *
     * @return self
     */
    public function setPremiereDate($premiere_date)
    {
        if (is_null($premiere_date)) {
            array_push($this->openAPINullablesSetToNull, 'premiere_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('premiere_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['premiere_date'] = $premiere_date;

        return $this;
    }

    /**
     * Gets external_urls
     *
     * @return \OpenAPI\Client\Model\ExternalUrl[]|null
     */
    public function getExternalUrls()
    {
        return $this->container['external_urls'];
    }

    /**
     * Sets external_urls
     *
     * @param \OpenAPI\Client\Model\ExternalUrl[]|null $external_urls Gets or sets the external urls.
     *
     * @return self
     */
    public function setExternalUrls($external_urls)
    {
        if (is_null($external_urls)) {
            array_push($this->openAPINullablesSetToNull, 'external_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_urls'] = $external_urls;

        return $this;
    }

    /**
     * Gets media_sources
     *
     * @return \OpenAPI\Client\Model\MediaSourceInfo[]|null
     */
    public function getMediaSources()
    {
        return $this->container['media_sources'];
    }

    /**
     * Sets media_sources
     *
     * @param \OpenAPI\Client\Model\MediaSourceInfo[]|null $media_sources Gets or sets the media versions.
     *
     * @return self
     */
    public function setMediaSources($media_sources)
    {
        if (is_null($media_sources)) {
            array_push($this->openAPINullablesSetToNull, 'media_sources');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_sources', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_sources'] = $media_sources;

        return $this;
    }

    /**
     * Gets critic_rating
     *
     * @return float|null
     */
    public function getCriticRating()
    {
        return $this->container['critic_rating'];
    }

    /**
     * Sets critic_rating
     *
     * @param float|null $critic_rating Gets or sets the critic rating.
     *
     * @return self
     */
    public function setCriticRating($critic_rating)
    {
        if (is_null($critic_rating)) {
            array_push($this->openAPINullablesSetToNull, 'critic_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('critic_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['critic_rating'] = $critic_rating;

        return $this;
    }

    /**
     * Gets production_locations
     *
     * @return string[]|null
     */
    public function getProductionLocations()
    {
        return $this->container['production_locations'];
    }

    /**
     * Sets production_locations
     *
     * @param string[]|null $production_locations production_locations
     *
     * @return self
     */
    public function setProductionLocations($production_locations)
    {
        if (is_null($production_locations)) {
            array_push($this->openAPINullablesSetToNull, 'production_locations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('production_locations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['production_locations'] = $production_locations;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path Gets or sets the path.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets enable_media_source_display
     *
     * @return bool|null
     */
    public function getEnableMediaSourceDisplay()
    {
        return $this->container['enable_media_source_display'];
    }

    /**
     * Sets enable_media_source_display
     *
     * @param bool|null $enable_media_source_display enable_media_source_display
     *
     * @return self
     */
    public function setEnableMediaSourceDisplay($enable_media_source_display)
    {
        if (is_null($enable_media_source_display)) {
            array_push($this->openAPINullablesSetToNull, 'enable_media_source_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_media_source_display', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_media_source_display'] = $enable_media_source_display;

        return $this;
    }

    /**
     * Gets official_rating
     *
     * @return string|null
     */
    public function getOfficialRating()
    {
        return $this->container['official_rating'];
    }

    /**
     * Sets official_rating
     *
     * @param string|null $official_rating Gets or sets the official rating.
     *
     * @return self
     */
    public function setOfficialRating($official_rating)
    {
        if (is_null($official_rating)) {
            array_push($this->openAPINullablesSetToNull, 'official_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('official_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['official_rating'] = $official_rating;

        return $this;
    }

    /**
     * Gets custom_rating
     *
     * @return string|null
     */
    public function getCustomRating()
    {
        return $this->container['custom_rating'];
    }

    /**
     * Sets custom_rating
     *
     * @param string|null $custom_rating Gets or sets the custom rating.
     *
     * @return self
     */
    public function setCustomRating($custom_rating)
    {
        if (is_null($custom_rating)) {
            array_push($this->openAPINullablesSetToNull, 'custom_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_rating'] = $custom_rating;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id Gets or sets the channel identifier.
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            array_push($this->openAPINullablesSetToNull, 'channel_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string|null $channel_name channel_name
     *
     * @return self
     */
    public function setChannelName($channel_name)
    {
        if (is_null($channel_name)) {
            array_push($this->openAPINullablesSetToNull, 'channel_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string|null
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string|null $overview Gets or sets the overview.
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            array_push($this->openAPINullablesSetToNull, 'overview');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overview', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets taglines
     *
     * @return string[]|null
     */
    public function getTaglines()
    {
        return $this->container['taglines'];
    }

    /**
     * Sets taglines
     *
     * @param string[]|null $taglines Gets or sets the taglines.
     *
     * @return self
     */
    public function setTaglines($taglines)
    {
        if (is_null($taglines)) {
            array_push($this->openAPINullablesSetToNull, 'taglines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taglines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taglines'] = $taglines;

        return $this;
    }

    /**
     * Gets genres
     *
     * @return string[]|null
     */
    public function getGenres()
    {
        return $this->container['genres'];
    }

    /**
     * Sets genres
     *
     * @param string[]|null $genres Gets or sets the genres.
     *
     * @return self
     */
    public function setGenres($genres)
    {
        if (is_null($genres)) {
            array_push($this->openAPINullablesSetToNull, 'genres');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genres', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['genres'] = $genres;

        return $this;
    }

    /**
     * Gets community_rating
     *
     * @return float|null
     */
    public function getCommunityRating()
    {
        return $this->container['community_rating'];
    }

    /**
     * Sets community_rating
     *
     * @param float|null $community_rating Gets or sets the community rating.
     *
     * @return self
     */
    public function setCommunityRating($community_rating)
    {
        if (is_null($community_rating)) {
            array_push($this->openAPINullablesSetToNull, 'community_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('community_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['community_rating'] = $community_rating;

        return $this;
    }

    /**
     * Gets cumulative_run_time_ticks
     *
     * @return int|null
     */
    public function getCumulativeRunTimeTicks()
    {
        return $this->container['cumulative_run_time_ticks'];
    }

    /**
     * Sets cumulative_run_time_ticks
     *
     * @param int|null $cumulative_run_time_ticks Gets or sets the cumulative run time ticks.
     *
     * @return self
     */
    public function setCumulativeRunTimeTicks($cumulative_run_time_ticks)
    {
        if (is_null($cumulative_run_time_ticks)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_run_time_ticks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_run_time_ticks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_run_time_ticks'] = $cumulative_run_time_ticks;

        return $this;
    }

    /**
     * Gets run_time_ticks
     *
     * @return int|null
     */
    public function getRunTimeTicks()
    {
        return $this->container['run_time_ticks'];
    }

    /**
     * Sets run_time_ticks
     *
     * @param int|null $run_time_ticks Gets or sets the run time ticks.
     *
     * @return self
     */
    public function setRunTimeTicks($run_time_ticks)
    {
        if (is_null($run_time_ticks)) {
            array_push($this->openAPINullablesSetToNull, 'run_time_ticks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_time_ticks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_time_ticks'] = $run_time_ticks;

        return $this;
    }

    /**
     * Gets play_access
     *
     * @return \OpenAPI\Client\Model\PlayAccess|null
     */
    public function getPlayAccess()
    {
        return $this->container['play_access'];
    }

    /**
     * Sets play_access
     *
     * @param \OpenAPI\Client\Model\PlayAccess|null $play_access play_access
     *
     * @return self
     */
    public function setPlayAccess($play_access)
    {
        if (is_null($play_access)) {
            array_push($this->openAPINullablesSetToNull, 'play_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('play_access', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['play_access'] = $play_access;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string|null
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string|null $aspect_ratio Gets or sets the aspect ratio.
     *
     * @return self
     */
    public function setAspectRatio($aspect_ratio)
    {
        if (is_null($aspect_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'aspect_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aspect_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets production_year
     *
     * @return int|null
     */
    public function getProductionYear()
    {
        return $this->container['production_year'];
    }

    /**
     * Sets production_year
     *
     * @param int|null $production_year Gets or sets the production year.
     *
     * @return self
     */
    public function setProductionYear($production_year)
    {
        if (is_null($production_year)) {
            array_push($this->openAPINullablesSetToNull, 'production_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('production_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['production_year'] = $production_year;

        return $this;
    }

    /**
     * Gets is_place_holder
     *
     * @return bool|null
     */
    public function getIsPlaceHolder()
    {
        return $this->container['is_place_holder'];
    }

    /**
     * Sets is_place_holder
     *
     * @param bool|null $is_place_holder Gets or sets a value indicating whether this instance is place holder.
     *
     * @return self
     */
    public function setIsPlaceHolder($is_place_holder)
    {
        if (is_null($is_place_holder)) {
            array_push($this->openAPINullablesSetToNull, 'is_place_holder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_place_holder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_place_holder'] = $is_place_holder;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Gets or sets the number.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets channel_number
     *
     * @return string|null
     */
    public function getChannelNumber()
    {
        return $this->container['channel_number'];
    }

    /**
     * Sets channel_number
     *
     * @param string|null $channel_number channel_number
     *
     * @return self
     */
    public function setChannelNumber($channel_number)
    {
        if (is_null($channel_number)) {
            array_push($this->openAPINullablesSetToNull, 'channel_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_number'] = $channel_number;

        return $this;
    }

    /**
     * Gets index_number
     *
     * @return int|null
     */
    public function getIndexNumber()
    {
        return $this->container['index_number'];
    }

    /**
     * Sets index_number
     *
     * @param int|null $index_number Gets or sets the index number.
     *
     * @return self
     */
    public function setIndexNumber($index_number)
    {
        if (is_null($index_number)) {
            array_push($this->openAPINullablesSetToNull, 'index_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_number'] = $index_number;

        return $this;
    }

    /**
     * Gets index_number_end
     *
     * @return int|null
     */
    public function getIndexNumberEnd()
    {
        return $this->container['index_number_end'];
    }

    /**
     * Sets index_number_end
     *
     * @param int|null $index_number_end Gets or sets the index number end.
     *
     * @return self
     */
    public function setIndexNumberEnd($index_number_end)
    {
        if (is_null($index_number_end)) {
            array_push($this->openAPINullablesSetToNull, 'index_number_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_number_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_number_end'] = $index_number_end;

        return $this;
    }

    /**
     * Gets parent_index_number
     *
     * @return int|null
     */
    public function getParentIndexNumber()
    {
        return $this->container['parent_index_number'];
    }

    /**
     * Sets parent_index_number
     *
     * @param int|null $parent_index_number Gets or sets the parent index number.
     *
     * @return self
     */
    public function setParentIndexNumber($parent_index_number)
    {
        if (is_null($parent_index_number)) {
            array_push($this->openAPINullablesSetToNull, 'parent_index_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_index_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_index_number'] = $parent_index_number;

        return $this;
    }

    /**
     * Gets remote_trailers
     *
     * @return \OpenAPI\Client\Model\MediaUrl[]|null
     */
    public function getRemoteTrailers()
    {
        return $this->container['remote_trailers'];
    }

    /**
     * Sets remote_trailers
     *
     * @param \OpenAPI\Client\Model\MediaUrl[]|null $remote_trailers Gets or sets the trailer urls.
     *
     * @return self
     */
    public function setRemoteTrailers($remote_trailers)
    {
        if (is_null($remote_trailers)) {
            array_push($this->openAPINullablesSetToNull, 'remote_trailers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remote_trailers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remote_trailers'] = $remote_trailers;

        return $this;
    }

    /**
     * Gets provider_ids
     *
     * @return array<string,string>|null
     */
    public function getProviderIds()
    {
        return $this->container['provider_ids'];
    }

    /**
     * Sets provider_ids
     *
     * @param array<string,string>|null $provider_ids Gets or sets the provider ids.
     *
     * @return self
     */
    public function setProviderIds($provider_ids)
    {
        if (is_null($provider_ids)) {
            array_push($this->openAPINullablesSetToNull, 'provider_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_ids'] = $provider_ids;

        return $this;
    }

    /**
     * Gets is_hd
     *
     * @return bool|null
     */
    public function getIsHd()
    {
        return $this->container['is_hd'];
    }

    /**
     * Sets is_hd
     *
     * @param bool|null $is_hd Gets or sets a value indicating whether this instance is HD.
     *
     * @return self
     */
    public function setIsHd($is_hd)
    {
        if (is_null($is_hd)) {
            array_push($this->openAPINullablesSetToNull, 'is_hd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_hd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_hd'] = $is_hd;

        return $this;
    }

    /**
     * Gets is_folder
     *
     * @return bool|null
     */
    public function getIsFolder()
    {
        return $this->container['is_folder'];
    }

    /**
     * Sets is_folder
     *
     * @param bool|null $is_folder Gets or sets a value indicating whether this instance is folder.
     *
     * @return self
     */
    public function setIsFolder($is_folder)
    {
        if (is_null($is_folder)) {
            array_push($this->openAPINullablesSetToNull, 'is_folder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_folder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_folder'] = $is_folder;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id Gets or sets the parent id.
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\BaseItemKind|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\BaseItemKind|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets people
     *
     * @return \OpenAPI\Client\Model\BaseItemPerson[]|null
     */
    public function getPeople()
    {
        return $this->container['people'];
    }

    /**
     * Sets people
     *
     * @param \OpenAPI\Client\Model\BaseItemPerson[]|null $people Gets or sets the people.
     *
     * @return self
     */
    public function setPeople($people)
    {
        if (is_null($people)) {
            array_push($this->openAPINullablesSetToNull, 'people');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('people', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['people'] = $people;

        return $this;
    }

    /**
     * Gets studios
     *
     * @return \OpenAPI\Client\Model\NameGuidPair[]|null
     */
    public function getStudios()
    {
        return $this->container['studios'];
    }

    /**
     * Sets studios
     *
     * @param \OpenAPI\Client\Model\NameGuidPair[]|null $studios Gets or sets the studios.
     *
     * @return self
     */
    public function setStudios($studios)
    {
        if (is_null($studios)) {
            array_push($this->openAPINullablesSetToNull, 'studios');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studios', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studios'] = $studios;

        return $this;
    }

    /**
     * Gets genre_items
     *
     * @return \OpenAPI\Client\Model\NameGuidPair[]|null
     */
    public function getGenreItems()
    {
        return $this->container['genre_items'];
    }

    /**
     * Sets genre_items
     *
     * @param \OpenAPI\Client\Model\NameGuidPair[]|null $genre_items genre_items
     *
     * @return self
     */
    public function setGenreItems($genre_items)
    {
        if (is_null($genre_items)) {
            array_push($this->openAPINullablesSetToNull, 'genre_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genre_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['genre_items'] = $genre_items;

        return $this;
    }

    /**
     * Gets parent_logo_item_id
     *
     * @return string|null
     */
    public function getParentLogoItemId()
    {
        return $this->container['parent_logo_item_id'];
    }

    /**
     * Sets parent_logo_item_id
     *
     * @param string|null $parent_logo_item_id Gets or sets wether the item has a logo, this will hold the Id of the Parent that has one.
     *
     * @return self
     */
    public function setParentLogoItemId($parent_logo_item_id)
    {
        if (is_null($parent_logo_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_logo_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_logo_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_logo_item_id'] = $parent_logo_item_id;

        return $this;
    }

    /**
     * Gets parent_backdrop_item_id
     *
     * @return string|null
     */
    public function getParentBackdropItemId()
    {
        return $this->container['parent_backdrop_item_id'];
    }

    /**
     * Sets parent_backdrop_item_id
     *
     * @param string|null $parent_backdrop_item_id Gets or sets wether the item has any backdrops, this will hold the Id of the Parent that has one.
     *
     * @return self
     */
    public function setParentBackdropItemId($parent_backdrop_item_id)
    {
        if (is_null($parent_backdrop_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_backdrop_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_backdrop_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_backdrop_item_id'] = $parent_backdrop_item_id;

        return $this;
    }

    /**
     * Gets parent_backdrop_image_tags
     *
     * @return string[]|null
     */
    public function getParentBackdropImageTags()
    {
        return $this->container['parent_backdrop_image_tags'];
    }

    /**
     * Sets parent_backdrop_image_tags
     *
     * @param string[]|null $parent_backdrop_image_tags Gets or sets the parent backdrop image tags.
     *
     * @return self
     */
    public function setParentBackdropImageTags($parent_backdrop_image_tags)
    {
        if (is_null($parent_backdrop_image_tags)) {
            array_push($this->openAPINullablesSetToNull, 'parent_backdrop_image_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_backdrop_image_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_backdrop_image_tags'] = $parent_backdrop_image_tags;

        return $this;
    }

    /**
     * Gets local_trailer_count
     *
     * @return int|null
     */
    public function getLocalTrailerCount()
    {
        return $this->container['local_trailer_count'];
    }

    /**
     * Sets local_trailer_count
     *
     * @param int|null $local_trailer_count Gets or sets the local trailer count.
     *
     * @return self
     */
    public function setLocalTrailerCount($local_trailer_count)
    {
        if (is_null($local_trailer_count)) {
            array_push($this->openAPINullablesSetToNull, 'local_trailer_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_trailer_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_trailer_count'] = $local_trailer_count;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return \OpenAPI\Client\Model\BaseItemDtoUserData|null
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param \OpenAPI\Client\Model\BaseItemDtoUserData|null $user_data user_data
     *
     * @return self
     */
    public function setUserData($user_data)
    {
        if (is_null($user_data)) {
            array_push($this->openAPINullablesSetToNull, 'user_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_data'] = $user_data;

        return $this;
    }

    /**
     * Gets recursive_item_count
     *
     * @return int|null
     */
    public function getRecursiveItemCount()
    {
        return $this->container['recursive_item_count'];
    }

    /**
     * Sets recursive_item_count
     *
     * @param int|null $recursive_item_count Gets or sets the recursive item count.
     *
     * @return self
     */
    public function setRecursiveItemCount($recursive_item_count)
    {
        if (is_null($recursive_item_count)) {
            array_push($this->openAPINullablesSetToNull, 'recursive_item_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recursive_item_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recursive_item_count'] = $recursive_item_count;

        return $this;
    }

    /**
     * Gets child_count
     *
     * @return int|null
     */
    public function getChildCount()
    {
        return $this->container['child_count'];
    }

    /**
     * Sets child_count
     *
     * @param int|null $child_count Gets or sets the child count.
     *
     * @return self
     */
    public function setChildCount($child_count)
    {
        if (is_null($child_count)) {
            array_push($this->openAPINullablesSetToNull, 'child_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('child_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['child_count'] = $child_count;

        return $this;
    }

    /**
     * Gets series_name
     *
     * @return string|null
     */
    public function getSeriesName()
    {
        return $this->container['series_name'];
    }

    /**
     * Sets series_name
     *
     * @param string|null $series_name Gets or sets the name of the series.
     *
     * @return self
     */
    public function setSeriesName($series_name)
    {
        if (is_null($series_name)) {
            array_push($this->openAPINullablesSetToNull, 'series_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_name'] = $series_name;

        return $this;
    }

    /**
     * Gets series_id
     *
     * @return string|null
     */
    public function getSeriesId()
    {
        return $this->container['series_id'];
    }

    /**
     * Sets series_id
     *
     * @param string|null $series_id Gets or sets the series id.
     *
     * @return self
     */
    public function setSeriesId($series_id)
    {
        if (is_null($series_id)) {
            array_push($this->openAPINullablesSetToNull, 'series_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_id'] = $series_id;

        return $this;
    }

    /**
     * Gets season_id
     *
     * @return string|null
     */
    public function getSeasonId()
    {
        return $this->container['season_id'];
    }

    /**
     * Sets season_id
     *
     * @param string|null $season_id Gets or sets the season identifier.
     *
     * @return self
     */
    public function setSeasonId($season_id)
    {
        if (is_null($season_id)) {
            array_push($this->openAPINullablesSetToNull, 'season_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('season_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['season_id'] = $season_id;

        return $this;
    }

    /**
     * Gets special_feature_count
     *
     * @return int|null
     */
    public function getSpecialFeatureCount()
    {
        return $this->container['special_feature_count'];
    }

    /**
     * Sets special_feature_count
     *
     * @param int|null $special_feature_count Gets or sets the special feature count.
     *
     * @return self
     */
    public function setSpecialFeatureCount($special_feature_count)
    {
        if (is_null($special_feature_count)) {
            array_push($this->openAPINullablesSetToNull, 'special_feature_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_feature_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['special_feature_count'] = $special_feature_count;

        return $this;
    }

    /**
     * Gets display_preferences_id
     *
     * @return string|null
     */
    public function getDisplayPreferencesId()
    {
        return $this->container['display_preferences_id'];
    }

    /**
     * Sets display_preferences_id
     *
     * @param string|null $display_preferences_id Gets or sets the display preferences id.
     *
     * @return self
     */
    public function setDisplayPreferencesId($display_preferences_id)
    {
        if (is_null($display_preferences_id)) {
            array_push($this->openAPINullablesSetToNull, 'display_preferences_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_preferences_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_preferences_id'] = $display_preferences_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Gets or sets the status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets air_time
     *
     * @return string|null
     */
    public function getAirTime()
    {
        return $this->container['air_time'];
    }

    /**
     * Sets air_time
     *
     * @param string|null $air_time Gets or sets the air time.
     *
     * @return self
     */
    public function setAirTime($air_time)
    {
        if (is_null($air_time)) {
            array_push($this->openAPINullablesSetToNull, 'air_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('air_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['air_time'] = $air_time;

        return $this;
    }

    /**
     * Gets air_days
     *
     * @return \OpenAPI\Client\Model\DayOfWeek[]|null
     */
    public function getAirDays()
    {
        return $this->container['air_days'];
    }

    /**
     * Sets air_days
     *
     * @param \OpenAPI\Client\Model\DayOfWeek[]|null $air_days Gets or sets the air days.
     *
     * @return self
     */
    public function setAirDays($air_days)
    {
        if (is_null($air_days)) {
            array_push($this->openAPINullablesSetToNull, 'air_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('air_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['air_days'] = $air_days;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Gets or sets the tags.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets primary_image_aspect_ratio
     *
     * @return float|null
     */
    public function getPrimaryImageAspectRatio()
    {
        return $this->container['primary_image_aspect_ratio'];
    }

    /**
     * Sets primary_image_aspect_ratio
     *
     * @param float|null $primary_image_aspect_ratio Gets or sets the primary image aspect ratio, after image enhancements.
     *
     * @return self
     */
    public function setPrimaryImageAspectRatio($primary_image_aspect_ratio)
    {
        if (is_null($primary_image_aspect_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'primary_image_aspect_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_image_aspect_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_image_aspect_ratio'] = $primary_image_aspect_ratio;

        return $this;
    }

    /**
     * Gets artists
     *
     * @return string[]|null
     */
    public function getArtists()
    {
        return $this->container['artists'];
    }

    /**
     * Sets artists
     *
     * @param string[]|null $artists Gets or sets the artists.
     *
     * @return self
     */
    public function setArtists($artists)
    {
        if (is_null($artists)) {
            array_push($this->openAPINullablesSetToNull, 'artists');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artists', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['artists'] = $artists;

        return $this;
    }

    /**
     * Gets artist_items
     *
     * @return \OpenAPI\Client\Model\NameGuidPair[]|null
     */
    public function getArtistItems()
    {
        return $this->container['artist_items'];
    }

    /**
     * Sets artist_items
     *
     * @param \OpenAPI\Client\Model\NameGuidPair[]|null $artist_items Gets or sets the artist items.
     *
     * @return self
     */
    public function setArtistItems($artist_items)
    {
        if (is_null($artist_items)) {
            array_push($this->openAPINullablesSetToNull, 'artist_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artist_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['artist_items'] = $artist_items;

        return $this;
    }

    /**
     * Gets album
     *
     * @return string|null
     */
    public function getAlbum()
    {
        return $this->container['album'];
    }

    /**
     * Sets album
     *
     * @param string|null $album Gets or sets the album.
     *
     * @return self
     */
    public function setAlbum($album)
    {
        if (is_null($album)) {
            array_push($this->openAPINullablesSetToNull, 'album');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album'] = $album;

        return $this;
    }

    /**
     * Gets collection_type
     *
     * @return string|null
     */
    public function getCollectionType()
    {
        return $this->container['collection_type'];
    }

    /**
     * Sets collection_type
     *
     * @param string|null $collection_type Gets or sets the type of the collection.
     *
     * @return self
     */
    public function setCollectionType($collection_type)
    {
        if (is_null($collection_type)) {
            array_push($this->openAPINullablesSetToNull, 'collection_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collection_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['collection_type'] = $collection_type;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return string|null
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param string|null $display_order Gets or sets the display order.
     *
     * @return self
     */
    public function setDisplayOrder($display_order)
    {
        if (is_null($display_order)) {
            array_push($this->openAPINullablesSetToNull, 'display_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets album_id
     *
     * @return string|null
     */
    public function getAlbumId()
    {
        return $this->container['album_id'];
    }

    /**
     * Sets album_id
     *
     * @param string|null $album_id Gets or sets the album id.
     *
     * @return self
     */
    public function setAlbumId($album_id)
    {
        if (is_null($album_id)) {
            array_push($this->openAPINullablesSetToNull, 'album_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_id'] = $album_id;

        return $this;
    }

    /**
     * Gets album_primary_image_tag
     *
     * @return string|null
     */
    public function getAlbumPrimaryImageTag()
    {
        return $this->container['album_primary_image_tag'];
    }

    /**
     * Sets album_primary_image_tag
     *
     * @param string|null $album_primary_image_tag Gets or sets the album image tag.
     *
     * @return self
     */
    public function setAlbumPrimaryImageTag($album_primary_image_tag)
    {
        if (is_null($album_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'album_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_primary_image_tag'] = $album_primary_image_tag;

        return $this;
    }

    /**
     * Gets series_primary_image_tag
     *
     * @return string|null
     */
    public function getSeriesPrimaryImageTag()
    {
        return $this->container['series_primary_image_tag'];
    }

    /**
     * Sets series_primary_image_tag
     *
     * @param string|null $series_primary_image_tag Gets or sets the series primary image tag.
     *
     * @return self
     */
    public function setSeriesPrimaryImageTag($series_primary_image_tag)
    {
        if (is_null($series_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'series_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_primary_image_tag'] = $series_primary_image_tag;

        return $this;
    }

    /**
     * Gets album_artist
     *
     * @return string|null
     */
    public function getAlbumArtist()
    {
        return $this->container['album_artist'];
    }

    /**
     * Sets album_artist
     *
     * @param string|null $album_artist Gets or sets the album artist.
     *
     * @return self
     */
    public function setAlbumArtist($album_artist)
    {
        if (is_null($album_artist)) {
            array_push($this->openAPINullablesSetToNull, 'album_artist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_artist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_artist'] = $album_artist;

        return $this;
    }

    /**
     * Gets album_artists
     *
     * @return \OpenAPI\Client\Model\NameGuidPair[]|null
     */
    public function getAlbumArtists()
    {
        return $this->container['album_artists'];
    }

    /**
     * Sets album_artists
     *
     * @param \OpenAPI\Client\Model\NameGuidPair[]|null $album_artists Gets or sets the album artists.
     *
     * @return self
     */
    public function setAlbumArtists($album_artists)
    {
        if (is_null($album_artists)) {
            array_push($this->openAPINullablesSetToNull, 'album_artists');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_artists', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_artists'] = $album_artists;

        return $this;
    }

    /**
     * Gets season_name
     *
     * @return string|null
     */
    public function getSeasonName()
    {
        return $this->container['season_name'];
    }

    /**
     * Sets season_name
     *
     * @param string|null $season_name Gets or sets the name of the season.
     *
     * @return self
     */
    public function setSeasonName($season_name)
    {
        if (is_null($season_name)) {
            array_push($this->openAPINullablesSetToNull, 'season_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('season_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['season_name'] = $season_name;

        return $this;
    }

    /**
     * Gets media_streams
     *
     * @return \OpenAPI\Client\Model\MediaStream[]|null
     */
    public function getMediaStreams()
    {
        return $this->container['media_streams'];
    }

    /**
     * Sets media_streams
     *
     * @param \OpenAPI\Client\Model\MediaStream[]|null $media_streams Gets or sets the media streams.
     *
     * @return self
     */
    public function setMediaStreams($media_streams)
    {
        if (is_null($media_streams)) {
            array_push($this->openAPINullablesSetToNull, 'media_streams');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_streams', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_streams'] = $media_streams;

        return $this;
    }

    /**
     * Gets video_type
     *
     * @return \OpenAPI\Client\Model\VideoType|null
     */
    public function getVideoType()
    {
        return $this->container['video_type'];
    }

    /**
     * Sets video_type
     *
     * @param \OpenAPI\Client\Model\VideoType|null $video_type video_type
     *
     * @return self
     */
    public function setVideoType($video_type)
    {
        if (is_null($video_type)) {
            array_push($this->openAPINullablesSetToNull, 'video_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_type'] = $video_type;

        return $this;
    }

    /**
     * Gets part_count
     *
     * @return int|null
     */
    public function getPartCount()
    {
        return $this->container['part_count'];
    }

    /**
     * Sets part_count
     *
     * @param int|null $part_count Gets or sets the part count.
     *
     * @return self
     */
    public function setPartCount($part_count)
    {
        if (is_null($part_count)) {
            array_push($this->openAPINullablesSetToNull, 'part_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('part_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['part_count'] = $part_count;

        return $this;
    }

    /**
     * Gets media_source_count
     *
     * @return int|null
     */
    public function getMediaSourceCount()
    {
        return $this->container['media_source_count'];
    }

    /**
     * Sets media_source_count
     *
     * @param int|null $media_source_count media_source_count
     *
     * @return self
     */
    public function setMediaSourceCount($media_source_count)
    {
        if (is_null($media_source_count)) {
            array_push($this->openAPINullablesSetToNull, 'media_source_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_source_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_source_count'] = $media_source_count;

        return $this;
    }

    /**
     * Gets image_tags
     *
     * @return array<string,string>|null
     */
    public function getImageTags()
    {
        return $this->container['image_tags'];
    }

    /**
     * Sets image_tags
     *
     * @param array<string,string>|null $image_tags Gets or sets the image tags.
     *
     * @return self
     */
    public function setImageTags($image_tags)
    {
        if (is_null($image_tags)) {
            array_push($this->openAPINullablesSetToNull, 'image_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_tags'] = $image_tags;

        return $this;
    }

    /**
     * Gets backdrop_image_tags
     *
     * @return string[]|null
     */
    public function getBackdropImageTags()
    {
        return $this->container['backdrop_image_tags'];
    }

    /**
     * Sets backdrop_image_tags
     *
     * @param string[]|null $backdrop_image_tags Gets or sets the backdrop image tags.
     *
     * @return self
     */
    public function setBackdropImageTags($backdrop_image_tags)
    {
        if (is_null($backdrop_image_tags)) {
            array_push($this->openAPINullablesSetToNull, 'backdrop_image_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backdrop_image_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backdrop_image_tags'] = $backdrop_image_tags;

        return $this;
    }

    /**
     * Gets screenshot_image_tags
     *
     * @return string[]|null
     */
    public function getScreenshotImageTags()
    {
        return $this->container['screenshot_image_tags'];
    }

    /**
     * Sets screenshot_image_tags
     *
     * @param string[]|null $screenshot_image_tags Gets or sets the screenshot image tags.
     *
     * @return self
     */
    public function setScreenshotImageTags($screenshot_image_tags)
    {
        if (is_null($screenshot_image_tags)) {
            array_push($this->openAPINullablesSetToNull, 'screenshot_image_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screenshot_image_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screenshot_image_tags'] = $screenshot_image_tags;

        return $this;
    }

    /**
     * Gets parent_logo_image_tag
     *
     * @return string|null
     */
    public function getParentLogoImageTag()
    {
        return $this->container['parent_logo_image_tag'];
    }

    /**
     * Sets parent_logo_image_tag
     *
     * @param string|null $parent_logo_image_tag Gets or sets the parent logo image tag.
     *
     * @return self
     */
    public function setParentLogoImageTag($parent_logo_image_tag)
    {
        if (is_null($parent_logo_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'parent_logo_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_logo_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_logo_image_tag'] = $parent_logo_image_tag;

        return $this;
    }

    /**
     * Gets parent_art_item_id
     *
     * @return string|null
     */
    public function getParentArtItemId()
    {
        return $this->container['parent_art_item_id'];
    }

    /**
     * Sets parent_art_item_id
     *
     * @param string|null $parent_art_item_id Gets or sets wether the item has fan art, this will hold the Id of the Parent that has one.
     *
     * @return self
     */
    public function setParentArtItemId($parent_art_item_id)
    {
        if (is_null($parent_art_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_art_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_art_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_art_item_id'] = $parent_art_item_id;

        return $this;
    }

    /**
     * Gets parent_art_image_tag
     *
     * @return string|null
     */
    public function getParentArtImageTag()
    {
        return $this->container['parent_art_image_tag'];
    }

    /**
     * Sets parent_art_image_tag
     *
     * @param string|null $parent_art_image_tag Gets or sets the parent art image tag.
     *
     * @return self
     */
    public function setParentArtImageTag($parent_art_image_tag)
    {
        if (is_null($parent_art_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'parent_art_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_art_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_art_image_tag'] = $parent_art_image_tag;

        return $this;
    }

    /**
     * Gets series_thumb_image_tag
     *
     * @return string|null
     */
    public function getSeriesThumbImageTag()
    {
        return $this->container['series_thumb_image_tag'];
    }

    /**
     * Sets series_thumb_image_tag
     *
     * @param string|null $series_thumb_image_tag Gets or sets the series thumb image tag.
     *
     * @return self
     */
    public function setSeriesThumbImageTag($series_thumb_image_tag)
    {
        if (is_null($series_thumb_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'series_thumb_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_thumb_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_thumb_image_tag'] = $series_thumb_image_tag;

        return $this;
    }

    /**
     * Gets image_blur_hashes
     *
     * @return \OpenAPI\Client\Model\BaseItemDtoImageBlurHashes|null
     */
    public function getImageBlurHashes()
    {
        return $this->container['image_blur_hashes'];
    }

    /**
     * Sets image_blur_hashes
     *
     * @param \OpenAPI\Client\Model\BaseItemDtoImageBlurHashes|null $image_blur_hashes image_blur_hashes
     *
     * @return self
     */
    public function setImageBlurHashes($image_blur_hashes)
    {
        if (is_null($image_blur_hashes)) {
            array_push($this->openAPINullablesSetToNull, 'image_blur_hashes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_blur_hashes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_blur_hashes'] = $image_blur_hashes;

        return $this;
    }

    /**
     * Gets series_studio
     *
     * @return string|null
     */
    public function getSeriesStudio()
    {
        return $this->container['series_studio'];
    }

    /**
     * Sets series_studio
     *
     * @param string|null $series_studio Gets or sets the series studio.
     *
     * @return self
     */
    public function setSeriesStudio($series_studio)
    {
        if (is_null($series_studio)) {
            array_push($this->openAPINullablesSetToNull, 'series_studio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_studio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_studio'] = $series_studio;

        return $this;
    }

    /**
     * Gets parent_thumb_item_id
     *
     * @return string|null
     */
    public function getParentThumbItemId()
    {
        return $this->container['parent_thumb_item_id'];
    }

    /**
     * Sets parent_thumb_item_id
     *
     * @param string|null $parent_thumb_item_id Gets or sets the parent thumb item id.
     *
     * @return self
     */
    public function setParentThumbItemId($parent_thumb_item_id)
    {
        if (is_null($parent_thumb_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_thumb_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_thumb_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_thumb_item_id'] = $parent_thumb_item_id;

        return $this;
    }

    /**
     * Gets parent_thumb_image_tag
     *
     * @return string|null
     */
    public function getParentThumbImageTag()
    {
        return $this->container['parent_thumb_image_tag'];
    }

    /**
     * Sets parent_thumb_image_tag
     *
     * @param string|null $parent_thumb_image_tag Gets or sets the parent thumb image tag.
     *
     * @return self
     */
    public function setParentThumbImageTag($parent_thumb_image_tag)
    {
        if (is_null($parent_thumb_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'parent_thumb_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_thumb_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_thumb_image_tag'] = $parent_thumb_image_tag;

        return $this;
    }

    /**
     * Gets parent_primary_image_item_id
     *
     * @return string|null
     */
    public function getParentPrimaryImageItemId()
    {
        return $this->container['parent_primary_image_item_id'];
    }

    /**
     * Sets parent_primary_image_item_id
     *
     * @param string|null $parent_primary_image_item_id Gets or sets the parent primary image item identifier.
     *
     * @return self
     */
    public function setParentPrimaryImageItemId($parent_primary_image_item_id)
    {
        if (is_null($parent_primary_image_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_primary_image_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_primary_image_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_primary_image_item_id'] = $parent_primary_image_item_id;

        return $this;
    }

    /**
     * Gets parent_primary_image_tag
     *
     * @return string|null
     */
    public function getParentPrimaryImageTag()
    {
        return $this->container['parent_primary_image_tag'];
    }

    /**
     * Sets parent_primary_image_tag
     *
     * @param string|null $parent_primary_image_tag Gets or sets the parent primary image tag.
     *
     * @return self
     */
    public function setParentPrimaryImageTag($parent_primary_image_tag)
    {
        if (is_null($parent_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'parent_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_primary_image_tag'] = $parent_primary_image_tag;

        return $this;
    }

    /**
     * Gets chapters
     *
     * @return \OpenAPI\Client\Model\ChapterInfo[]|null
     */
    public function getChapters()
    {
        return $this->container['chapters'];
    }

    /**
     * Sets chapters
     *
     * @param \OpenAPI\Client\Model\ChapterInfo[]|null $chapters Gets or sets the chapters.
     *
     * @return self
     */
    public function setChapters($chapters)
    {
        if (is_null($chapters)) {
            array_push($this->openAPINullablesSetToNull, 'chapters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chapters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chapters'] = $chapters;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return \OpenAPI\Client\Model\LocationType|null
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param \OpenAPI\Client\Model\LocationType|null $location_type location_type
     *
     * @return self
     */
    public function setLocationType($location_type)
    {
        if (is_null($location_type)) {
            array_push($this->openAPINullablesSetToNull, 'location_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets iso_type
     *
     * @return \OpenAPI\Client\Model\IsoType|null
     */
    public function getIsoType()
    {
        return $this->container['iso_type'];
    }

    /**
     * Sets iso_type
     *
     * @param \OpenAPI\Client\Model\IsoType|null $iso_type iso_type
     *
     * @return self
     */
    public function setIsoType($iso_type)
    {
        if (is_null($iso_type)) {
            array_push($this->openAPINullablesSetToNull, 'iso_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iso_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iso_type'] = $iso_type;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string|null $media_type Gets or sets the type of the media.
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            array_push($this->openAPINullablesSetToNull, 'media_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Gets or sets the end date.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets locked_fields
     *
     * @return \OpenAPI\Client\Model\MetadataField[]|null
     */
    public function getLockedFields()
    {
        return $this->container['locked_fields'];
    }

    /**
     * Sets locked_fields
     *
     * @param \OpenAPI\Client\Model\MetadataField[]|null $locked_fields Gets or sets the locked fields.
     *
     * @return self
     */
    public function setLockedFields($locked_fields)
    {
        if (is_null($locked_fields)) {
            array_push($this->openAPINullablesSetToNull, 'locked_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locked_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locked_fields'] = $locked_fields;

        return $this;
    }

    /**
     * Gets trailer_count
     *
     * @return int|null
     */
    public function getTrailerCount()
    {
        return $this->container['trailer_count'];
    }

    /**
     * Sets trailer_count
     *
     * @param int|null $trailer_count Gets or sets the trailer count.
     *
     * @return self
     */
    public function setTrailerCount($trailer_count)
    {
        if (is_null($trailer_count)) {
            array_push($this->openAPINullablesSetToNull, 'trailer_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trailer_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trailer_count'] = $trailer_count;

        return $this;
    }

    /**
     * Gets movie_count
     *
     * @return int|null
     */
    public function getMovieCount()
    {
        return $this->container['movie_count'];
    }

    /**
     * Sets movie_count
     *
     * @param int|null $movie_count Gets or sets the movie count.
     *
     * @return self
     */
    public function setMovieCount($movie_count)
    {
        if (is_null($movie_count)) {
            array_push($this->openAPINullablesSetToNull, 'movie_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movie_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movie_count'] = $movie_count;

        return $this;
    }

    /**
     * Gets series_count
     *
     * @return int|null
     */
    public function getSeriesCount()
    {
        return $this->container['series_count'];
    }

    /**
     * Sets series_count
     *
     * @param int|null $series_count Gets or sets the series count.
     *
     * @return self
     */
    public function setSeriesCount($series_count)
    {
        if (is_null($series_count)) {
            array_push($this->openAPINullablesSetToNull, 'series_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_count'] = $series_count;

        return $this;
    }

    /**
     * Gets program_count
     *
     * @return int|null
     */
    public function getProgramCount()
    {
        return $this->container['program_count'];
    }

    /**
     * Sets program_count
     *
     * @param int|null $program_count program_count
     *
     * @return self
     */
    public function setProgramCount($program_count)
    {
        if (is_null($program_count)) {
            array_push($this->openAPINullablesSetToNull, 'program_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_count'] = $program_count;

        return $this;
    }

    /**
     * Gets episode_count
     *
     * @return int|null
     */
    public function getEpisodeCount()
    {
        return $this->container['episode_count'];
    }

    /**
     * Sets episode_count
     *
     * @param int|null $episode_count Gets or sets the episode count.
     *
     * @return self
     */
    public function setEpisodeCount($episode_count)
    {
        if (is_null($episode_count)) {
            array_push($this->openAPINullablesSetToNull, 'episode_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('episode_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['episode_count'] = $episode_count;

        return $this;
    }

    /**
     * Gets song_count
     *
     * @return int|null
     */
    public function getSongCount()
    {
        return $this->container['song_count'];
    }

    /**
     * Sets song_count
     *
     * @param int|null $song_count Gets or sets the song count.
     *
     * @return self
     */
    public function setSongCount($song_count)
    {
        if (is_null($song_count)) {
            array_push($this->openAPINullablesSetToNull, 'song_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('song_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['song_count'] = $song_count;

        return $this;
    }

    /**
     * Gets album_count
     *
     * @return int|null
     */
    public function getAlbumCount()
    {
        return $this->container['album_count'];
    }

    /**
     * Sets album_count
     *
     * @param int|null $album_count Gets or sets the album count.
     *
     * @return self
     */
    public function setAlbumCount($album_count)
    {
        if (is_null($album_count)) {
            array_push($this->openAPINullablesSetToNull, 'album_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_count'] = $album_count;

        return $this;
    }

    /**
     * Gets artist_count
     *
     * @return int|null
     */
    public function getArtistCount()
    {
        return $this->container['artist_count'];
    }

    /**
     * Sets artist_count
     *
     * @param int|null $artist_count artist_count
     *
     * @return self
     */
    public function setArtistCount($artist_count)
    {
        if (is_null($artist_count)) {
            array_push($this->openAPINullablesSetToNull, 'artist_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artist_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['artist_count'] = $artist_count;

        return $this;
    }

    /**
     * Gets music_video_count
     *
     * @return int|null
     */
    public function getMusicVideoCount()
    {
        return $this->container['music_video_count'];
    }

    /**
     * Sets music_video_count
     *
     * @param int|null $music_video_count Gets or sets the music video count.
     *
     * @return self
     */
    public function setMusicVideoCount($music_video_count)
    {
        if (is_null($music_video_count)) {
            array_push($this->openAPINullablesSetToNull, 'music_video_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('music_video_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['music_video_count'] = $music_video_count;

        return $this;
    }

    /**
     * Gets lock_data
     *
     * @return bool|null
     */
    public function getLockData()
    {
        return $this->container['lock_data'];
    }

    /**
     * Sets lock_data
     *
     * @param bool|null $lock_data Gets or sets a value indicating whether [enable internet providers].
     *
     * @return self
     */
    public function setLockData($lock_data)
    {
        if (is_null($lock_data)) {
            array_push($this->openAPINullablesSetToNull, 'lock_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lock_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lock_data'] = $lock_data;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets camera_make
     *
     * @return string|null
     */
    public function getCameraMake()
    {
        return $this->container['camera_make'];
    }

    /**
     * Sets camera_make
     *
     * @param string|null $camera_make camera_make
     *
     * @return self
     */
    public function setCameraMake($camera_make)
    {
        if (is_null($camera_make)) {
            array_push($this->openAPINullablesSetToNull, 'camera_make');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('camera_make', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['camera_make'] = $camera_make;

        return $this;
    }

    /**
     * Gets camera_model
     *
     * @return string|null
     */
    public function getCameraModel()
    {
        return $this->container['camera_model'];
    }

    /**
     * Sets camera_model
     *
     * @param string|null $camera_model camera_model
     *
     * @return self
     */
    public function setCameraModel($camera_model)
    {
        if (is_null($camera_model)) {
            array_push($this->openAPINullablesSetToNull, 'camera_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('camera_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['camera_model'] = $camera_model;

        return $this;
    }

    /**
     * Gets software
     *
     * @return string|null
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param string|null $software software
     *
     * @return self
     */
    public function setSoftware($software)
    {
        if (is_null($software)) {
            array_push($this->openAPINullablesSetToNull, 'software');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('software', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets exposure_time
     *
     * @return float|null
     */
    public function getExposureTime()
    {
        return $this->container['exposure_time'];
    }

    /**
     * Sets exposure_time
     *
     * @param float|null $exposure_time exposure_time
     *
     * @return self
     */
    public function setExposureTime($exposure_time)
    {
        if (is_null($exposure_time)) {
            array_push($this->openAPINullablesSetToNull, 'exposure_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exposure_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exposure_time'] = $exposure_time;

        return $this;
    }

    /**
     * Gets focal_length
     *
     * @return float|null
     */
    public function getFocalLength()
    {
        return $this->container['focal_length'];
    }

    /**
     * Sets focal_length
     *
     * @param float|null $focal_length focal_length
     *
     * @return self
     */
    public function setFocalLength($focal_length)
    {
        if (is_null($focal_length)) {
            array_push($this->openAPINullablesSetToNull, 'focal_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('focal_length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['focal_length'] = $focal_length;

        return $this;
    }

    /**
     * Gets image_orientation
     *
     * @return \OpenAPI\Client\Model\ImageOrientation|null
     */
    public function getImageOrientation()
    {
        return $this->container['image_orientation'];
    }

    /**
     * Sets image_orientation
     *
     * @param \OpenAPI\Client\Model\ImageOrientation|null $image_orientation image_orientation
     *
     * @return self
     */
    public function setImageOrientation($image_orientation)
    {
        if (is_null($image_orientation)) {
            array_push($this->openAPINullablesSetToNull, 'image_orientation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_orientation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_orientation'] = $image_orientation;

        return $this;
    }

    /**
     * Gets aperture
     *
     * @return float|null
     */
    public function getAperture()
    {
        return $this->container['aperture'];
    }

    /**
     * Sets aperture
     *
     * @param float|null $aperture aperture
     *
     * @return self
     */
    public function setAperture($aperture)
    {
        if (is_null($aperture)) {
            array_push($this->openAPINullablesSetToNull, 'aperture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aperture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aperture'] = $aperture;

        return $this;
    }

    /**
     * Gets shutter_speed
     *
     * @return float|null
     */
    public function getShutterSpeed()
    {
        return $this->container['shutter_speed'];
    }

    /**
     * Sets shutter_speed
     *
     * @param float|null $shutter_speed shutter_speed
     *
     * @return self
     */
    public function setShutterSpeed($shutter_speed)
    {
        if (is_null($shutter_speed)) {
            array_push($this->openAPINullablesSetToNull, 'shutter_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shutter_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shutter_speed'] = $shutter_speed;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            array_push($this->openAPINullablesSetToNull, 'latitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            array_push($this->openAPINullablesSetToNull, 'longitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets altitude
     *
     * @return float|null
     */
    public function getAltitude()
    {
        return $this->container['altitude'];
    }

    /**
     * Sets altitude
     *
     * @param float|null $altitude altitude
     *
     * @return self
     */
    public function setAltitude($altitude)
    {
        if (is_null($altitude)) {
            array_push($this->openAPINullablesSetToNull, 'altitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('altitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['altitude'] = $altitude;

        return $this;
    }

    /**
     * Gets iso_speed_rating
     *
     * @return int|null
     */
    public function getIsoSpeedRating()
    {
        return $this->container['iso_speed_rating'];
    }

    /**
     * Sets iso_speed_rating
     *
     * @param int|null $iso_speed_rating iso_speed_rating
     *
     * @return self
     */
    public function setIsoSpeedRating($iso_speed_rating)
    {
        if (is_null($iso_speed_rating)) {
            array_push($this->openAPINullablesSetToNull, 'iso_speed_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iso_speed_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iso_speed_rating'] = $iso_speed_rating;

        return $this;
    }

    /**
     * Gets series_timer_id
     *
     * @return string|null
     */
    public function getSeriesTimerId()
    {
        return $this->container['series_timer_id'];
    }

    /**
     * Sets series_timer_id
     *
     * @param string|null $series_timer_id Gets or sets the series timer identifier.
     *
     * @return self
     */
    public function setSeriesTimerId($series_timer_id)
    {
        if (is_null($series_timer_id)) {
            array_push($this->openAPINullablesSetToNull, 'series_timer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series_timer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series_timer_id'] = $series_timer_id;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return string|null
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param string|null $program_id Gets or sets the program identifier.
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        if (is_null($program_id)) {
            array_push($this->openAPINullablesSetToNull, 'program_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets channel_primary_image_tag
     *
     * @return string|null
     */
    public function getChannelPrimaryImageTag()
    {
        return $this->container['channel_primary_image_tag'];
    }

    /**
     * Sets channel_primary_image_tag
     *
     * @param string|null $channel_primary_image_tag Gets or sets the channel primary image tag.
     *
     * @return self
     */
    public function setChannelPrimaryImageTag($channel_primary_image_tag)
    {
        if (is_null($channel_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'channel_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_primary_image_tag'] = $channel_primary_image_tag;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Gets or sets the start date of the recording, in UTC.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets completion_percentage
     *
     * @return float|null
     */
    public function getCompletionPercentage()
    {
        return $this->container['completion_percentage'];
    }

    /**
     * Sets completion_percentage
     *
     * @param float|null $completion_percentage Gets or sets the completion percentage.
     *
     * @return self
     */
    public function setCompletionPercentage($completion_percentage)
    {
        if (is_null($completion_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'completion_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completion_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completion_percentage'] = $completion_percentage;

        return $this;
    }

    /**
     * Gets is_repeat
     *
     * @return bool|null
     */
    public function getIsRepeat()
    {
        return $this->container['is_repeat'];
    }

    /**
     * Sets is_repeat
     *
     * @param bool|null $is_repeat Gets or sets a value indicating whether this instance is repeat.
     *
     * @return self
     */
    public function setIsRepeat($is_repeat)
    {
        if (is_null($is_repeat)) {
            array_push($this->openAPINullablesSetToNull, 'is_repeat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_repeat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_repeat'] = $is_repeat;

        return $this;
    }

    /**
     * Gets episode_title
     *
     * @return string|null
     */
    public function getEpisodeTitle()
    {
        return $this->container['episode_title'];
    }

    /**
     * Sets episode_title
     *
     * @param string|null $episode_title Gets or sets the episode title.
     *
     * @return self
     */
    public function setEpisodeTitle($episode_title)
    {
        if (is_null($episode_title)) {
            array_push($this->openAPINullablesSetToNull, 'episode_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('episode_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['episode_title'] = $episode_title;

        return $this;
    }

    /**
     * Gets channel_type
     *
     * @return \OpenAPI\Client\Model\ChannelType|null
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param \OpenAPI\Client\Model\ChannelType|null $channel_type channel_type
     *
     * @return self
     */
    public function setChannelType($channel_type)
    {
        if (is_null($channel_type)) {
            array_push($this->openAPINullablesSetToNull, 'channel_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return \OpenAPI\Client\Model\ProgramAudio|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param \OpenAPI\Client\Model\ProgramAudio|null $audio audio
     *
     * @return self
     */
    public function setAudio($audio)
    {
        if (is_null($audio)) {
            array_push($this->openAPINullablesSetToNull, 'audio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets is_movie
     *
     * @return bool|null
     */
    public function getIsMovie()
    {
        return $this->container['is_movie'];
    }

    /**
     * Sets is_movie
     *
     * @param bool|null $is_movie Gets or sets a value indicating whether this instance is movie.
     *
     * @return self
     */
    public function setIsMovie($is_movie)
    {
        if (is_null($is_movie)) {
            array_push($this->openAPINullablesSetToNull, 'is_movie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_movie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_movie'] = $is_movie;

        return $this;
    }

    /**
     * Gets is_sports
     *
     * @return bool|null
     */
    public function getIsSports()
    {
        return $this->container['is_sports'];
    }

    /**
     * Sets is_sports
     *
     * @param bool|null $is_sports Gets or sets a value indicating whether this instance is sports.
     *
     * @return self
     */
    public function setIsSports($is_sports)
    {
        if (is_null($is_sports)) {
            array_push($this->openAPINullablesSetToNull, 'is_sports');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_sports', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_sports'] = $is_sports;

        return $this;
    }

    /**
     * Gets is_series
     *
     * @return bool|null
     */
    public function getIsSeries()
    {
        return $this->container['is_series'];
    }

    /**
     * Sets is_series
     *
     * @param bool|null $is_series Gets or sets a value indicating whether this instance is series.
     *
     * @return self
     */
    public function setIsSeries($is_series)
    {
        if (is_null($is_series)) {
            array_push($this->openAPINullablesSetToNull, 'is_series');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_series', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_series'] = $is_series;

        return $this;
    }

    /**
     * Gets is_live
     *
     * @return bool|null
     */
    public function getIsLive()
    {
        return $this->container['is_live'];
    }

    /**
     * Sets is_live
     *
     * @param bool|null $is_live Gets or sets a value indicating whether this instance is live.
     *
     * @return self
     */
    public function setIsLive($is_live)
    {
        if (is_null($is_live)) {
            array_push($this->openAPINullablesSetToNull, 'is_live');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_live', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_live'] = $is_live;

        return $this;
    }

    /**
     * Gets is_news
     *
     * @return bool|null
     */
    public function getIsNews()
    {
        return $this->container['is_news'];
    }

    /**
     * Sets is_news
     *
     * @param bool|null $is_news Gets or sets a value indicating whether this instance is news.
     *
     * @return self
     */
    public function setIsNews($is_news)
    {
        if (is_null($is_news)) {
            array_push($this->openAPINullablesSetToNull, 'is_news');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_news', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_news'] = $is_news;

        return $this;
    }

    /**
     * Gets is_kids
     *
     * @return bool|null
     */
    public function getIsKids()
    {
        return $this->container['is_kids'];
    }

    /**
     * Sets is_kids
     *
     * @param bool|null $is_kids Gets or sets a value indicating whether this instance is kids.
     *
     * @return self
     */
    public function setIsKids($is_kids)
    {
        if (is_null($is_kids)) {
            array_push($this->openAPINullablesSetToNull, 'is_kids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_kids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_kids'] = $is_kids;

        return $this;
    }

    /**
     * Gets is_premiere
     *
     * @return bool|null
     */
    public function getIsPremiere()
    {
        return $this->container['is_premiere'];
    }

    /**
     * Sets is_premiere
     *
     * @param bool|null $is_premiere Gets or sets a value indicating whether this instance is premiere.
     *
     * @return self
     */
    public function setIsPremiere($is_premiere)
    {
        if (is_null($is_premiere)) {
            array_push($this->openAPINullablesSetToNull, 'is_premiere');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_premiere', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_premiere'] = $is_premiere;

        return $this;
    }

    /**
     * Gets timer_id
     *
     * @return string|null
     */
    public function getTimerId()
    {
        return $this->container['timer_id'];
    }

    /**
     * Sets timer_id
     *
     * @param string|null $timer_id Gets or sets the timer identifier.
     *
     * @return self
     */
    public function setTimerId($timer_id)
    {
        if (is_null($timer_id)) {
            array_push($this->openAPINullablesSetToNull, 'timer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timer_id'] = $timer_id;

        return $this;
    }

    /**
     * Gets current_program
     *
     * @return \OpenAPI\Client\Model\BaseItemDtoCurrentProgram|null
     */
    public function getCurrentProgram()
    {
        return $this->container['current_program'];
    }

    /**
     * Sets current_program
     *
     * @param \OpenAPI\Client\Model\BaseItemDtoCurrentProgram|null $current_program current_program
     *
     * @return self
     */
    public function setCurrentProgram($current_program)
    {
        if (is_null($current_program)) {
            array_push($this->openAPINullablesSetToNull, 'current_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_program', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_program'] = $current_program;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


