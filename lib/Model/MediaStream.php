<?php
/**
 * MediaStream
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MediaStream Class Doc Comment
 *
 * @category Class
 * @description Class MediaStream.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MediaStream implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MediaStream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'codec' => 'string',
        'codec_tag' => 'string',
        'language' => 'string',
        'color_range' => 'string',
        'color_space' => 'string',
        'color_transfer' => 'string',
        'color_primaries' => 'string',
        'dv_version_major' => 'int',
        'dv_version_minor' => 'int',
        'dv_profile' => 'int',
        'dv_level' => 'int',
        'rpu_present_flag' => 'int',
        'el_present_flag' => 'int',
        'bl_present_flag' => 'int',
        'dv_bl_signal_compatibility_id' => 'int',
        'comment' => 'string',
        'time_base' => 'string',
        'codec_time_base' => 'string',
        'title' => 'string',
        'video_range' => 'string',
        'video_range_type' => 'string',
        'video_do_vi_title' => 'string',
        'localized_undefined' => 'string',
        'localized_default' => 'string',
        'localized_forced' => 'string',
        'localized_external' => 'string',
        'display_title' => 'string',
        'nal_length_size' => 'string',
        'is_interlaced' => 'bool',
        'is_avc' => 'bool',
        'channel_layout' => 'string',
        'bit_rate' => 'int',
        'bit_depth' => 'int',
        'ref_frames' => 'int',
        'packet_length' => 'int',
        'channels' => 'int',
        'sample_rate' => 'int',
        'is_default' => 'bool',
        'is_forced' => 'bool',
        'height' => 'int',
        'width' => 'int',
        'average_frame_rate' => 'float',
        'real_frame_rate' => 'float',
        'profile' => 'string',
        'type' => '\OpenAPI\Client\Model\MediaStreamType',
        'aspect_ratio' => 'string',
        'index' => 'int',
        'score' => 'int',
        'is_external' => 'bool',
        'delivery_method' => '\OpenAPI\Client\Model\SubtitleDeliveryMethod',
        'delivery_url' => 'string',
        'is_external_url' => 'bool',
        'is_text_subtitle_stream' => 'bool',
        'supports_external_stream' => 'bool',
        'path' => 'string',
        'pixel_format' => 'string',
        'level' => 'float',
        'is_anamorphic' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'codec' => null,
        'codec_tag' => null,
        'language' => null,
        'color_range' => null,
        'color_space' => null,
        'color_transfer' => null,
        'color_primaries' => null,
        'dv_version_major' => 'int32',
        'dv_version_minor' => 'int32',
        'dv_profile' => 'int32',
        'dv_level' => 'int32',
        'rpu_present_flag' => 'int32',
        'el_present_flag' => 'int32',
        'bl_present_flag' => 'int32',
        'dv_bl_signal_compatibility_id' => 'int32',
        'comment' => null,
        'time_base' => null,
        'codec_time_base' => null,
        'title' => null,
        'video_range' => null,
        'video_range_type' => null,
        'video_do_vi_title' => null,
        'localized_undefined' => null,
        'localized_default' => null,
        'localized_forced' => null,
        'localized_external' => null,
        'display_title' => null,
        'nal_length_size' => null,
        'is_interlaced' => null,
        'is_avc' => null,
        'channel_layout' => null,
        'bit_rate' => 'int32',
        'bit_depth' => 'int32',
        'ref_frames' => 'int32',
        'packet_length' => 'int32',
        'channels' => 'int32',
        'sample_rate' => 'int32',
        'is_default' => null,
        'is_forced' => null,
        'height' => 'int32',
        'width' => 'int32',
        'average_frame_rate' => 'float',
        'real_frame_rate' => 'float',
        'profile' => null,
        'type' => null,
        'aspect_ratio' => null,
        'index' => 'int32',
        'score' => 'int32',
        'is_external' => null,
        'delivery_method' => null,
        'delivery_url' => null,
        'is_external_url' => null,
        'is_text_subtitle_stream' => null,
        'supports_external_stream' => null,
        'path' => null,
        'pixel_format' => null,
        'level' => 'double',
        'is_anamorphic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'codec' => true,
		'codec_tag' => true,
		'language' => true,
		'color_range' => true,
		'color_space' => true,
		'color_transfer' => true,
		'color_primaries' => true,
		'dv_version_major' => true,
		'dv_version_minor' => true,
		'dv_profile' => true,
		'dv_level' => true,
		'rpu_present_flag' => true,
		'el_present_flag' => true,
		'bl_present_flag' => true,
		'dv_bl_signal_compatibility_id' => true,
		'comment' => true,
		'time_base' => true,
		'codec_time_base' => true,
		'title' => true,
		'video_range' => true,
		'video_range_type' => true,
		'video_do_vi_title' => true,
		'localized_undefined' => true,
		'localized_default' => true,
		'localized_forced' => true,
		'localized_external' => true,
		'display_title' => true,
		'nal_length_size' => true,
		'is_interlaced' => false,
		'is_avc' => true,
		'channel_layout' => true,
		'bit_rate' => true,
		'bit_depth' => true,
		'ref_frames' => true,
		'packet_length' => true,
		'channels' => true,
		'sample_rate' => true,
		'is_default' => false,
		'is_forced' => false,
		'height' => true,
		'width' => true,
		'average_frame_rate' => true,
		'real_frame_rate' => true,
		'profile' => true,
		'type' => false,
		'aspect_ratio' => true,
		'index' => false,
		'score' => true,
		'is_external' => false,
		'delivery_method' => true,
		'delivery_url' => true,
		'is_external_url' => true,
		'is_text_subtitle_stream' => false,
		'supports_external_stream' => false,
		'path' => true,
		'pixel_format' => true,
		'level' => true,
		'is_anamorphic' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codec' => 'Codec',
        'codec_tag' => 'CodecTag',
        'language' => 'Language',
        'color_range' => 'ColorRange',
        'color_space' => 'ColorSpace',
        'color_transfer' => 'ColorTransfer',
        'color_primaries' => 'ColorPrimaries',
        'dv_version_major' => 'DvVersionMajor',
        'dv_version_minor' => 'DvVersionMinor',
        'dv_profile' => 'DvProfile',
        'dv_level' => 'DvLevel',
        'rpu_present_flag' => 'RpuPresentFlag',
        'el_present_flag' => 'ElPresentFlag',
        'bl_present_flag' => 'BlPresentFlag',
        'dv_bl_signal_compatibility_id' => 'DvBlSignalCompatibilityId',
        'comment' => 'Comment',
        'time_base' => 'TimeBase',
        'codec_time_base' => 'CodecTimeBase',
        'title' => 'Title',
        'video_range' => 'VideoRange',
        'video_range_type' => 'VideoRangeType',
        'video_do_vi_title' => 'VideoDoViTitle',
        'localized_undefined' => 'LocalizedUndefined',
        'localized_default' => 'LocalizedDefault',
        'localized_forced' => 'LocalizedForced',
        'localized_external' => 'LocalizedExternal',
        'display_title' => 'DisplayTitle',
        'nal_length_size' => 'NalLengthSize',
        'is_interlaced' => 'IsInterlaced',
        'is_avc' => 'IsAVC',
        'channel_layout' => 'ChannelLayout',
        'bit_rate' => 'BitRate',
        'bit_depth' => 'BitDepth',
        'ref_frames' => 'RefFrames',
        'packet_length' => 'PacketLength',
        'channels' => 'Channels',
        'sample_rate' => 'SampleRate',
        'is_default' => 'IsDefault',
        'is_forced' => 'IsForced',
        'height' => 'Height',
        'width' => 'Width',
        'average_frame_rate' => 'AverageFrameRate',
        'real_frame_rate' => 'RealFrameRate',
        'profile' => 'Profile',
        'type' => 'Type',
        'aspect_ratio' => 'AspectRatio',
        'index' => 'Index',
        'score' => 'Score',
        'is_external' => 'IsExternal',
        'delivery_method' => 'DeliveryMethod',
        'delivery_url' => 'DeliveryUrl',
        'is_external_url' => 'IsExternalUrl',
        'is_text_subtitle_stream' => 'IsTextSubtitleStream',
        'supports_external_stream' => 'SupportsExternalStream',
        'path' => 'Path',
        'pixel_format' => 'PixelFormat',
        'level' => 'Level',
        'is_anamorphic' => 'IsAnamorphic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codec' => 'setCodec',
        'codec_tag' => 'setCodecTag',
        'language' => 'setLanguage',
        'color_range' => 'setColorRange',
        'color_space' => 'setColorSpace',
        'color_transfer' => 'setColorTransfer',
        'color_primaries' => 'setColorPrimaries',
        'dv_version_major' => 'setDvVersionMajor',
        'dv_version_minor' => 'setDvVersionMinor',
        'dv_profile' => 'setDvProfile',
        'dv_level' => 'setDvLevel',
        'rpu_present_flag' => 'setRpuPresentFlag',
        'el_present_flag' => 'setElPresentFlag',
        'bl_present_flag' => 'setBlPresentFlag',
        'dv_bl_signal_compatibility_id' => 'setDvBlSignalCompatibilityId',
        'comment' => 'setComment',
        'time_base' => 'setTimeBase',
        'codec_time_base' => 'setCodecTimeBase',
        'title' => 'setTitle',
        'video_range' => 'setVideoRange',
        'video_range_type' => 'setVideoRangeType',
        'video_do_vi_title' => 'setVideoDoViTitle',
        'localized_undefined' => 'setLocalizedUndefined',
        'localized_default' => 'setLocalizedDefault',
        'localized_forced' => 'setLocalizedForced',
        'localized_external' => 'setLocalizedExternal',
        'display_title' => 'setDisplayTitle',
        'nal_length_size' => 'setNalLengthSize',
        'is_interlaced' => 'setIsInterlaced',
        'is_avc' => 'setIsAvc',
        'channel_layout' => 'setChannelLayout',
        'bit_rate' => 'setBitRate',
        'bit_depth' => 'setBitDepth',
        'ref_frames' => 'setRefFrames',
        'packet_length' => 'setPacketLength',
        'channels' => 'setChannels',
        'sample_rate' => 'setSampleRate',
        'is_default' => 'setIsDefault',
        'is_forced' => 'setIsForced',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'average_frame_rate' => 'setAverageFrameRate',
        'real_frame_rate' => 'setRealFrameRate',
        'profile' => 'setProfile',
        'type' => 'setType',
        'aspect_ratio' => 'setAspectRatio',
        'index' => 'setIndex',
        'score' => 'setScore',
        'is_external' => 'setIsExternal',
        'delivery_method' => 'setDeliveryMethod',
        'delivery_url' => 'setDeliveryUrl',
        'is_external_url' => 'setIsExternalUrl',
        'is_text_subtitle_stream' => 'setIsTextSubtitleStream',
        'supports_external_stream' => 'setSupportsExternalStream',
        'path' => 'setPath',
        'pixel_format' => 'setPixelFormat',
        'level' => 'setLevel',
        'is_anamorphic' => 'setIsAnamorphic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codec' => 'getCodec',
        'codec_tag' => 'getCodecTag',
        'language' => 'getLanguage',
        'color_range' => 'getColorRange',
        'color_space' => 'getColorSpace',
        'color_transfer' => 'getColorTransfer',
        'color_primaries' => 'getColorPrimaries',
        'dv_version_major' => 'getDvVersionMajor',
        'dv_version_minor' => 'getDvVersionMinor',
        'dv_profile' => 'getDvProfile',
        'dv_level' => 'getDvLevel',
        'rpu_present_flag' => 'getRpuPresentFlag',
        'el_present_flag' => 'getElPresentFlag',
        'bl_present_flag' => 'getBlPresentFlag',
        'dv_bl_signal_compatibility_id' => 'getDvBlSignalCompatibilityId',
        'comment' => 'getComment',
        'time_base' => 'getTimeBase',
        'codec_time_base' => 'getCodecTimeBase',
        'title' => 'getTitle',
        'video_range' => 'getVideoRange',
        'video_range_type' => 'getVideoRangeType',
        'video_do_vi_title' => 'getVideoDoViTitle',
        'localized_undefined' => 'getLocalizedUndefined',
        'localized_default' => 'getLocalizedDefault',
        'localized_forced' => 'getLocalizedForced',
        'localized_external' => 'getLocalizedExternal',
        'display_title' => 'getDisplayTitle',
        'nal_length_size' => 'getNalLengthSize',
        'is_interlaced' => 'getIsInterlaced',
        'is_avc' => 'getIsAvc',
        'channel_layout' => 'getChannelLayout',
        'bit_rate' => 'getBitRate',
        'bit_depth' => 'getBitDepth',
        'ref_frames' => 'getRefFrames',
        'packet_length' => 'getPacketLength',
        'channels' => 'getChannels',
        'sample_rate' => 'getSampleRate',
        'is_default' => 'getIsDefault',
        'is_forced' => 'getIsForced',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'average_frame_rate' => 'getAverageFrameRate',
        'real_frame_rate' => 'getRealFrameRate',
        'profile' => 'getProfile',
        'type' => 'getType',
        'aspect_ratio' => 'getAspectRatio',
        'index' => 'getIndex',
        'score' => 'getScore',
        'is_external' => 'getIsExternal',
        'delivery_method' => 'getDeliveryMethod',
        'delivery_url' => 'getDeliveryUrl',
        'is_external_url' => 'getIsExternalUrl',
        'is_text_subtitle_stream' => 'getIsTextSubtitleStream',
        'supports_external_stream' => 'getSupportsExternalStream',
        'path' => 'getPath',
        'pixel_format' => 'getPixelFormat',
        'level' => 'getLevel',
        'is_anamorphic' => 'getIsAnamorphic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('codec', $data ?? [], null);
        $this->setIfExists('codec_tag', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('color_range', $data ?? [], null);
        $this->setIfExists('color_space', $data ?? [], null);
        $this->setIfExists('color_transfer', $data ?? [], null);
        $this->setIfExists('color_primaries', $data ?? [], null);
        $this->setIfExists('dv_version_major', $data ?? [], null);
        $this->setIfExists('dv_version_minor', $data ?? [], null);
        $this->setIfExists('dv_profile', $data ?? [], null);
        $this->setIfExists('dv_level', $data ?? [], null);
        $this->setIfExists('rpu_present_flag', $data ?? [], null);
        $this->setIfExists('el_present_flag', $data ?? [], null);
        $this->setIfExists('bl_present_flag', $data ?? [], null);
        $this->setIfExists('dv_bl_signal_compatibility_id', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('time_base', $data ?? [], null);
        $this->setIfExists('codec_time_base', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('video_range', $data ?? [], null);
        $this->setIfExists('video_range_type', $data ?? [], null);
        $this->setIfExists('video_do_vi_title', $data ?? [], null);
        $this->setIfExists('localized_undefined', $data ?? [], null);
        $this->setIfExists('localized_default', $data ?? [], null);
        $this->setIfExists('localized_forced', $data ?? [], null);
        $this->setIfExists('localized_external', $data ?? [], null);
        $this->setIfExists('display_title', $data ?? [], null);
        $this->setIfExists('nal_length_size', $data ?? [], null);
        $this->setIfExists('is_interlaced', $data ?? [], null);
        $this->setIfExists('is_avc', $data ?? [], null);
        $this->setIfExists('channel_layout', $data ?? [], null);
        $this->setIfExists('bit_rate', $data ?? [], null);
        $this->setIfExists('bit_depth', $data ?? [], null);
        $this->setIfExists('ref_frames', $data ?? [], null);
        $this->setIfExists('packet_length', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('sample_rate', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('is_forced', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('average_frame_rate', $data ?? [], null);
        $this->setIfExists('real_frame_rate', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('aspect_ratio', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('delivery_method', $data ?? [], null);
        $this->setIfExists('delivery_url', $data ?? [], null);
        $this->setIfExists('is_external_url', $data ?? [], null);
        $this->setIfExists('is_text_subtitle_stream', $data ?? [], null);
        $this->setIfExists('supports_external_stream', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('pixel_format', $data ?? [], null);
        $this->setIfExists('level', $data ?? [], null);
        $this->setIfExists('is_anamorphic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codec
     *
     * @return string|null
     */
    public function getCodec()
    {
        return $this->container['codec'];
    }

    /**
     * Sets codec
     *
     * @param string|null $codec Gets or sets the codec.
     *
     * @return self
     */
    public function setCodec($codec)
    {
        if (is_null($codec)) {
            array_push($this->openAPINullablesSetToNull, 'codec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codec'] = $codec;

        return $this;
    }

    /**
     * Gets codec_tag
     *
     * @return string|null
     */
    public function getCodecTag()
    {
        return $this->container['codec_tag'];
    }

    /**
     * Sets codec_tag
     *
     * @param string|null $codec_tag Gets or sets the codec tag.
     *
     * @return self
     */
    public function setCodecTag($codec_tag)
    {
        if (is_null($codec_tag)) {
            array_push($this->openAPINullablesSetToNull, 'codec_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codec_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codec_tag'] = $codec_tag;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Gets or sets the language.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets color_range
     *
     * @return string|null
     */
    public function getColorRange()
    {
        return $this->container['color_range'];
    }

    /**
     * Sets color_range
     *
     * @param string|null $color_range Gets or sets the color range.
     *
     * @return self
     */
    public function setColorRange($color_range)
    {
        if (is_null($color_range)) {
            array_push($this->openAPINullablesSetToNull, 'color_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color_range'] = $color_range;

        return $this;
    }

    /**
     * Gets color_space
     *
     * @return string|null
     */
    public function getColorSpace()
    {
        return $this->container['color_space'];
    }

    /**
     * Sets color_space
     *
     * @param string|null $color_space Gets or sets the color space.
     *
     * @return self
     */
    public function setColorSpace($color_space)
    {
        if (is_null($color_space)) {
            array_push($this->openAPINullablesSetToNull, 'color_space');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_space', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color_space'] = $color_space;

        return $this;
    }

    /**
     * Gets color_transfer
     *
     * @return string|null
     */
    public function getColorTransfer()
    {
        return $this->container['color_transfer'];
    }

    /**
     * Sets color_transfer
     *
     * @param string|null $color_transfer Gets or sets the color transfer.
     *
     * @return self
     */
    public function setColorTransfer($color_transfer)
    {
        if (is_null($color_transfer)) {
            array_push($this->openAPINullablesSetToNull, 'color_transfer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_transfer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color_transfer'] = $color_transfer;

        return $this;
    }

    /**
     * Gets color_primaries
     *
     * @return string|null
     */
    public function getColorPrimaries()
    {
        return $this->container['color_primaries'];
    }

    /**
     * Sets color_primaries
     *
     * @param string|null $color_primaries Gets or sets the color primaries.
     *
     * @return self
     */
    public function setColorPrimaries($color_primaries)
    {
        if (is_null($color_primaries)) {
            array_push($this->openAPINullablesSetToNull, 'color_primaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_primaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color_primaries'] = $color_primaries;

        return $this;
    }

    /**
     * Gets dv_version_major
     *
     * @return int|null
     */
    public function getDvVersionMajor()
    {
        return $this->container['dv_version_major'];
    }

    /**
     * Sets dv_version_major
     *
     * @param int|null $dv_version_major Gets or sets the Dolby Vision version major.
     *
     * @return self
     */
    public function setDvVersionMajor($dv_version_major)
    {
        if (is_null($dv_version_major)) {
            array_push($this->openAPINullablesSetToNull, 'dv_version_major');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dv_version_major', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dv_version_major'] = $dv_version_major;

        return $this;
    }

    /**
     * Gets dv_version_minor
     *
     * @return int|null
     */
    public function getDvVersionMinor()
    {
        return $this->container['dv_version_minor'];
    }

    /**
     * Sets dv_version_minor
     *
     * @param int|null $dv_version_minor Gets or sets the Dolby Vision version minor.
     *
     * @return self
     */
    public function setDvVersionMinor($dv_version_minor)
    {
        if (is_null($dv_version_minor)) {
            array_push($this->openAPINullablesSetToNull, 'dv_version_minor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dv_version_minor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dv_version_minor'] = $dv_version_minor;

        return $this;
    }

    /**
     * Gets dv_profile
     *
     * @return int|null
     */
    public function getDvProfile()
    {
        return $this->container['dv_profile'];
    }

    /**
     * Sets dv_profile
     *
     * @param int|null $dv_profile Gets or sets the Dolby Vision profile.
     *
     * @return self
     */
    public function setDvProfile($dv_profile)
    {
        if (is_null($dv_profile)) {
            array_push($this->openAPINullablesSetToNull, 'dv_profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dv_profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dv_profile'] = $dv_profile;

        return $this;
    }

    /**
     * Gets dv_level
     *
     * @return int|null
     */
    public function getDvLevel()
    {
        return $this->container['dv_level'];
    }

    /**
     * Sets dv_level
     *
     * @param int|null $dv_level Gets or sets the Dolby Vision level.
     *
     * @return self
     */
    public function setDvLevel($dv_level)
    {
        if (is_null($dv_level)) {
            array_push($this->openAPINullablesSetToNull, 'dv_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dv_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dv_level'] = $dv_level;

        return $this;
    }

    /**
     * Gets rpu_present_flag
     *
     * @return int|null
     */
    public function getRpuPresentFlag()
    {
        return $this->container['rpu_present_flag'];
    }

    /**
     * Sets rpu_present_flag
     *
     * @param int|null $rpu_present_flag Gets or sets the Dolby Vision rpu present flag.
     *
     * @return self
     */
    public function setRpuPresentFlag($rpu_present_flag)
    {
        if (is_null($rpu_present_flag)) {
            array_push($this->openAPINullablesSetToNull, 'rpu_present_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rpu_present_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rpu_present_flag'] = $rpu_present_flag;

        return $this;
    }

    /**
     * Gets el_present_flag
     *
     * @return int|null
     */
    public function getElPresentFlag()
    {
        return $this->container['el_present_flag'];
    }

    /**
     * Sets el_present_flag
     *
     * @param int|null $el_present_flag Gets or sets the Dolby Vision el present flag.
     *
     * @return self
     */
    public function setElPresentFlag($el_present_flag)
    {
        if (is_null($el_present_flag)) {
            array_push($this->openAPINullablesSetToNull, 'el_present_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('el_present_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['el_present_flag'] = $el_present_flag;

        return $this;
    }

    /**
     * Gets bl_present_flag
     *
     * @return int|null
     */
    public function getBlPresentFlag()
    {
        return $this->container['bl_present_flag'];
    }

    /**
     * Sets bl_present_flag
     *
     * @param int|null $bl_present_flag Gets or sets the Dolby Vision bl present flag.
     *
     * @return self
     */
    public function setBlPresentFlag($bl_present_flag)
    {
        if (is_null($bl_present_flag)) {
            array_push($this->openAPINullablesSetToNull, 'bl_present_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bl_present_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bl_present_flag'] = $bl_present_flag;

        return $this;
    }

    /**
     * Gets dv_bl_signal_compatibility_id
     *
     * @return int|null
     */
    public function getDvBlSignalCompatibilityId()
    {
        return $this->container['dv_bl_signal_compatibility_id'];
    }

    /**
     * Sets dv_bl_signal_compatibility_id
     *
     * @param int|null $dv_bl_signal_compatibility_id Gets or sets the Dolby Vision bl signal compatibility id.
     *
     * @return self
     */
    public function setDvBlSignalCompatibilityId($dv_bl_signal_compatibility_id)
    {
        if (is_null($dv_bl_signal_compatibility_id)) {
            array_push($this->openAPINullablesSetToNull, 'dv_bl_signal_compatibility_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dv_bl_signal_compatibility_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dv_bl_signal_compatibility_id'] = $dv_bl_signal_compatibility_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Gets or sets the comment.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets time_base
     *
     * @return string|null
     */
    public function getTimeBase()
    {
        return $this->container['time_base'];
    }

    /**
     * Sets time_base
     *
     * @param string|null $time_base Gets or sets the time base.
     *
     * @return self
     */
    public function setTimeBase($time_base)
    {
        if (is_null($time_base)) {
            array_push($this->openAPINullablesSetToNull, 'time_base');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_base', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_base'] = $time_base;

        return $this;
    }

    /**
     * Gets codec_time_base
     *
     * @return string|null
     */
    public function getCodecTimeBase()
    {
        return $this->container['codec_time_base'];
    }

    /**
     * Sets codec_time_base
     *
     * @param string|null $codec_time_base Gets or sets the codec time base.
     *
     * @return self
     */
    public function setCodecTimeBase($codec_time_base)
    {
        if (is_null($codec_time_base)) {
            array_push($this->openAPINullablesSetToNull, 'codec_time_base');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codec_time_base', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codec_time_base'] = $codec_time_base;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Gets or sets the title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets video_range
     *
     * @return string|null
     */
    public function getVideoRange()
    {
        return $this->container['video_range'];
    }

    /**
     * Sets video_range
     *
     * @param string|null $video_range Gets the video range.
     *
     * @return self
     */
    public function setVideoRange($video_range)
    {
        if (is_null($video_range)) {
            array_push($this->openAPINullablesSetToNull, 'video_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_range'] = $video_range;

        return $this;
    }

    /**
     * Gets video_range_type
     *
     * @return string|null
     */
    public function getVideoRangeType()
    {
        return $this->container['video_range_type'];
    }

    /**
     * Sets video_range_type
     *
     * @param string|null $video_range_type Gets the video range type.
     *
     * @return self
     */
    public function setVideoRangeType($video_range_type)
    {
        if (is_null($video_range_type)) {
            array_push($this->openAPINullablesSetToNull, 'video_range_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_range_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_range_type'] = $video_range_type;

        return $this;
    }

    /**
     * Gets video_do_vi_title
     *
     * @return string|null
     */
    public function getVideoDoViTitle()
    {
        return $this->container['video_do_vi_title'];
    }

    /**
     * Sets video_do_vi_title
     *
     * @param string|null $video_do_vi_title Gets the video dovi title.
     *
     * @return self
     */
    public function setVideoDoViTitle($video_do_vi_title)
    {
        if (is_null($video_do_vi_title)) {
            array_push($this->openAPINullablesSetToNull, 'video_do_vi_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_do_vi_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_do_vi_title'] = $video_do_vi_title;

        return $this;
    }

    /**
     * Gets localized_undefined
     *
     * @return string|null
     */
    public function getLocalizedUndefined()
    {
        return $this->container['localized_undefined'];
    }

    /**
     * Sets localized_undefined
     *
     * @param string|null $localized_undefined localized_undefined
     *
     * @return self
     */
    public function setLocalizedUndefined($localized_undefined)
    {
        if (is_null($localized_undefined)) {
            array_push($this->openAPINullablesSetToNull, 'localized_undefined');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localized_undefined', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localized_undefined'] = $localized_undefined;

        return $this;
    }

    /**
     * Gets localized_default
     *
     * @return string|null
     */
    public function getLocalizedDefault()
    {
        return $this->container['localized_default'];
    }

    /**
     * Sets localized_default
     *
     * @param string|null $localized_default localized_default
     *
     * @return self
     */
    public function setLocalizedDefault($localized_default)
    {
        if (is_null($localized_default)) {
            array_push($this->openAPINullablesSetToNull, 'localized_default');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localized_default', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localized_default'] = $localized_default;

        return $this;
    }

    /**
     * Gets localized_forced
     *
     * @return string|null
     */
    public function getLocalizedForced()
    {
        return $this->container['localized_forced'];
    }

    /**
     * Sets localized_forced
     *
     * @param string|null $localized_forced localized_forced
     *
     * @return self
     */
    public function setLocalizedForced($localized_forced)
    {
        if (is_null($localized_forced)) {
            array_push($this->openAPINullablesSetToNull, 'localized_forced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localized_forced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localized_forced'] = $localized_forced;

        return $this;
    }

    /**
     * Gets localized_external
     *
     * @return string|null
     */
    public function getLocalizedExternal()
    {
        return $this->container['localized_external'];
    }

    /**
     * Sets localized_external
     *
     * @param string|null $localized_external localized_external
     *
     * @return self
     */
    public function setLocalizedExternal($localized_external)
    {
        if (is_null($localized_external)) {
            array_push($this->openAPINullablesSetToNull, 'localized_external');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localized_external', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localized_external'] = $localized_external;

        return $this;
    }

    /**
     * Gets display_title
     *
     * @return string|null
     */
    public function getDisplayTitle()
    {
        return $this->container['display_title'];
    }

    /**
     * Sets display_title
     *
     * @param string|null $display_title display_title
     *
     * @return self
     */
    public function setDisplayTitle($display_title)
    {
        if (is_null($display_title)) {
            array_push($this->openAPINullablesSetToNull, 'display_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_title'] = $display_title;

        return $this;
    }

    /**
     * Gets nal_length_size
     *
     * @return string|null
     */
    public function getNalLengthSize()
    {
        return $this->container['nal_length_size'];
    }

    /**
     * Sets nal_length_size
     *
     * @param string|null $nal_length_size nal_length_size
     *
     * @return self
     */
    public function setNalLengthSize($nal_length_size)
    {
        if (is_null($nal_length_size)) {
            array_push($this->openAPINullablesSetToNull, 'nal_length_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nal_length_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nal_length_size'] = $nal_length_size;

        return $this;
    }

    /**
     * Gets is_interlaced
     *
     * @return bool|null
     */
    public function getIsInterlaced()
    {
        return $this->container['is_interlaced'];
    }

    /**
     * Sets is_interlaced
     *
     * @param bool|null $is_interlaced Gets or sets a value indicating whether this instance is interlaced.
     *
     * @return self
     */
    public function setIsInterlaced($is_interlaced)
    {
        if (is_null($is_interlaced)) {
            throw new \InvalidArgumentException('non-nullable is_interlaced cannot be null');
        }
        $this->container['is_interlaced'] = $is_interlaced;

        return $this;
    }

    /**
     * Gets is_avc
     *
     * @return bool|null
     */
    public function getIsAvc()
    {
        return $this->container['is_avc'];
    }

    /**
     * Sets is_avc
     *
     * @param bool|null $is_avc is_avc
     *
     * @return self
     */
    public function setIsAvc($is_avc)
    {
        if (is_null($is_avc)) {
            array_push($this->openAPINullablesSetToNull, 'is_avc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_avc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_avc'] = $is_avc;

        return $this;
    }

    /**
     * Gets channel_layout
     *
     * @return string|null
     */
    public function getChannelLayout()
    {
        return $this->container['channel_layout'];
    }

    /**
     * Sets channel_layout
     *
     * @param string|null $channel_layout Gets or sets the channel layout.
     *
     * @return self
     */
    public function setChannelLayout($channel_layout)
    {
        if (is_null($channel_layout)) {
            array_push($this->openAPINullablesSetToNull, 'channel_layout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_layout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_layout'] = $channel_layout;

        return $this;
    }

    /**
     * Gets bit_rate
     *
     * @return int|null
     */
    public function getBitRate()
    {
        return $this->container['bit_rate'];
    }

    /**
     * Sets bit_rate
     *
     * @param int|null $bit_rate Gets or sets the bit rate.
     *
     * @return self
     */
    public function setBitRate($bit_rate)
    {
        if (is_null($bit_rate)) {
            array_push($this->openAPINullablesSetToNull, 'bit_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bit_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bit_rate'] = $bit_rate;

        return $this;
    }

    /**
     * Gets bit_depth
     *
     * @return int|null
     */
    public function getBitDepth()
    {
        return $this->container['bit_depth'];
    }

    /**
     * Sets bit_depth
     *
     * @param int|null $bit_depth Gets or sets the bit depth.
     *
     * @return self
     */
    public function setBitDepth($bit_depth)
    {
        if (is_null($bit_depth)) {
            array_push($this->openAPINullablesSetToNull, 'bit_depth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bit_depth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bit_depth'] = $bit_depth;

        return $this;
    }

    /**
     * Gets ref_frames
     *
     * @return int|null
     */
    public function getRefFrames()
    {
        return $this->container['ref_frames'];
    }

    /**
     * Sets ref_frames
     *
     * @param int|null $ref_frames Gets or sets the reference frames.
     *
     * @return self
     */
    public function setRefFrames($ref_frames)
    {
        if (is_null($ref_frames)) {
            array_push($this->openAPINullablesSetToNull, 'ref_frames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_frames', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref_frames'] = $ref_frames;

        return $this;
    }

    /**
     * Gets packet_length
     *
     * @return int|null
     */
    public function getPacketLength()
    {
        return $this->container['packet_length'];
    }

    /**
     * Sets packet_length
     *
     * @param int|null $packet_length Gets or sets the length of the packet.
     *
     * @return self
     */
    public function setPacketLength($packet_length)
    {
        if (is_null($packet_length)) {
            array_push($this->openAPINullablesSetToNull, 'packet_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packet_length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packet_length'] = $packet_length;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return int|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param int|null $channels Gets or sets the channels.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            array_push($this->openAPINullablesSetToNull, 'channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets sample_rate
     *
     * @return int|null
     */
    public function getSampleRate()
    {
        return $this->container['sample_rate'];
    }

    /**
     * Sets sample_rate
     *
     * @param int|null $sample_rate Gets or sets the sample rate.
     *
     * @return self
     */
    public function setSampleRate($sample_rate)
    {
        if (is_null($sample_rate)) {
            array_push($this->openAPINullablesSetToNull, 'sample_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sample_rate'] = $sample_rate;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default Gets or sets a value indicating whether this instance is default.
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_forced
     *
     * @return bool|null
     */
    public function getIsForced()
    {
        return $this->container['is_forced'];
    }

    /**
     * Sets is_forced
     *
     * @param bool|null $is_forced Gets or sets a value indicating whether this instance is forced.
     *
     * @return self
     */
    public function setIsForced($is_forced)
    {
        if (is_null($is_forced)) {
            throw new \InvalidArgumentException('non-nullable is_forced cannot be null');
        }
        $this->container['is_forced'] = $is_forced;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Gets or sets the height.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Gets or sets the width.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets average_frame_rate
     *
     * @return float|null
     */
    public function getAverageFrameRate()
    {
        return $this->container['average_frame_rate'];
    }

    /**
     * Sets average_frame_rate
     *
     * @param float|null $average_frame_rate Gets or sets the average frame rate.
     *
     * @return self
     */
    public function setAverageFrameRate($average_frame_rate)
    {
        if (is_null($average_frame_rate)) {
            array_push($this->openAPINullablesSetToNull, 'average_frame_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('average_frame_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['average_frame_rate'] = $average_frame_rate;

        return $this;
    }

    /**
     * Gets real_frame_rate
     *
     * @return float|null
     */
    public function getRealFrameRate()
    {
        return $this->container['real_frame_rate'];
    }

    /**
     * Sets real_frame_rate
     *
     * @param float|null $real_frame_rate Gets or sets the real frame rate.
     *
     * @return self
     */
    public function setRealFrameRate($real_frame_rate)
    {
        if (is_null($real_frame_rate)) {
            array_push($this->openAPINullablesSetToNull, 'real_frame_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_frame_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_frame_rate'] = $real_frame_rate;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string|null $profile Gets or sets the profile.
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            array_push($this->openAPINullablesSetToNull, 'profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\MediaStreamType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\MediaStreamType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string|null
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string|null $aspect_ratio Gets or sets the aspect ratio.
     *
     * @return self
     */
    public function setAspectRatio($aspect_ratio)
    {
        if (is_null($aspect_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'aspect_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aspect_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index Gets or sets the index.
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int|null $score Gets or sets the score.
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            array_push($this->openAPINullablesSetToNull, 'score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('score', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool|null
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool|null $is_external Gets or sets a value indicating whether this instance is external.
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {
        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return \OpenAPI\Client\Model\SubtitleDeliveryMethod|null
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param \OpenAPI\Client\Model\SubtitleDeliveryMethod|null $delivery_method delivery_method
     *
     * @return self
     */
    public function setDeliveryMethod($delivery_method)
    {
        if (is_null($delivery_method)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets delivery_url
     *
     * @return string|null
     */
    public function getDeliveryUrl()
    {
        return $this->container['delivery_url'];
    }

    /**
     * Sets delivery_url
     *
     * @param string|null $delivery_url Gets or sets the delivery URL.
     *
     * @return self
     */
    public function setDeliveryUrl($delivery_url)
    {
        if (is_null($delivery_url)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_url'] = $delivery_url;

        return $this;
    }

    /**
     * Gets is_external_url
     *
     * @return bool|null
     */
    public function getIsExternalUrl()
    {
        return $this->container['is_external_url'];
    }

    /**
     * Sets is_external_url
     *
     * @param bool|null $is_external_url Gets or sets a value indicating whether this instance is external URL.
     *
     * @return self
     */
    public function setIsExternalUrl($is_external_url)
    {
        if (is_null($is_external_url)) {
            array_push($this->openAPINullablesSetToNull, 'is_external_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_external_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_external_url'] = $is_external_url;

        return $this;
    }

    /**
     * Gets is_text_subtitle_stream
     *
     * @return bool|null
     */
    public function getIsTextSubtitleStream()
    {
        return $this->container['is_text_subtitle_stream'];
    }

    /**
     * Sets is_text_subtitle_stream
     *
     * @param bool|null $is_text_subtitle_stream is_text_subtitle_stream
     *
     * @return self
     */
    public function setIsTextSubtitleStream($is_text_subtitle_stream)
    {
        if (is_null($is_text_subtitle_stream)) {
            throw new \InvalidArgumentException('non-nullable is_text_subtitle_stream cannot be null');
        }
        $this->container['is_text_subtitle_stream'] = $is_text_subtitle_stream;

        return $this;
    }

    /**
     * Gets supports_external_stream
     *
     * @return bool|null
     */
    public function getSupportsExternalStream()
    {
        return $this->container['supports_external_stream'];
    }

    /**
     * Sets supports_external_stream
     *
     * @param bool|null $supports_external_stream Gets or sets a value indicating whether [supports external stream].
     *
     * @return self
     */
    public function setSupportsExternalStream($supports_external_stream)
    {
        if (is_null($supports_external_stream)) {
            throw new \InvalidArgumentException('non-nullable supports_external_stream cannot be null');
        }
        $this->container['supports_external_stream'] = $supports_external_stream;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path Gets or sets the filename.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets pixel_format
     *
     * @return string|null
     */
    public function getPixelFormat()
    {
        return $this->container['pixel_format'];
    }

    /**
     * Sets pixel_format
     *
     * @param string|null $pixel_format Gets or sets the pixel format.
     *
     * @return self
     */
    public function setPixelFormat($pixel_format)
    {
        if (is_null($pixel_format)) {
            array_push($this->openAPINullablesSetToNull, 'pixel_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pixel_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pixel_format'] = $pixel_format;

        return $this;
    }

    /**
     * Gets level
     *
     * @return float|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param float|null $level Gets or sets the level.
     *
     * @return self
     */
    public function setLevel($level)
    {
        if (is_null($level)) {
            array_push($this->openAPINullablesSetToNull, 'level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets is_anamorphic
     *
     * @return bool|null
     */
    public function getIsAnamorphic()
    {
        return $this->container['is_anamorphic'];
    }

    /**
     * Sets is_anamorphic
     *
     * @param bool|null $is_anamorphic Gets or sets whether this instance is anamorphic.
     *
     * @return self
     */
    public function setIsAnamorphic($is_anamorphic)
    {
        if (is_null($is_anamorphic)) {
            array_push($this->openAPINullablesSetToNull, 'is_anamorphic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_anamorphic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_anamorphic'] = $is_anamorphic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


