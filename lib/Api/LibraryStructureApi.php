<?php
/**
 * LibraryStructureApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LibraryStructureApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LibraryStructureApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addMediaPath' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'addVirtualFolder' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getVirtualFolders' => [
            'application/json',
        ],
        'removeMediaPath' => [
            'application/json',
        ],
        'removeVirtualFolder' => [
            'application/json',
        ],
        'renameVirtualFolder' => [
            'application/json',
        ],
        'updateLibraryOptions' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateMediaPath' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMediaPath
     *
     * Add a media path to a library.
     *
     * @param  \OpenAPI\Client\Model\AddMediaPathRequest $add_media_path_request The media path dto. (required)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMediaPath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addMediaPath($add_media_path_request, $refresh_library = false, string $contentType = self::contentTypes['addMediaPath'][0])
    {
        $this->addMediaPathWithHttpInfo($add_media_path_request, $refresh_library, $contentType);
    }

    /**
     * Operation addMediaPathWithHttpInfo
     *
     * Add a media path to a library.
     *
     * @param  \OpenAPI\Client\Model\AddMediaPathRequest $add_media_path_request The media path dto. (required)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMediaPath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMediaPathWithHttpInfo($add_media_path_request, $refresh_library = false, string $contentType = self::contentTypes['addMediaPath'][0])
    {
        $request = $this->addMediaPathRequest($add_media_path_request, $refresh_library, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addMediaPathAsync
     *
     * Add a media path to a library.
     *
     * @param  \OpenAPI\Client\Model\AddMediaPathRequest $add_media_path_request The media path dto. (required)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMediaPathAsync($add_media_path_request, $refresh_library = false, string $contentType = self::contentTypes['addMediaPath'][0])
    {
        return $this->addMediaPathAsyncWithHttpInfo($add_media_path_request, $refresh_library, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMediaPathAsyncWithHttpInfo
     *
     * Add a media path to a library.
     *
     * @param  \OpenAPI\Client\Model\AddMediaPathRequest $add_media_path_request The media path dto. (required)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMediaPathAsyncWithHttpInfo($add_media_path_request, $refresh_library = false, string $contentType = self::contentTypes['addMediaPath'][0])
    {
        $returnType = '';
        $request = $this->addMediaPathRequest($add_media_path_request, $refresh_library, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMediaPath'
     *
     * @param  \OpenAPI\Client\Model\AddMediaPathRequest $add_media_path_request The media path dto. (required)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addMediaPathRequest($add_media_path_request, $refresh_library = false, string $contentType = self::contentTypes['addMediaPath'][0])
    {

        // verify the required parameter 'add_media_path_request' is set
        if ($add_media_path_request === null || (is_array($add_media_path_request) && count($add_media_path_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_media_path_request when calling addMediaPath'
            );
        }



        $resourcePath = '/Library/VirtualFolders/Paths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refresh_library,
            'refreshLibrary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_media_path_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_media_path_request));
            } else {
                $httpBody = $add_media_path_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addVirtualFolder
     *
     * Adds a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  \OpenAPI\Client\Model\CollectionTypeOptions $collection_type The type of the collection. (optional)
     * @param  string[] $paths The paths of the virtual folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  \OpenAPI\Client\Model\AddVirtualFolderRequest $add_virtual_folder_request The library options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVirtualFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addVirtualFolder($name = null, $collection_type = null, $paths = null, $refresh_library = false, $add_virtual_folder_request = null, string $contentType = self::contentTypes['addVirtualFolder'][0])
    {
        $this->addVirtualFolderWithHttpInfo($name, $collection_type, $paths, $refresh_library, $add_virtual_folder_request, $contentType);
    }

    /**
     * Operation addVirtualFolderWithHttpInfo
     *
     * Adds a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  \OpenAPI\Client\Model\CollectionTypeOptions $collection_type The type of the collection. (optional)
     * @param  string[] $paths The paths of the virtual folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  \OpenAPI\Client\Model\AddVirtualFolderRequest $add_virtual_folder_request The library options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVirtualFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVirtualFolderWithHttpInfo($name = null, $collection_type = null, $paths = null, $refresh_library = false, $add_virtual_folder_request = null, string $contentType = self::contentTypes['addVirtualFolder'][0])
    {
        $request = $this->addVirtualFolderRequest($name, $collection_type, $paths, $refresh_library, $add_virtual_folder_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addVirtualFolderAsync
     *
     * Adds a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  \OpenAPI\Client\Model\CollectionTypeOptions $collection_type The type of the collection. (optional)
     * @param  string[] $paths The paths of the virtual folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  \OpenAPI\Client\Model\AddVirtualFolderRequest $add_virtual_folder_request The library options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVirtualFolderAsync($name = null, $collection_type = null, $paths = null, $refresh_library = false, $add_virtual_folder_request = null, string $contentType = self::contentTypes['addVirtualFolder'][0])
    {
        return $this->addVirtualFolderAsyncWithHttpInfo($name, $collection_type, $paths, $refresh_library, $add_virtual_folder_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVirtualFolderAsyncWithHttpInfo
     *
     * Adds a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  \OpenAPI\Client\Model\CollectionTypeOptions $collection_type The type of the collection. (optional)
     * @param  string[] $paths The paths of the virtual folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  \OpenAPI\Client\Model\AddVirtualFolderRequest $add_virtual_folder_request The library options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVirtualFolderAsyncWithHttpInfo($name = null, $collection_type = null, $paths = null, $refresh_library = false, $add_virtual_folder_request = null, string $contentType = self::contentTypes['addVirtualFolder'][0])
    {
        $returnType = '';
        $request = $this->addVirtualFolderRequest($name, $collection_type, $paths, $refresh_library, $add_virtual_folder_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addVirtualFolder'
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  \OpenAPI\Client\Model\CollectionTypeOptions $collection_type The type of the collection. (optional)
     * @param  string[] $paths The paths of the virtual folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  \OpenAPI\Client\Model\AddVirtualFolderRequest $add_virtual_folder_request The library options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addVirtualFolderRequest($name = null, $collection_type = null, $paths = null, $refresh_library = false, $add_virtual_folder_request = null, string $contentType = self::contentTypes['addVirtualFolder'][0])
    {







        $resourcePath = '/Library/VirtualFolders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collection_type,
            'collectionType', // param base name
            'CollectionTypeOptions', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paths,
            'paths', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refresh_library,
            'refreshLibrary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_virtual_folder_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_virtual_folder_request));
            } else {
                $httpBody = $add_virtual_folder_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualFolders
     *
     * Gets all virtual folders.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualFolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualFolderInfo[]
     */
    public function getVirtualFolders(string $contentType = self::contentTypes['getVirtualFolders'][0])
    {
        list($response) = $this->getVirtualFoldersWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getVirtualFoldersWithHttpInfo
     *
     * Gets all virtual folders.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualFolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualFolderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualFoldersWithHttpInfo(string $contentType = self::contentTypes['getVirtualFolders'][0])
    {
        $request = $this->getVirtualFoldersRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VirtualFolderInfo[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\VirtualFolderInfo[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VirtualFolderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VirtualFolderInfo[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualFolderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVirtualFoldersAsync
     *
     * Gets all virtual folders.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualFoldersAsync(string $contentType = self::contentTypes['getVirtualFolders'][0])
    {
        return $this->getVirtualFoldersAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualFoldersAsyncWithHttpInfo
     *
     * Gets all virtual folders.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualFoldersAsyncWithHttpInfo(string $contentType = self::contentTypes['getVirtualFolders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualFolderInfo[]';
        $request = $this->getVirtualFoldersRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualFolders'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualFoldersRequest(string $contentType = self::contentTypes['getVirtualFolders'][0])
    {


        $resourcePath = '/Library/VirtualFolders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMediaPath
     *
     * Remove a media path.
     *
     * @param  string $name The name of the library. (optional)
     * @param  string $path The path to remove. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMediaPath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeMediaPath($name = null, $path = null, $refresh_library = false, string $contentType = self::contentTypes['removeMediaPath'][0])
    {
        $this->removeMediaPathWithHttpInfo($name, $path, $refresh_library, $contentType);
    }

    /**
     * Operation removeMediaPathWithHttpInfo
     *
     * Remove a media path.
     *
     * @param  string $name The name of the library. (optional)
     * @param  string $path The path to remove. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMediaPath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMediaPathWithHttpInfo($name = null, $path = null, $refresh_library = false, string $contentType = self::contentTypes['removeMediaPath'][0])
    {
        $request = $this->removeMediaPathRequest($name, $path, $refresh_library, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeMediaPathAsync
     *
     * Remove a media path.
     *
     * @param  string $name The name of the library. (optional)
     * @param  string $path The path to remove. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMediaPathAsync($name = null, $path = null, $refresh_library = false, string $contentType = self::contentTypes['removeMediaPath'][0])
    {
        return $this->removeMediaPathAsyncWithHttpInfo($name, $path, $refresh_library, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeMediaPathAsyncWithHttpInfo
     *
     * Remove a media path.
     *
     * @param  string $name The name of the library. (optional)
     * @param  string $path The path to remove. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMediaPathAsyncWithHttpInfo($name = null, $path = null, $refresh_library = false, string $contentType = self::contentTypes['removeMediaPath'][0])
    {
        $returnType = '';
        $request = $this->removeMediaPathRequest($name, $path, $refresh_library, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMediaPath'
     *
     * @param  string $name The name of the library. (optional)
     * @param  string $path The path to remove. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeMediaPathRequest($name = null, $path = null, $refresh_library = false, string $contentType = self::contentTypes['removeMediaPath'][0])
    {





        $resourcePath = '/Library/VirtualFolders/Paths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refresh_library,
            'refreshLibrary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeVirtualFolder
     *
     * Removes a virtual folder.
     *
     * @param  string $name The name of the folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeVirtualFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeVirtualFolder($name = null, $refresh_library = false, string $contentType = self::contentTypes['removeVirtualFolder'][0])
    {
        $this->removeVirtualFolderWithHttpInfo($name, $refresh_library, $contentType);
    }

    /**
     * Operation removeVirtualFolderWithHttpInfo
     *
     * Removes a virtual folder.
     *
     * @param  string $name The name of the folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeVirtualFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeVirtualFolderWithHttpInfo($name = null, $refresh_library = false, string $contentType = self::contentTypes['removeVirtualFolder'][0])
    {
        $request = $this->removeVirtualFolderRequest($name, $refresh_library, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeVirtualFolderAsync
     *
     * Removes a virtual folder.
     *
     * @param  string $name The name of the folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeVirtualFolderAsync($name = null, $refresh_library = false, string $contentType = self::contentTypes['removeVirtualFolder'][0])
    {
        return $this->removeVirtualFolderAsyncWithHttpInfo($name, $refresh_library, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeVirtualFolderAsyncWithHttpInfo
     *
     * Removes a virtual folder.
     *
     * @param  string $name The name of the folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeVirtualFolderAsyncWithHttpInfo($name = null, $refresh_library = false, string $contentType = self::contentTypes['removeVirtualFolder'][0])
    {
        $returnType = '';
        $request = $this->removeVirtualFolderRequest($name, $refresh_library, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeVirtualFolder'
     *
     * @param  string $name The name of the folder. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeVirtualFolderRequest($name = null, $refresh_library = false, string $contentType = self::contentTypes['removeVirtualFolder'][0])
    {




        $resourcePath = '/Library/VirtualFolders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refresh_library,
            'refreshLibrary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renameVirtualFolder
     *
     * Renames a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  string $new_name The new name. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameVirtualFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function renameVirtualFolder($name = null, $new_name = null, $refresh_library = false, string $contentType = self::contentTypes['renameVirtualFolder'][0])
    {
        $this->renameVirtualFolderWithHttpInfo($name, $new_name, $refresh_library, $contentType);
    }

    /**
     * Operation renameVirtualFolderWithHttpInfo
     *
     * Renames a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  string $new_name The new name. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameVirtualFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function renameVirtualFolderWithHttpInfo($name = null, $new_name = null, $refresh_library = false, string $contentType = self::contentTypes['renameVirtualFolder'][0])
    {
        $request = $this->renameVirtualFolderRequest($name, $new_name, $refresh_library, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renameVirtualFolderAsync
     *
     * Renames a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  string $new_name The new name. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameVirtualFolderAsync($name = null, $new_name = null, $refresh_library = false, string $contentType = self::contentTypes['renameVirtualFolder'][0])
    {
        return $this->renameVirtualFolderAsyncWithHttpInfo($name, $new_name, $refresh_library, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renameVirtualFolderAsyncWithHttpInfo
     *
     * Renames a virtual folder.
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  string $new_name The new name. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameVirtualFolderAsyncWithHttpInfo($name = null, $new_name = null, $refresh_library = false, string $contentType = self::contentTypes['renameVirtualFolder'][0])
    {
        $returnType = '';
        $request = $this->renameVirtualFolderRequest($name, $new_name, $refresh_library, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'renameVirtualFolder'
     *
     * @param  string $name The name of the virtual folder. (optional)
     * @param  string $new_name The new name. (optional)
     * @param  bool $refresh_library Whether to refresh the library. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameVirtualFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function renameVirtualFolderRequest($name = null, $new_name = null, $refresh_library = false, string $contentType = self::contentTypes['renameVirtualFolder'][0])
    {





        $resourcePath = '/Library/VirtualFolders/Name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $new_name,
            'newName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refresh_library,
            'refreshLibrary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLibraryOptions
     *
     * Update library options.
     *
     * @param  \OpenAPI\Client\Model\UpdateLibraryOptionsRequest $update_library_options_request The library name and options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLibraryOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateLibraryOptions($update_library_options_request = null, string $contentType = self::contentTypes['updateLibraryOptions'][0])
    {
        $this->updateLibraryOptionsWithHttpInfo($update_library_options_request, $contentType);
    }

    /**
     * Operation updateLibraryOptionsWithHttpInfo
     *
     * Update library options.
     *
     * @param  \OpenAPI\Client\Model\UpdateLibraryOptionsRequest $update_library_options_request The library name and options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLibraryOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLibraryOptionsWithHttpInfo($update_library_options_request = null, string $contentType = self::contentTypes['updateLibraryOptions'][0])
    {
        $request = $this->updateLibraryOptionsRequest($update_library_options_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateLibraryOptionsAsync
     *
     * Update library options.
     *
     * @param  \OpenAPI\Client\Model\UpdateLibraryOptionsRequest $update_library_options_request The library name and options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLibraryOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLibraryOptionsAsync($update_library_options_request = null, string $contentType = self::contentTypes['updateLibraryOptions'][0])
    {
        return $this->updateLibraryOptionsAsyncWithHttpInfo($update_library_options_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLibraryOptionsAsyncWithHttpInfo
     *
     * Update library options.
     *
     * @param  \OpenAPI\Client\Model\UpdateLibraryOptionsRequest $update_library_options_request The library name and options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLibraryOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLibraryOptionsAsyncWithHttpInfo($update_library_options_request = null, string $contentType = self::contentTypes['updateLibraryOptions'][0])
    {
        $returnType = '';
        $request = $this->updateLibraryOptionsRequest($update_library_options_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLibraryOptions'
     *
     * @param  \OpenAPI\Client\Model\UpdateLibraryOptionsRequest $update_library_options_request The library name and options. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLibraryOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLibraryOptionsRequest($update_library_options_request = null, string $contentType = self::contentTypes['updateLibraryOptions'][0])
    {



        $resourcePath = '/Library/VirtualFolders/LibraryOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_library_options_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_library_options_request));
            } else {
                $httpBody = $update_library_options_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMediaPath
     *
     * Updates a media path.
     *
     * @param  \OpenAPI\Client\Model\UpdateMediaPathRequest $update_media_path_request The name of the library and path infos. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMediaPath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateMediaPath($update_media_path_request, string $contentType = self::contentTypes['updateMediaPath'][0])
    {
        $this->updateMediaPathWithHttpInfo($update_media_path_request, $contentType);
    }

    /**
     * Operation updateMediaPathWithHttpInfo
     *
     * Updates a media path.
     *
     * @param  \OpenAPI\Client\Model\UpdateMediaPathRequest $update_media_path_request The name of the library and path infos. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMediaPath'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMediaPathWithHttpInfo($update_media_path_request, string $contentType = self::contentTypes['updateMediaPath'][0])
    {
        $request = $this->updateMediaPathRequest($update_media_path_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateMediaPathAsync
     *
     * Updates a media path.
     *
     * @param  \OpenAPI\Client\Model\UpdateMediaPathRequest $update_media_path_request The name of the library and path infos. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMediaPathAsync($update_media_path_request, string $contentType = self::contentTypes['updateMediaPath'][0])
    {
        return $this->updateMediaPathAsyncWithHttpInfo($update_media_path_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMediaPathAsyncWithHttpInfo
     *
     * Updates a media path.
     *
     * @param  \OpenAPI\Client\Model\UpdateMediaPathRequest $update_media_path_request The name of the library and path infos. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMediaPathAsyncWithHttpInfo($update_media_path_request, string $contentType = self::contentTypes['updateMediaPath'][0])
    {
        $returnType = '';
        $request = $this->updateMediaPathRequest($update_media_path_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMediaPath'
     *
     * @param  \OpenAPI\Client\Model\UpdateMediaPathRequest $update_media_path_request The name of the library and path infos. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMediaPath'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMediaPathRequest($update_media_path_request, string $contentType = self::contentTypes['updateMediaPath'][0])
    {

        // verify the required parameter 'update_media_path_request' is set
        if ($update_media_path_request === null || (is_array($update_media_path_request) && count($update_media_path_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_media_path_request when calling updateMediaPath'
            );
        }


        $resourcePath = '/Library/VirtualFolders/Paths/Update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_media_path_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_media_path_request));
            } else {
                $httpBody = $update_media_path_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
