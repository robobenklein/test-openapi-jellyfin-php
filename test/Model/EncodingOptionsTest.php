<?php
/**
 * EncodingOptionsTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * EncodingOptionsTest Class Doc Comment
 *
 * @category    Class
 * @description EncodingOptions
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class EncodingOptionsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "EncodingOptions"
     */
    public function testEncodingOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encoding_thread_count"
     */
    public function testPropertyEncodingThreadCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transcoding_temp_path"
     */
    public function testPropertyTranscodingTempPath()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "fallback_font_path"
     */
    public function testPropertyFallbackFontPath()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_fallback_font"
     */
    public function testPropertyEnableFallbackFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "down_mix_audio_boost"
     */
    public function testPropertyDownMixAudioBoost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_muxing_queue_size"
     */
    public function testPropertyMaxMuxingQueueSize()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_throttling"
     */
    public function testPropertyEnableThrottling()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "throttle_delay_seconds"
     */
    public function testPropertyThrottleDelaySeconds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hardware_acceleration_type"
     */
    public function testPropertyHardwareAccelerationType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encoder_app_path"
     */
    public function testPropertyEncoderAppPath()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encoder_app_path_display"
     */
    public function testPropertyEncoderAppPathDisplay()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "vaapi_device"
     */
    public function testPropertyVaapiDevice()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_tonemapping"
     */
    public function testPropertyEnableTonemapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_vpp_tonemapping"
     */
    public function testPropertyEnableVppTonemapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tonemapping_algorithm"
     */
    public function testPropertyTonemappingAlgorithm()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tonemapping_mode"
     */
    public function testPropertyTonemappingMode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tonemapping_range"
     */
    public function testPropertyTonemappingRange()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tonemapping_desat"
     */
    public function testPropertyTonemappingDesat()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tonemapping_peak"
     */
    public function testPropertyTonemappingPeak()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tonemapping_param"
     */
    public function testPropertyTonemappingParam()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "vpp_tonemapping_brightness"
     */
    public function testPropertyVppTonemappingBrightness()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "vpp_tonemapping_contrast"
     */
    public function testPropertyVppTonemappingContrast()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "h264_crf"
     */
    public function testPropertyH264Crf()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "h265_crf"
     */
    public function testPropertyH265Crf()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encoder_preset"
     */
    public function testPropertyEncoderPreset()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "deinterlace_double_rate"
     */
    public function testPropertyDeinterlaceDoubleRate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "deinterlace_method"
     */
    public function testPropertyDeinterlaceMethod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_decoding_color_depth10_hevc"
     */
    public function testPropertyEnableDecodingColorDepth10Hevc()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_decoding_color_depth10_vp9"
     */
    public function testPropertyEnableDecodingColorDepth10Vp9()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_enhanced_nvdec_decoder"
     */
    public function testPropertyEnableEnhancedNvdecDecoder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "prefer_system_native_hw_decoder"
     */
    public function testPropertyPreferSystemNativeHwDecoder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_intel_low_power_h264_hw_encoder"
     */
    public function testPropertyEnableIntelLowPowerH264HwEncoder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_intel_low_power_hevc_hw_encoder"
     */
    public function testPropertyEnableIntelLowPowerHevcHwEncoder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_hardware_encoding"
     */
    public function testPropertyEnableHardwareEncoding()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "allow_hevc_encoding"
     */
    public function testPropertyAllowHevcEncoding()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_subtitle_extraction"
     */
    public function testPropertyEnableSubtitleExtraction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hardware_decoding_codecs"
     */
    public function testPropertyHardwareDecodingCodecs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "allow_on_demand_metadata_based_keyframe_extraction_for_extensions"
     */
    public function testPropertyAllowOnDemandMetadataBasedKeyframeExtractionForExtensions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
