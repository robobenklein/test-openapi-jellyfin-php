<?php
/**
 * ChannelsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ChannelsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChannelsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAllChannelFeatures' => [
            'application/json',
        ],
        'getChannelFeatures' => [
            'application/json',
        ],
        'getChannelItems' => [
            'application/json',
        ],
        'getChannels' => [
            'application/json',
        ],
        'getLatestChannelItems' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllChannelFeatures
     *
     * Get all channel features.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllChannelFeatures'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChannelFeatures[]
     */
    public function getAllChannelFeatures(string $contentType = self::contentTypes['getAllChannelFeatures'][0])
    {
        list($response) = $this->getAllChannelFeaturesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAllChannelFeaturesWithHttpInfo
     *
     * Get all channel features.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllChannelFeatures'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChannelFeatures[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllChannelFeaturesWithHttpInfo(string $contentType = self::contentTypes['getAllChannelFeatures'][0])
    {
        $request = $this->getAllChannelFeaturesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChannelFeatures[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChannelFeatures[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChannelFeatures[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChannelFeatures[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChannelFeatures[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllChannelFeaturesAsync
     *
     * Get all channel features.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllChannelFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllChannelFeaturesAsync(string $contentType = self::contentTypes['getAllChannelFeatures'][0])
    {
        return $this->getAllChannelFeaturesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllChannelFeaturesAsyncWithHttpInfo
     *
     * Get all channel features.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllChannelFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllChannelFeaturesAsyncWithHttpInfo(string $contentType = self::contentTypes['getAllChannelFeatures'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChannelFeatures[]';
        $request = $this->getAllChannelFeaturesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllChannelFeatures'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllChannelFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllChannelFeaturesRequest(string $contentType = self::contentTypes['getAllChannelFeatures'][0])
    {


        $resourcePath = '/Channels/Features';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelFeatures
     *
     * Get channel features.
     *
     * @param  string $channel_id Channel id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelFeatures'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChannelFeatures
     */
    public function getChannelFeatures($channel_id, string $contentType = self::contentTypes['getChannelFeatures'][0])
    {
        list($response) = $this->getChannelFeaturesWithHttpInfo($channel_id, $contentType);
        return $response;
    }

    /**
     * Operation getChannelFeaturesWithHttpInfo
     *
     * Get channel features.
     *
     * @param  string $channel_id Channel id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelFeatures'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChannelFeatures, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelFeaturesWithHttpInfo($channel_id, string $contentType = self::contentTypes['getChannelFeatures'][0])
    {
        $request = $this->getChannelFeaturesRequest($channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChannelFeatures' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChannelFeatures' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChannelFeatures', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChannelFeatures';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChannelFeatures',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelFeaturesAsync
     *
     * Get channel features.
     *
     * @param  string $channel_id Channel id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelFeaturesAsync($channel_id, string $contentType = self::contentTypes['getChannelFeatures'][0])
    {
        return $this->getChannelFeaturesAsyncWithHttpInfo($channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelFeaturesAsyncWithHttpInfo
     *
     * Get channel features.
     *
     * @param  string $channel_id Channel id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelFeaturesAsyncWithHttpInfo($channel_id, string $contentType = self::contentTypes['getChannelFeatures'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChannelFeatures';
        $request = $this->getChannelFeaturesRequest($channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelFeatures'
     *
     * @param  string $channel_id Channel id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelFeaturesRequest($channel_id, string $contentType = self::contentTypes['getChannelFeatures'][0])
    {

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling getChannelFeatures'
            );
        }


        $resourcePath = '/Channels/{channelId}/Features';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($channel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'channelId' . '}',
                ObjectSerializer::toPathValue($channel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelItems
     *
     * Get channel items.
     *
     * @param  string $channel_id Channel Id. (required)
     * @param  string $folder_id Optional. Folder Id. (optional)
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Optional. Sort Order - Ascending,Descending. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getChannelItems($channel_id, $folder_id = null, $user_id = null, $start_index = null, $limit = null, $sort_order = null, $filters = null, $sort_by = null, $fields = null, string $contentType = self::contentTypes['getChannelItems'][0])
    {
        list($response) = $this->getChannelItemsWithHttpInfo($channel_id, $folder_id, $user_id, $start_index, $limit, $sort_order, $filters, $sort_by, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getChannelItemsWithHttpInfo
     *
     * Get channel items.
     *
     * @param  string $channel_id Channel Id. (required)
     * @param  string $folder_id Optional. Folder Id. (optional)
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Optional. Sort Order - Ascending,Descending. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelItemsWithHttpInfo($channel_id, $folder_id = null, $user_id = null, $start_index = null, $limit = null, $sort_order = null, $filters = null, $sort_by = null, $fields = null, string $contentType = self::contentTypes['getChannelItems'][0])
    {
        $request = $this->getChannelItemsRequest($channel_id, $folder_id, $user_id, $start_index, $limit, $sort_order, $filters, $sort_by, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelItemsAsync
     *
     * Get channel items.
     *
     * @param  string $channel_id Channel Id. (required)
     * @param  string $folder_id Optional. Folder Id. (optional)
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Optional. Sort Order - Ascending,Descending. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelItemsAsync($channel_id, $folder_id = null, $user_id = null, $start_index = null, $limit = null, $sort_order = null, $filters = null, $sort_by = null, $fields = null, string $contentType = self::contentTypes['getChannelItems'][0])
    {
        return $this->getChannelItemsAsyncWithHttpInfo($channel_id, $folder_id, $user_id, $start_index, $limit, $sort_order, $filters, $sort_by, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelItemsAsyncWithHttpInfo
     *
     * Get channel items.
     *
     * @param  string $channel_id Channel Id. (required)
     * @param  string $folder_id Optional. Folder Id. (optional)
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Optional. Sort Order - Ascending,Descending. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelItemsAsyncWithHttpInfo($channel_id, $folder_id = null, $user_id = null, $start_index = null, $limit = null, $sort_order = null, $filters = null, $sort_by = null, $fields = null, string $contentType = self::contentTypes['getChannelItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getChannelItemsRequest($channel_id, $folder_id, $user_id, $start_index, $limit, $sort_order, $filters, $sort_by, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelItems'
     *
     * @param  string $channel_id Channel Id. (required)
     * @param  string $folder_id Optional. Folder Id. (optional)
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\SortOrder[] $sort_order Optional. Sort Order - Ascending,Descending. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  string[] $sort_by Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelItemsRequest($channel_id, $folder_id = null, $user_id = null, $start_index = null, $limit = null, $sort_order = null, $filters = null, $sort_by = null, $fields = null, string $contentType = self::contentTypes['getChannelItems'][0])
    {

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling getChannelItems'
            );
        }










        $resourcePath = '/Channels/{channelId}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $folder_id,
            'folderId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($channel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'channelId' . '}',
                ObjectSerializer::toPathValue($channel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannels
     *
     * Gets available channels.
     *
     * @param  string $user_id User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $supports_latest_items Optional. Filter by channels that support getting latest items. (optional)
     * @param  bool $supports_media_deletion Optional. Filter by channels that support media deletion. (optional)
     * @param  bool $is_favorite Optional. Filter by channels that are favorite. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getChannels($user_id = null, $start_index = null, $limit = null, $supports_latest_items = null, $supports_media_deletion = null, $is_favorite = null, string $contentType = self::contentTypes['getChannels'][0])
    {
        list($response) = $this->getChannelsWithHttpInfo($user_id, $start_index, $limit, $supports_latest_items, $supports_media_deletion, $is_favorite, $contentType);
        return $response;
    }

    /**
     * Operation getChannelsWithHttpInfo
     *
     * Gets available channels.
     *
     * @param  string $user_id User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $supports_latest_items Optional. Filter by channels that support getting latest items. (optional)
     * @param  bool $supports_media_deletion Optional. Filter by channels that support media deletion. (optional)
     * @param  bool $is_favorite Optional. Filter by channels that are favorite. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelsWithHttpInfo($user_id = null, $start_index = null, $limit = null, $supports_latest_items = null, $supports_media_deletion = null, $is_favorite = null, string $contentType = self::contentTypes['getChannels'][0])
    {
        $request = $this->getChannelsRequest($user_id, $start_index, $limit, $supports_latest_items, $supports_media_deletion, $is_favorite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelsAsync
     *
     * Gets available channels.
     *
     * @param  string $user_id User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $supports_latest_items Optional. Filter by channels that support getting latest items. (optional)
     * @param  bool $supports_media_deletion Optional. Filter by channels that support media deletion. (optional)
     * @param  bool $is_favorite Optional. Filter by channels that are favorite. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelsAsync($user_id = null, $start_index = null, $limit = null, $supports_latest_items = null, $supports_media_deletion = null, $is_favorite = null, string $contentType = self::contentTypes['getChannels'][0])
    {
        return $this->getChannelsAsyncWithHttpInfo($user_id, $start_index, $limit, $supports_latest_items, $supports_media_deletion, $is_favorite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelsAsyncWithHttpInfo
     *
     * Gets available channels.
     *
     * @param  string $user_id User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $supports_latest_items Optional. Filter by channels that support getting latest items. (optional)
     * @param  bool $supports_media_deletion Optional. Filter by channels that support media deletion. (optional)
     * @param  bool $is_favorite Optional. Filter by channels that are favorite. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelsAsyncWithHttpInfo($user_id = null, $start_index = null, $limit = null, $supports_latest_items = null, $supports_media_deletion = null, $is_favorite = null, string $contentType = self::contentTypes['getChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getChannelsRequest($user_id, $start_index, $limit, $supports_latest_items, $supports_media_deletion, $is_favorite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannels'
     *
     * @param  string $user_id User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  bool $supports_latest_items Optional. Filter by channels that support getting latest items. (optional)
     * @param  bool $supports_media_deletion Optional. Filter by channels that support media deletion. (optional)
     * @param  bool $is_favorite Optional. Filter by channels that are favorite. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelsRequest($user_id = null, $start_index = null, $limit = null, $supports_latest_items = null, $supports_media_deletion = null, $is_favorite = null, string $contentType = self::contentTypes['getChannels'][0])
    {








        $resourcePath = '/Channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supports_latest_items,
            'supportsLatestItems', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supports_media_deletion,
            'supportsMediaDeletion', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_favorite,
            'isFavorite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLatestChannelItems
     *
     * Gets latest channel items.
     *
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string[] $channel_ids Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestChannelItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BaseItemDtoQueryResult
     */
    public function getLatestChannelItems($user_id = null, $start_index = null, $limit = null, $filters = null, $fields = null, $channel_ids = null, string $contentType = self::contentTypes['getLatestChannelItems'][0])
    {
        list($response) = $this->getLatestChannelItemsWithHttpInfo($user_id, $start_index, $limit, $filters, $fields, $channel_ids, $contentType);
        return $response;
    }

    /**
     * Operation getLatestChannelItemsWithHttpInfo
     *
     * Gets latest channel items.
     *
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string[] $channel_ids Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestChannelItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BaseItemDtoQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLatestChannelItemsWithHttpInfo($user_id = null, $start_index = null, $limit = null, $filters = null, $fields = null, $channel_ids = null, string $contentType = self::contentTypes['getLatestChannelItems'][0])
    {
        $request = $this->getLatestChannelItemsRequest($user_id, $start_index, $limit, $filters, $fields, $channel_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BaseItemDtoQueryResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BaseItemDtoQueryResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BaseItemDtoQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLatestChannelItemsAsync
     *
     * Gets latest channel items.
     *
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string[] $channel_ids Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestChannelItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLatestChannelItemsAsync($user_id = null, $start_index = null, $limit = null, $filters = null, $fields = null, $channel_ids = null, string $contentType = self::contentTypes['getLatestChannelItems'][0])
    {
        return $this->getLatestChannelItemsAsyncWithHttpInfo($user_id, $start_index, $limit, $filters, $fields, $channel_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLatestChannelItemsAsyncWithHttpInfo
     *
     * Gets latest channel items.
     *
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string[] $channel_ids Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestChannelItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLatestChannelItemsAsyncWithHttpInfo($user_id = null, $start_index = null, $limit = null, $filters = null, $fields = null, $channel_ids = null, string $contentType = self::contentTypes['getLatestChannelItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BaseItemDtoQueryResult';
        $request = $this->getLatestChannelItemsRequest($user_id, $start_index, $limit, $filters, $fields, $channel_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLatestChannelItems'
     *
     * @param  string $user_id Optional. User Id. (optional)
     * @param  int $start_index Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param  int $limit Optional. The maximum number of records to return. (optional)
     * @param  \OpenAPI\Client\Model\ItemFilter[] $filters Optional. Specify additional filters to apply. (optional)
     * @param  \OpenAPI\Client\Model\ItemFields[] $fields Optional. Specify additional fields of information to return in the output. (optional)
     * @param  string[] $channel_ids Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLatestChannelItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLatestChannelItemsRequest($user_id = null, $start_index = null, $limit = null, $filters = null, $fields = null, $channel_ids = null, string $contentType = self::contentTypes['getLatestChannelItems'][0])
    {








        $resourcePath = '/Channels/Items/Latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_index,
            'startIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_ids,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
