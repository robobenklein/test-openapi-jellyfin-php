<?php
/**
 * LibraryOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LibraryOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LibraryOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LibraryOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable_photos' => 'bool',
        'enable_realtime_monitor' => 'bool',
        'enable_chapter_image_extraction' => 'bool',
        'extract_chapter_images_during_library_scan' => 'bool',
        'path_infos' => '\OpenAPI\Client\Model\MediaPathInfo[]',
        'save_local_metadata' => 'bool',
        'enable_internet_providers' => 'bool',
        'enable_automatic_series_grouping' => 'bool',
        'enable_embedded_titles' => 'bool',
        'enable_embedded_episode_infos' => 'bool',
        'automatic_refresh_interval_days' => 'int',
        'preferred_metadata_language' => 'string',
        'metadata_country_code' => 'string',
        'season_zero_display_name' => 'string',
        'metadata_savers' => 'string[]',
        'disabled_local_metadata_readers' => 'string[]',
        'local_metadata_reader_order' => 'string[]',
        'disabled_subtitle_fetchers' => 'string[]',
        'subtitle_fetcher_order' => 'string[]',
        'skip_subtitles_if_embedded_subtitles_present' => 'bool',
        'skip_subtitles_if_audio_track_matches' => 'bool',
        'subtitle_download_languages' => 'string[]',
        'require_perfect_subtitle_match' => 'bool',
        'save_subtitles_with_media' => 'bool',
        'automatically_add_to_collection' => 'bool',
        'allow_embedded_subtitles' => '\OpenAPI\Client\Model\EmbeddedSubtitleOptions',
        'type_options' => '\OpenAPI\Client\Model\TypeOptions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enable_photos' => null,
        'enable_realtime_monitor' => null,
        'enable_chapter_image_extraction' => null,
        'extract_chapter_images_during_library_scan' => null,
        'path_infos' => null,
        'save_local_metadata' => null,
        'enable_internet_providers' => null,
        'enable_automatic_series_grouping' => null,
        'enable_embedded_titles' => null,
        'enable_embedded_episode_infos' => null,
        'automatic_refresh_interval_days' => 'int32',
        'preferred_metadata_language' => null,
        'metadata_country_code' => null,
        'season_zero_display_name' => null,
        'metadata_savers' => null,
        'disabled_local_metadata_readers' => null,
        'local_metadata_reader_order' => null,
        'disabled_subtitle_fetchers' => null,
        'subtitle_fetcher_order' => null,
        'skip_subtitles_if_embedded_subtitles_present' => null,
        'skip_subtitles_if_audio_track_matches' => null,
        'subtitle_download_languages' => null,
        'require_perfect_subtitle_match' => null,
        'save_subtitles_with_media' => null,
        'automatically_add_to_collection' => null,
        'allow_embedded_subtitles' => null,
        'type_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enable_photos' => false,
		'enable_realtime_monitor' => false,
		'enable_chapter_image_extraction' => false,
		'extract_chapter_images_during_library_scan' => false,
		'path_infos' => false,
		'save_local_metadata' => false,
		'enable_internet_providers' => false,
		'enable_automatic_series_grouping' => false,
		'enable_embedded_titles' => false,
		'enable_embedded_episode_infos' => false,
		'automatic_refresh_interval_days' => false,
		'preferred_metadata_language' => true,
		'metadata_country_code' => true,
		'season_zero_display_name' => false,
		'metadata_savers' => true,
		'disabled_local_metadata_readers' => false,
		'local_metadata_reader_order' => true,
		'disabled_subtitle_fetchers' => false,
		'subtitle_fetcher_order' => false,
		'skip_subtitles_if_embedded_subtitles_present' => false,
		'skip_subtitles_if_audio_track_matches' => false,
		'subtitle_download_languages' => true,
		'require_perfect_subtitle_match' => false,
		'save_subtitles_with_media' => false,
		'automatically_add_to_collection' => false,
		'allow_embedded_subtitles' => false,
		'type_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_photos' => 'EnablePhotos',
        'enable_realtime_monitor' => 'EnableRealtimeMonitor',
        'enable_chapter_image_extraction' => 'EnableChapterImageExtraction',
        'extract_chapter_images_during_library_scan' => 'ExtractChapterImagesDuringLibraryScan',
        'path_infos' => 'PathInfos',
        'save_local_metadata' => 'SaveLocalMetadata',
        'enable_internet_providers' => 'EnableInternetProviders',
        'enable_automatic_series_grouping' => 'EnableAutomaticSeriesGrouping',
        'enable_embedded_titles' => 'EnableEmbeddedTitles',
        'enable_embedded_episode_infos' => 'EnableEmbeddedEpisodeInfos',
        'automatic_refresh_interval_days' => 'AutomaticRefreshIntervalDays',
        'preferred_metadata_language' => 'PreferredMetadataLanguage',
        'metadata_country_code' => 'MetadataCountryCode',
        'season_zero_display_name' => 'SeasonZeroDisplayName',
        'metadata_savers' => 'MetadataSavers',
        'disabled_local_metadata_readers' => 'DisabledLocalMetadataReaders',
        'local_metadata_reader_order' => 'LocalMetadataReaderOrder',
        'disabled_subtitle_fetchers' => 'DisabledSubtitleFetchers',
        'subtitle_fetcher_order' => 'SubtitleFetcherOrder',
        'skip_subtitles_if_embedded_subtitles_present' => 'SkipSubtitlesIfEmbeddedSubtitlesPresent',
        'skip_subtitles_if_audio_track_matches' => 'SkipSubtitlesIfAudioTrackMatches',
        'subtitle_download_languages' => 'SubtitleDownloadLanguages',
        'require_perfect_subtitle_match' => 'RequirePerfectSubtitleMatch',
        'save_subtitles_with_media' => 'SaveSubtitlesWithMedia',
        'automatically_add_to_collection' => 'AutomaticallyAddToCollection',
        'allow_embedded_subtitles' => 'AllowEmbeddedSubtitles',
        'type_options' => 'TypeOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_photos' => 'setEnablePhotos',
        'enable_realtime_monitor' => 'setEnableRealtimeMonitor',
        'enable_chapter_image_extraction' => 'setEnableChapterImageExtraction',
        'extract_chapter_images_during_library_scan' => 'setExtractChapterImagesDuringLibraryScan',
        'path_infos' => 'setPathInfos',
        'save_local_metadata' => 'setSaveLocalMetadata',
        'enable_internet_providers' => 'setEnableInternetProviders',
        'enable_automatic_series_grouping' => 'setEnableAutomaticSeriesGrouping',
        'enable_embedded_titles' => 'setEnableEmbeddedTitles',
        'enable_embedded_episode_infos' => 'setEnableEmbeddedEpisodeInfos',
        'automatic_refresh_interval_days' => 'setAutomaticRefreshIntervalDays',
        'preferred_metadata_language' => 'setPreferredMetadataLanguage',
        'metadata_country_code' => 'setMetadataCountryCode',
        'season_zero_display_name' => 'setSeasonZeroDisplayName',
        'metadata_savers' => 'setMetadataSavers',
        'disabled_local_metadata_readers' => 'setDisabledLocalMetadataReaders',
        'local_metadata_reader_order' => 'setLocalMetadataReaderOrder',
        'disabled_subtitle_fetchers' => 'setDisabledSubtitleFetchers',
        'subtitle_fetcher_order' => 'setSubtitleFetcherOrder',
        'skip_subtitles_if_embedded_subtitles_present' => 'setSkipSubtitlesIfEmbeddedSubtitlesPresent',
        'skip_subtitles_if_audio_track_matches' => 'setSkipSubtitlesIfAudioTrackMatches',
        'subtitle_download_languages' => 'setSubtitleDownloadLanguages',
        'require_perfect_subtitle_match' => 'setRequirePerfectSubtitleMatch',
        'save_subtitles_with_media' => 'setSaveSubtitlesWithMedia',
        'automatically_add_to_collection' => 'setAutomaticallyAddToCollection',
        'allow_embedded_subtitles' => 'setAllowEmbeddedSubtitles',
        'type_options' => 'setTypeOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_photos' => 'getEnablePhotos',
        'enable_realtime_monitor' => 'getEnableRealtimeMonitor',
        'enable_chapter_image_extraction' => 'getEnableChapterImageExtraction',
        'extract_chapter_images_during_library_scan' => 'getExtractChapterImagesDuringLibraryScan',
        'path_infos' => 'getPathInfos',
        'save_local_metadata' => 'getSaveLocalMetadata',
        'enable_internet_providers' => 'getEnableInternetProviders',
        'enable_automatic_series_grouping' => 'getEnableAutomaticSeriesGrouping',
        'enable_embedded_titles' => 'getEnableEmbeddedTitles',
        'enable_embedded_episode_infos' => 'getEnableEmbeddedEpisodeInfos',
        'automatic_refresh_interval_days' => 'getAutomaticRefreshIntervalDays',
        'preferred_metadata_language' => 'getPreferredMetadataLanguage',
        'metadata_country_code' => 'getMetadataCountryCode',
        'season_zero_display_name' => 'getSeasonZeroDisplayName',
        'metadata_savers' => 'getMetadataSavers',
        'disabled_local_metadata_readers' => 'getDisabledLocalMetadataReaders',
        'local_metadata_reader_order' => 'getLocalMetadataReaderOrder',
        'disabled_subtitle_fetchers' => 'getDisabledSubtitleFetchers',
        'subtitle_fetcher_order' => 'getSubtitleFetcherOrder',
        'skip_subtitles_if_embedded_subtitles_present' => 'getSkipSubtitlesIfEmbeddedSubtitlesPresent',
        'skip_subtitles_if_audio_track_matches' => 'getSkipSubtitlesIfAudioTrackMatches',
        'subtitle_download_languages' => 'getSubtitleDownloadLanguages',
        'require_perfect_subtitle_match' => 'getRequirePerfectSubtitleMatch',
        'save_subtitles_with_media' => 'getSaveSubtitlesWithMedia',
        'automatically_add_to_collection' => 'getAutomaticallyAddToCollection',
        'allow_embedded_subtitles' => 'getAllowEmbeddedSubtitles',
        'type_options' => 'getTypeOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enable_photos', $data ?? [], null);
        $this->setIfExists('enable_realtime_monitor', $data ?? [], null);
        $this->setIfExists('enable_chapter_image_extraction', $data ?? [], null);
        $this->setIfExists('extract_chapter_images_during_library_scan', $data ?? [], null);
        $this->setIfExists('path_infos', $data ?? [], null);
        $this->setIfExists('save_local_metadata', $data ?? [], null);
        $this->setIfExists('enable_internet_providers', $data ?? [], null);
        $this->setIfExists('enable_automatic_series_grouping', $data ?? [], null);
        $this->setIfExists('enable_embedded_titles', $data ?? [], null);
        $this->setIfExists('enable_embedded_episode_infos', $data ?? [], null);
        $this->setIfExists('automatic_refresh_interval_days', $data ?? [], null);
        $this->setIfExists('preferred_metadata_language', $data ?? [], null);
        $this->setIfExists('metadata_country_code', $data ?? [], null);
        $this->setIfExists('season_zero_display_name', $data ?? [], null);
        $this->setIfExists('metadata_savers', $data ?? [], null);
        $this->setIfExists('disabled_local_metadata_readers', $data ?? [], null);
        $this->setIfExists('local_metadata_reader_order', $data ?? [], null);
        $this->setIfExists('disabled_subtitle_fetchers', $data ?? [], null);
        $this->setIfExists('subtitle_fetcher_order', $data ?? [], null);
        $this->setIfExists('skip_subtitles_if_embedded_subtitles_present', $data ?? [], null);
        $this->setIfExists('skip_subtitles_if_audio_track_matches', $data ?? [], null);
        $this->setIfExists('subtitle_download_languages', $data ?? [], null);
        $this->setIfExists('require_perfect_subtitle_match', $data ?? [], null);
        $this->setIfExists('save_subtitles_with_media', $data ?? [], null);
        $this->setIfExists('automatically_add_to_collection', $data ?? [], null);
        $this->setIfExists('allow_embedded_subtitles', $data ?? [], null);
        $this->setIfExists('type_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_photos
     *
     * @return bool|null
     */
    public function getEnablePhotos()
    {
        return $this->container['enable_photos'];
    }

    /**
     * Sets enable_photos
     *
     * @param bool|null $enable_photos enable_photos
     *
     * @return self
     */
    public function setEnablePhotos($enable_photos)
    {
        if (is_null($enable_photos)) {
            throw new \InvalidArgumentException('non-nullable enable_photos cannot be null');
        }
        $this->container['enable_photos'] = $enable_photos;

        return $this;
    }

    /**
     * Gets enable_realtime_monitor
     *
     * @return bool|null
     */
    public function getEnableRealtimeMonitor()
    {
        return $this->container['enable_realtime_monitor'];
    }

    /**
     * Sets enable_realtime_monitor
     *
     * @param bool|null $enable_realtime_monitor enable_realtime_monitor
     *
     * @return self
     */
    public function setEnableRealtimeMonitor($enable_realtime_monitor)
    {
        if (is_null($enable_realtime_monitor)) {
            throw new \InvalidArgumentException('non-nullable enable_realtime_monitor cannot be null');
        }
        $this->container['enable_realtime_monitor'] = $enable_realtime_monitor;

        return $this;
    }

    /**
     * Gets enable_chapter_image_extraction
     *
     * @return bool|null
     */
    public function getEnableChapterImageExtraction()
    {
        return $this->container['enable_chapter_image_extraction'];
    }

    /**
     * Sets enable_chapter_image_extraction
     *
     * @param bool|null $enable_chapter_image_extraction enable_chapter_image_extraction
     *
     * @return self
     */
    public function setEnableChapterImageExtraction($enable_chapter_image_extraction)
    {
        if (is_null($enable_chapter_image_extraction)) {
            throw new \InvalidArgumentException('non-nullable enable_chapter_image_extraction cannot be null');
        }
        $this->container['enable_chapter_image_extraction'] = $enable_chapter_image_extraction;

        return $this;
    }

    /**
     * Gets extract_chapter_images_during_library_scan
     *
     * @return bool|null
     */
    public function getExtractChapterImagesDuringLibraryScan()
    {
        return $this->container['extract_chapter_images_during_library_scan'];
    }

    /**
     * Sets extract_chapter_images_during_library_scan
     *
     * @param bool|null $extract_chapter_images_during_library_scan extract_chapter_images_during_library_scan
     *
     * @return self
     */
    public function setExtractChapterImagesDuringLibraryScan($extract_chapter_images_during_library_scan)
    {
        if (is_null($extract_chapter_images_during_library_scan)) {
            throw new \InvalidArgumentException('non-nullable extract_chapter_images_during_library_scan cannot be null');
        }
        $this->container['extract_chapter_images_during_library_scan'] = $extract_chapter_images_during_library_scan;

        return $this;
    }

    /**
     * Gets path_infos
     *
     * @return \OpenAPI\Client\Model\MediaPathInfo[]|null
     */
    public function getPathInfos()
    {
        return $this->container['path_infos'];
    }

    /**
     * Sets path_infos
     *
     * @param \OpenAPI\Client\Model\MediaPathInfo[]|null $path_infos path_infos
     *
     * @return self
     */
    public function setPathInfos($path_infos)
    {
        if (is_null($path_infos)) {
            throw new \InvalidArgumentException('non-nullable path_infos cannot be null');
        }
        $this->container['path_infos'] = $path_infos;

        return $this;
    }

    /**
     * Gets save_local_metadata
     *
     * @return bool|null
     */
    public function getSaveLocalMetadata()
    {
        return $this->container['save_local_metadata'];
    }

    /**
     * Sets save_local_metadata
     *
     * @param bool|null $save_local_metadata save_local_metadata
     *
     * @return self
     */
    public function setSaveLocalMetadata($save_local_metadata)
    {
        if (is_null($save_local_metadata)) {
            throw new \InvalidArgumentException('non-nullable save_local_metadata cannot be null');
        }
        $this->container['save_local_metadata'] = $save_local_metadata;

        return $this;
    }

    /**
     * Gets enable_internet_providers
     *
     * @return bool|null
     * @deprecated
     */
    public function getEnableInternetProviders()
    {
        return $this->container['enable_internet_providers'];
    }

    /**
     * Sets enable_internet_providers
     *
     * @param bool|null $enable_internet_providers enable_internet_providers
     *
     * @return self
     * @deprecated
     */
    public function setEnableInternetProviders($enable_internet_providers)
    {
        if (is_null($enable_internet_providers)) {
            throw new \InvalidArgumentException('non-nullable enable_internet_providers cannot be null');
        }
        $this->container['enable_internet_providers'] = $enable_internet_providers;

        return $this;
    }

    /**
     * Gets enable_automatic_series_grouping
     *
     * @return bool|null
     */
    public function getEnableAutomaticSeriesGrouping()
    {
        return $this->container['enable_automatic_series_grouping'];
    }

    /**
     * Sets enable_automatic_series_grouping
     *
     * @param bool|null $enable_automatic_series_grouping enable_automatic_series_grouping
     *
     * @return self
     */
    public function setEnableAutomaticSeriesGrouping($enable_automatic_series_grouping)
    {
        if (is_null($enable_automatic_series_grouping)) {
            throw new \InvalidArgumentException('non-nullable enable_automatic_series_grouping cannot be null');
        }
        $this->container['enable_automatic_series_grouping'] = $enable_automatic_series_grouping;

        return $this;
    }

    /**
     * Gets enable_embedded_titles
     *
     * @return bool|null
     */
    public function getEnableEmbeddedTitles()
    {
        return $this->container['enable_embedded_titles'];
    }

    /**
     * Sets enable_embedded_titles
     *
     * @param bool|null $enable_embedded_titles enable_embedded_titles
     *
     * @return self
     */
    public function setEnableEmbeddedTitles($enable_embedded_titles)
    {
        if (is_null($enable_embedded_titles)) {
            throw new \InvalidArgumentException('non-nullable enable_embedded_titles cannot be null');
        }
        $this->container['enable_embedded_titles'] = $enable_embedded_titles;

        return $this;
    }

    /**
     * Gets enable_embedded_episode_infos
     *
     * @return bool|null
     */
    public function getEnableEmbeddedEpisodeInfos()
    {
        return $this->container['enable_embedded_episode_infos'];
    }

    /**
     * Sets enable_embedded_episode_infos
     *
     * @param bool|null $enable_embedded_episode_infos enable_embedded_episode_infos
     *
     * @return self
     */
    public function setEnableEmbeddedEpisodeInfos($enable_embedded_episode_infos)
    {
        if (is_null($enable_embedded_episode_infos)) {
            throw new \InvalidArgumentException('non-nullable enable_embedded_episode_infos cannot be null');
        }
        $this->container['enable_embedded_episode_infos'] = $enable_embedded_episode_infos;

        return $this;
    }

    /**
     * Gets automatic_refresh_interval_days
     *
     * @return int|null
     */
    public function getAutomaticRefreshIntervalDays()
    {
        return $this->container['automatic_refresh_interval_days'];
    }

    /**
     * Sets automatic_refresh_interval_days
     *
     * @param int|null $automatic_refresh_interval_days automatic_refresh_interval_days
     *
     * @return self
     */
    public function setAutomaticRefreshIntervalDays($automatic_refresh_interval_days)
    {
        if (is_null($automatic_refresh_interval_days)) {
            throw new \InvalidArgumentException('non-nullable automatic_refresh_interval_days cannot be null');
        }
        $this->container['automatic_refresh_interval_days'] = $automatic_refresh_interval_days;

        return $this;
    }

    /**
     * Gets preferred_metadata_language
     *
     * @return string|null
     */
    public function getPreferredMetadataLanguage()
    {
        return $this->container['preferred_metadata_language'];
    }

    /**
     * Sets preferred_metadata_language
     *
     * @param string|null $preferred_metadata_language Gets or sets the preferred metadata language.
     *
     * @return self
     */
    public function setPreferredMetadataLanguage($preferred_metadata_language)
    {
        if (is_null($preferred_metadata_language)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_metadata_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_metadata_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_metadata_language'] = $preferred_metadata_language;

        return $this;
    }

    /**
     * Gets metadata_country_code
     *
     * @return string|null
     */
    public function getMetadataCountryCode()
    {
        return $this->container['metadata_country_code'];
    }

    /**
     * Sets metadata_country_code
     *
     * @param string|null $metadata_country_code Gets or sets the metadata country code.
     *
     * @return self
     */
    public function setMetadataCountryCode($metadata_country_code)
    {
        if (is_null($metadata_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'metadata_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata_country_code'] = $metadata_country_code;

        return $this;
    }

    /**
     * Gets season_zero_display_name
     *
     * @return string|null
     */
    public function getSeasonZeroDisplayName()
    {
        return $this->container['season_zero_display_name'];
    }

    /**
     * Sets season_zero_display_name
     *
     * @param string|null $season_zero_display_name season_zero_display_name
     *
     * @return self
     */
    public function setSeasonZeroDisplayName($season_zero_display_name)
    {
        if (is_null($season_zero_display_name)) {
            throw new \InvalidArgumentException('non-nullable season_zero_display_name cannot be null');
        }
        $this->container['season_zero_display_name'] = $season_zero_display_name;

        return $this;
    }

    /**
     * Gets metadata_savers
     *
     * @return string[]|null
     */
    public function getMetadataSavers()
    {
        return $this->container['metadata_savers'];
    }

    /**
     * Sets metadata_savers
     *
     * @param string[]|null $metadata_savers metadata_savers
     *
     * @return self
     */
    public function setMetadataSavers($metadata_savers)
    {
        if (is_null($metadata_savers)) {
            array_push($this->openAPINullablesSetToNull, 'metadata_savers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata_savers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata_savers'] = $metadata_savers;

        return $this;
    }

    /**
     * Gets disabled_local_metadata_readers
     *
     * @return string[]|null
     */
    public function getDisabledLocalMetadataReaders()
    {
        return $this->container['disabled_local_metadata_readers'];
    }

    /**
     * Sets disabled_local_metadata_readers
     *
     * @param string[]|null $disabled_local_metadata_readers disabled_local_metadata_readers
     *
     * @return self
     */
    public function setDisabledLocalMetadataReaders($disabled_local_metadata_readers)
    {
        if (is_null($disabled_local_metadata_readers)) {
            throw new \InvalidArgumentException('non-nullable disabled_local_metadata_readers cannot be null');
        }
        $this->container['disabled_local_metadata_readers'] = $disabled_local_metadata_readers;

        return $this;
    }

    /**
     * Gets local_metadata_reader_order
     *
     * @return string[]|null
     */
    public function getLocalMetadataReaderOrder()
    {
        return $this->container['local_metadata_reader_order'];
    }

    /**
     * Sets local_metadata_reader_order
     *
     * @param string[]|null $local_metadata_reader_order local_metadata_reader_order
     *
     * @return self
     */
    public function setLocalMetadataReaderOrder($local_metadata_reader_order)
    {
        if (is_null($local_metadata_reader_order)) {
            array_push($this->openAPINullablesSetToNull, 'local_metadata_reader_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_metadata_reader_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_metadata_reader_order'] = $local_metadata_reader_order;

        return $this;
    }

    /**
     * Gets disabled_subtitle_fetchers
     *
     * @return string[]|null
     */
    public function getDisabledSubtitleFetchers()
    {
        return $this->container['disabled_subtitle_fetchers'];
    }

    /**
     * Sets disabled_subtitle_fetchers
     *
     * @param string[]|null $disabled_subtitle_fetchers disabled_subtitle_fetchers
     *
     * @return self
     */
    public function setDisabledSubtitleFetchers($disabled_subtitle_fetchers)
    {
        if (is_null($disabled_subtitle_fetchers)) {
            throw new \InvalidArgumentException('non-nullable disabled_subtitle_fetchers cannot be null');
        }
        $this->container['disabled_subtitle_fetchers'] = $disabled_subtitle_fetchers;

        return $this;
    }

    /**
     * Gets subtitle_fetcher_order
     *
     * @return string[]|null
     */
    public function getSubtitleFetcherOrder()
    {
        return $this->container['subtitle_fetcher_order'];
    }

    /**
     * Sets subtitle_fetcher_order
     *
     * @param string[]|null $subtitle_fetcher_order subtitle_fetcher_order
     *
     * @return self
     */
    public function setSubtitleFetcherOrder($subtitle_fetcher_order)
    {
        if (is_null($subtitle_fetcher_order)) {
            throw new \InvalidArgumentException('non-nullable subtitle_fetcher_order cannot be null');
        }
        $this->container['subtitle_fetcher_order'] = $subtitle_fetcher_order;

        return $this;
    }

    /**
     * Gets skip_subtitles_if_embedded_subtitles_present
     *
     * @return bool|null
     */
    public function getSkipSubtitlesIfEmbeddedSubtitlesPresent()
    {
        return $this->container['skip_subtitles_if_embedded_subtitles_present'];
    }

    /**
     * Sets skip_subtitles_if_embedded_subtitles_present
     *
     * @param bool|null $skip_subtitles_if_embedded_subtitles_present skip_subtitles_if_embedded_subtitles_present
     *
     * @return self
     */
    public function setSkipSubtitlesIfEmbeddedSubtitlesPresent($skip_subtitles_if_embedded_subtitles_present)
    {
        if (is_null($skip_subtitles_if_embedded_subtitles_present)) {
            throw new \InvalidArgumentException('non-nullable skip_subtitles_if_embedded_subtitles_present cannot be null');
        }
        $this->container['skip_subtitles_if_embedded_subtitles_present'] = $skip_subtitles_if_embedded_subtitles_present;

        return $this;
    }

    /**
     * Gets skip_subtitles_if_audio_track_matches
     *
     * @return bool|null
     */
    public function getSkipSubtitlesIfAudioTrackMatches()
    {
        return $this->container['skip_subtitles_if_audio_track_matches'];
    }

    /**
     * Sets skip_subtitles_if_audio_track_matches
     *
     * @param bool|null $skip_subtitles_if_audio_track_matches skip_subtitles_if_audio_track_matches
     *
     * @return self
     */
    public function setSkipSubtitlesIfAudioTrackMatches($skip_subtitles_if_audio_track_matches)
    {
        if (is_null($skip_subtitles_if_audio_track_matches)) {
            throw new \InvalidArgumentException('non-nullable skip_subtitles_if_audio_track_matches cannot be null');
        }
        $this->container['skip_subtitles_if_audio_track_matches'] = $skip_subtitles_if_audio_track_matches;

        return $this;
    }

    /**
     * Gets subtitle_download_languages
     *
     * @return string[]|null
     */
    public function getSubtitleDownloadLanguages()
    {
        return $this->container['subtitle_download_languages'];
    }

    /**
     * Sets subtitle_download_languages
     *
     * @param string[]|null $subtitle_download_languages subtitle_download_languages
     *
     * @return self
     */
    public function setSubtitleDownloadLanguages($subtitle_download_languages)
    {
        if (is_null($subtitle_download_languages)) {
            array_push($this->openAPINullablesSetToNull, 'subtitle_download_languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtitle_download_languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subtitle_download_languages'] = $subtitle_download_languages;

        return $this;
    }

    /**
     * Gets require_perfect_subtitle_match
     *
     * @return bool|null
     */
    public function getRequirePerfectSubtitleMatch()
    {
        return $this->container['require_perfect_subtitle_match'];
    }

    /**
     * Sets require_perfect_subtitle_match
     *
     * @param bool|null $require_perfect_subtitle_match require_perfect_subtitle_match
     *
     * @return self
     */
    public function setRequirePerfectSubtitleMatch($require_perfect_subtitle_match)
    {
        if (is_null($require_perfect_subtitle_match)) {
            throw new \InvalidArgumentException('non-nullable require_perfect_subtitle_match cannot be null');
        }
        $this->container['require_perfect_subtitle_match'] = $require_perfect_subtitle_match;

        return $this;
    }

    /**
     * Gets save_subtitles_with_media
     *
     * @return bool|null
     */
    public function getSaveSubtitlesWithMedia()
    {
        return $this->container['save_subtitles_with_media'];
    }

    /**
     * Sets save_subtitles_with_media
     *
     * @param bool|null $save_subtitles_with_media save_subtitles_with_media
     *
     * @return self
     */
    public function setSaveSubtitlesWithMedia($save_subtitles_with_media)
    {
        if (is_null($save_subtitles_with_media)) {
            throw new \InvalidArgumentException('non-nullable save_subtitles_with_media cannot be null');
        }
        $this->container['save_subtitles_with_media'] = $save_subtitles_with_media;

        return $this;
    }

    /**
     * Gets automatically_add_to_collection
     *
     * @return bool|null
     */
    public function getAutomaticallyAddToCollection()
    {
        return $this->container['automatically_add_to_collection'];
    }

    /**
     * Sets automatically_add_to_collection
     *
     * @param bool|null $automatically_add_to_collection automatically_add_to_collection
     *
     * @return self
     */
    public function setAutomaticallyAddToCollection($automatically_add_to_collection)
    {
        if (is_null($automatically_add_to_collection)) {
            throw new \InvalidArgumentException('non-nullable automatically_add_to_collection cannot be null');
        }
        $this->container['automatically_add_to_collection'] = $automatically_add_to_collection;

        return $this;
    }

    /**
     * Gets allow_embedded_subtitles
     *
     * @return \OpenAPI\Client\Model\EmbeddedSubtitleOptions|null
     */
    public function getAllowEmbeddedSubtitles()
    {
        return $this->container['allow_embedded_subtitles'];
    }

    /**
     * Sets allow_embedded_subtitles
     *
     * @param \OpenAPI\Client\Model\EmbeddedSubtitleOptions|null $allow_embedded_subtitles allow_embedded_subtitles
     *
     * @return self
     */
    public function setAllowEmbeddedSubtitles($allow_embedded_subtitles)
    {
        if (is_null($allow_embedded_subtitles)) {
            throw new \InvalidArgumentException('non-nullable allow_embedded_subtitles cannot be null');
        }
        $this->container['allow_embedded_subtitles'] = $allow_embedded_subtitles;

        return $this;
    }

    /**
     * Gets type_options
     *
     * @return \OpenAPI\Client\Model\TypeOptions[]|null
     */
    public function getTypeOptions()
    {
        return $this->container['type_options'];
    }

    /**
     * Sets type_options
     *
     * @param \OpenAPI\Client\Model\TypeOptions[]|null $type_options type_options
     *
     * @return self
     */
    public function setTypeOptions($type_options)
    {
        if (is_null($type_options)) {
            throw new \InvalidArgumentException('non-nullable type_options cannot be null');
        }
        $this->container['type_options'] = $type_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


