<?php
/**
 * PlaystateApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PlaystateApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlaystateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'markPlayedItem' => [
            'application/json',
        ],
        'markUnplayedItem' => [
            'application/json',
        ],
        'onPlaybackProgress' => [
            'application/json',
        ],
        'onPlaybackStart' => [
            'application/json',
        ],
        'onPlaybackStopped' => [
            'application/json',
        ],
        'pingPlaybackSession' => [
            'application/json',
        ],
        'reportPlaybackProgress' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'reportPlaybackStart' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'reportPlaybackStopped' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation markPlayedItem
     *
     * Marks an item as played for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  \DateTime $date_played Optional. The date the item was played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markPlayedItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserItemDataDto
     */
    public function markPlayedItem($user_id, $item_id, $date_played = null, string $contentType = self::contentTypes['markPlayedItem'][0])
    {
        list($response) = $this->markPlayedItemWithHttpInfo($user_id, $item_id, $date_played, $contentType);
        return $response;
    }

    /**
     * Operation markPlayedItemWithHttpInfo
     *
     * Marks an item as played for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  \DateTime $date_played Optional. The date the item was played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markPlayedItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserItemDataDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function markPlayedItemWithHttpInfo($user_id, $item_id, $date_played = null, string $contentType = self::contentTypes['markPlayedItem'][0])
    {
        $request = $this->markPlayedItemRequest($user_id, $item_id, $date_played, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UserItemDataDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UserItemDataDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UserItemDataDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UserItemDataDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserItemDataDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markPlayedItemAsync
     *
     * Marks an item as played for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  \DateTime $date_played Optional. The date the item was played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markPlayedItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markPlayedItemAsync($user_id, $item_id, $date_played = null, string $contentType = self::contentTypes['markPlayedItem'][0])
    {
        return $this->markPlayedItemAsyncWithHttpInfo($user_id, $item_id, $date_played, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markPlayedItemAsyncWithHttpInfo
     *
     * Marks an item as played for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  \DateTime $date_played Optional. The date the item was played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markPlayedItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markPlayedItemAsyncWithHttpInfo($user_id, $item_id, $date_played = null, string $contentType = self::contentTypes['markPlayedItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserItemDataDto';
        $request = $this->markPlayedItemRequest($user_id, $item_id, $date_played, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markPlayedItem'
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  \DateTime $date_played Optional. The date the item was played. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markPlayedItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markPlayedItemRequest($user_id, $item_id, $date_played = null, string $contentType = self::contentTypes['markPlayedItem'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling markPlayedItem'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling markPlayedItem'
            );
        }



        $resourcePath = '/Users/{userId}/PlayedItems/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_played,
            'datePlayed', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markUnplayedItem
     *
     * Marks an item as unplayed for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markUnplayedItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserItemDataDto
     */
    public function markUnplayedItem($user_id, $item_id, string $contentType = self::contentTypes['markUnplayedItem'][0])
    {
        list($response) = $this->markUnplayedItemWithHttpInfo($user_id, $item_id, $contentType);
        return $response;
    }

    /**
     * Operation markUnplayedItemWithHttpInfo
     *
     * Marks an item as unplayed for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markUnplayedItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserItemDataDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function markUnplayedItemWithHttpInfo($user_id, $item_id, string $contentType = self::contentTypes['markUnplayedItem'][0])
    {
        $request = $this->markUnplayedItemRequest($user_id, $item_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UserItemDataDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UserItemDataDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UserItemDataDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UserItemDataDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserItemDataDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markUnplayedItemAsync
     *
     * Marks an item as unplayed for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markUnplayedItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markUnplayedItemAsync($user_id, $item_id, string $contentType = self::contentTypes['markUnplayedItem'][0])
    {
        return $this->markUnplayedItemAsyncWithHttpInfo($user_id, $item_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markUnplayedItemAsyncWithHttpInfo
     *
     * Marks an item as unplayed for user.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markUnplayedItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markUnplayedItemAsyncWithHttpInfo($user_id, $item_id, string $contentType = self::contentTypes['markUnplayedItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserItemDataDto';
        $request = $this->markUnplayedItemRequest($user_id, $item_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markUnplayedItem'
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markUnplayedItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markUnplayedItemRequest($user_id, $item_id, string $contentType = self::contentTypes['markUnplayedItem'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling markUnplayedItem'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling markUnplayedItem'
            );
        }


        $resourcePath = '/Users/{userId}/PlayedItems/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation onPlaybackProgress
     *
     * Reports a user&#39;s playback progress.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $position_ticks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $volume_level Scale of 0-100. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  \OpenAPI\Client\Model\RepeatMode $repeat_mode The repeat mode. (optional)
     * @param  bool $is_paused Indicates if the player is paused. (optional, default to false)
     * @param  bool $is_muted Indicates if the player is muted. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function onPlaybackProgress($user_id, $item_id, $media_source_id = null, $position_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $volume_level = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $repeat_mode = null, $is_paused = false, $is_muted = false, string $contentType = self::contentTypes['onPlaybackProgress'][0])
    {
        $this->onPlaybackProgressWithHttpInfo($user_id, $item_id, $media_source_id, $position_ticks, $audio_stream_index, $subtitle_stream_index, $volume_level, $play_method, $live_stream_id, $play_session_id, $repeat_mode, $is_paused, $is_muted, $contentType);
    }

    /**
     * Operation onPlaybackProgressWithHttpInfo
     *
     * Reports a user&#39;s playback progress.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $position_ticks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $volume_level Scale of 0-100. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  \OpenAPI\Client\Model\RepeatMode $repeat_mode The repeat mode. (optional)
     * @param  bool $is_paused Indicates if the player is paused. (optional, default to false)
     * @param  bool $is_muted Indicates if the player is muted. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function onPlaybackProgressWithHttpInfo($user_id, $item_id, $media_source_id = null, $position_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $volume_level = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $repeat_mode = null, $is_paused = false, $is_muted = false, string $contentType = self::contentTypes['onPlaybackProgress'][0])
    {
        $request = $this->onPlaybackProgressRequest($user_id, $item_id, $media_source_id, $position_ticks, $audio_stream_index, $subtitle_stream_index, $volume_level, $play_method, $live_stream_id, $play_session_id, $repeat_mode, $is_paused, $is_muted, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation onPlaybackProgressAsync
     *
     * Reports a user&#39;s playback progress.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $position_ticks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $volume_level Scale of 0-100. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  \OpenAPI\Client\Model\RepeatMode $repeat_mode The repeat mode. (optional)
     * @param  bool $is_paused Indicates if the player is paused. (optional, default to false)
     * @param  bool $is_muted Indicates if the player is muted. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function onPlaybackProgressAsync($user_id, $item_id, $media_source_id = null, $position_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $volume_level = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $repeat_mode = null, $is_paused = false, $is_muted = false, string $contentType = self::contentTypes['onPlaybackProgress'][0])
    {
        return $this->onPlaybackProgressAsyncWithHttpInfo($user_id, $item_id, $media_source_id, $position_ticks, $audio_stream_index, $subtitle_stream_index, $volume_level, $play_method, $live_stream_id, $play_session_id, $repeat_mode, $is_paused, $is_muted, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation onPlaybackProgressAsyncWithHttpInfo
     *
     * Reports a user&#39;s playback progress.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $position_ticks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $volume_level Scale of 0-100. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  \OpenAPI\Client\Model\RepeatMode $repeat_mode The repeat mode. (optional)
     * @param  bool $is_paused Indicates if the player is paused. (optional, default to false)
     * @param  bool $is_muted Indicates if the player is muted. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function onPlaybackProgressAsyncWithHttpInfo($user_id, $item_id, $media_source_id = null, $position_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $volume_level = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $repeat_mode = null, $is_paused = false, $is_muted = false, string $contentType = self::contentTypes['onPlaybackProgress'][0])
    {
        $returnType = '';
        $request = $this->onPlaybackProgressRequest($user_id, $item_id, $media_source_id, $position_ticks, $audio_stream_index, $subtitle_stream_index, $volume_level, $play_method, $live_stream_id, $play_session_id, $repeat_mode, $is_paused, $is_muted, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'onPlaybackProgress'
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $position_ticks Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $volume_level Scale of 0-100. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  \OpenAPI\Client\Model\RepeatMode $repeat_mode The repeat mode. (optional)
     * @param  bool $is_paused Indicates if the player is paused. (optional, default to false)
     * @param  bool $is_muted Indicates if the player is muted. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function onPlaybackProgressRequest($user_id, $item_id, $media_source_id = null, $position_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $volume_level = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $repeat_mode = null, $is_paused = false, $is_muted = false, string $contentType = self::contentTypes['onPlaybackProgress'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling onPlaybackProgress'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling onPlaybackProgress'
            );
        }













        $resourcePath = '/Users/{userId}/PlayingItems/{itemId}/Progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_ticks,
            'positionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $audio_stream_index,
            'audioStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subtitle_stream_index,
            'subtitleStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $volume_level,
            'volumeLevel', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_method,
            'playMethod', // param base name
            'PlayMethod', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $live_stream_id,
            'liveStreamId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_session_id,
            'playSessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $repeat_mode,
            'repeatMode', // param base name
            'RepeatMode', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_paused,
            'isPaused', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_muted,
            'isMuted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation onPlaybackStart
     *
     * Reports that a user has begun playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  bool $can_seek Indicates if the client can seek. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStart'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function onPlaybackStart($user_id, $item_id, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $can_seek = false, string $contentType = self::contentTypes['onPlaybackStart'][0])
    {
        $this->onPlaybackStartWithHttpInfo($user_id, $item_id, $media_source_id, $audio_stream_index, $subtitle_stream_index, $play_method, $live_stream_id, $play_session_id, $can_seek, $contentType);
    }

    /**
     * Operation onPlaybackStartWithHttpInfo
     *
     * Reports that a user has begun playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  bool $can_seek Indicates if the client can seek. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStart'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function onPlaybackStartWithHttpInfo($user_id, $item_id, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $can_seek = false, string $contentType = self::contentTypes['onPlaybackStart'][0])
    {
        $request = $this->onPlaybackStartRequest($user_id, $item_id, $media_source_id, $audio_stream_index, $subtitle_stream_index, $play_method, $live_stream_id, $play_session_id, $can_seek, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation onPlaybackStartAsync
     *
     * Reports that a user has begun playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  bool $can_seek Indicates if the client can seek. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function onPlaybackStartAsync($user_id, $item_id, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $can_seek = false, string $contentType = self::contentTypes['onPlaybackStart'][0])
    {
        return $this->onPlaybackStartAsyncWithHttpInfo($user_id, $item_id, $media_source_id, $audio_stream_index, $subtitle_stream_index, $play_method, $live_stream_id, $play_session_id, $can_seek, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation onPlaybackStartAsyncWithHttpInfo
     *
     * Reports that a user has begun playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  bool $can_seek Indicates if the client can seek. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function onPlaybackStartAsyncWithHttpInfo($user_id, $item_id, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $can_seek = false, string $contentType = self::contentTypes['onPlaybackStart'][0])
    {
        $returnType = '';
        $request = $this->onPlaybackStartRequest($user_id, $item_id, $media_source_id, $audio_stream_index, $subtitle_stream_index, $play_method, $live_stream_id, $play_session_id, $can_seek, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'onPlaybackStart'
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  \OpenAPI\Client\Model\PlayMethod $play_method The play method. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  bool $can_seek Indicates if the client can seek. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function onPlaybackStartRequest($user_id, $item_id, $media_source_id = null, $audio_stream_index = null, $subtitle_stream_index = null, $play_method = null, $live_stream_id = null, $play_session_id = null, $can_seek = false, string $contentType = self::contentTypes['onPlaybackStart'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling onPlaybackStart'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling onPlaybackStart'
            );
        }









        $resourcePath = '/Users/{userId}/PlayingItems/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $audio_stream_index,
            'audioStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subtitle_stream_index,
            'subtitleStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_method,
            'playMethod', // param base name
            'PlayMethod', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $live_stream_id,
            'liveStreamId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_session_id,
            'playSessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $can_seek,
            'canSeek', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation onPlaybackStopped
     *
     * Reports that a user has stopped playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  string $next_media_type The next media type that will play. (optional)
     * @param  int $position_ticks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function onPlaybackStopped($user_id, $item_id, $media_source_id = null, $next_media_type = null, $position_ticks = null, $live_stream_id = null, $play_session_id = null, string $contentType = self::contentTypes['onPlaybackStopped'][0])
    {
        $this->onPlaybackStoppedWithHttpInfo($user_id, $item_id, $media_source_id, $next_media_type, $position_ticks, $live_stream_id, $play_session_id, $contentType);
    }

    /**
     * Operation onPlaybackStoppedWithHttpInfo
     *
     * Reports that a user has stopped playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  string $next_media_type The next media type that will play. (optional)
     * @param  int $position_ticks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function onPlaybackStoppedWithHttpInfo($user_id, $item_id, $media_source_id = null, $next_media_type = null, $position_ticks = null, $live_stream_id = null, $play_session_id = null, string $contentType = self::contentTypes['onPlaybackStopped'][0])
    {
        $request = $this->onPlaybackStoppedRequest($user_id, $item_id, $media_source_id, $next_media_type, $position_ticks, $live_stream_id, $play_session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation onPlaybackStoppedAsync
     *
     * Reports that a user has stopped playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  string $next_media_type The next media type that will play. (optional)
     * @param  int $position_ticks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function onPlaybackStoppedAsync($user_id, $item_id, $media_source_id = null, $next_media_type = null, $position_ticks = null, $live_stream_id = null, $play_session_id = null, string $contentType = self::contentTypes['onPlaybackStopped'][0])
    {
        return $this->onPlaybackStoppedAsyncWithHttpInfo($user_id, $item_id, $media_source_id, $next_media_type, $position_ticks, $live_stream_id, $play_session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation onPlaybackStoppedAsyncWithHttpInfo
     *
     * Reports that a user has stopped playing an item.
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  string $next_media_type The next media type that will play. (optional)
     * @param  int $position_ticks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function onPlaybackStoppedAsyncWithHttpInfo($user_id, $item_id, $media_source_id = null, $next_media_type = null, $position_ticks = null, $live_stream_id = null, $play_session_id = null, string $contentType = self::contentTypes['onPlaybackStopped'][0])
    {
        $returnType = '';
        $request = $this->onPlaybackStoppedRequest($user_id, $item_id, $media_source_id, $next_media_type, $position_ticks, $live_stream_id, $play_session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'onPlaybackStopped'
     *
     * @param  string $user_id User id. (required)
     * @param  string $item_id Item id. (required)
     * @param  string $media_source_id The id of the MediaSource. (optional)
     * @param  string $next_media_type The next media type that will play. (optional)
     * @param  int $position_ticks Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)
     * @param  string $live_stream_id The live stream id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['onPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function onPlaybackStoppedRequest($user_id, $item_id, $media_source_id = null, $next_media_type = null, $position_ticks = null, $live_stream_id = null, $play_session_id = null, string $contentType = self::contentTypes['onPlaybackStopped'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling onPlaybackStopped'
            );
        }

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling onPlaybackStopped'
            );
        }







        $resourcePath = '/Users/{userId}/PlayingItems/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_media_type,
            'nextMediaType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_ticks,
            'positionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $live_stream_id,
            'liveStreamId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_session_id,
            'playSessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pingPlaybackSession
     *
     * Pings a playback session.
     *
     * @param  string $play_session_id Playback session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingPlaybackSession'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pingPlaybackSession($play_session_id, string $contentType = self::contentTypes['pingPlaybackSession'][0])
    {
        $this->pingPlaybackSessionWithHttpInfo($play_session_id, $contentType);
    }

    /**
     * Operation pingPlaybackSessionWithHttpInfo
     *
     * Pings a playback session.
     *
     * @param  string $play_session_id Playback session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingPlaybackSession'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pingPlaybackSessionWithHttpInfo($play_session_id, string $contentType = self::contentTypes['pingPlaybackSession'][0])
    {
        $request = $this->pingPlaybackSessionRequest($play_session_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pingPlaybackSessionAsync
     *
     * Pings a playback session.
     *
     * @param  string $play_session_id Playback session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingPlaybackSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pingPlaybackSessionAsync($play_session_id, string $contentType = self::contentTypes['pingPlaybackSession'][0])
    {
        return $this->pingPlaybackSessionAsyncWithHttpInfo($play_session_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pingPlaybackSessionAsyncWithHttpInfo
     *
     * Pings a playback session.
     *
     * @param  string $play_session_id Playback session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingPlaybackSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pingPlaybackSessionAsyncWithHttpInfo($play_session_id, string $contentType = self::contentTypes['pingPlaybackSession'][0])
    {
        $returnType = '';
        $request = $this->pingPlaybackSessionRequest($play_session_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pingPlaybackSession'
     *
     * @param  string $play_session_id Playback session id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingPlaybackSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pingPlaybackSessionRequest($play_session_id, string $contentType = self::contentTypes['pingPlaybackSession'][0])
    {

        // verify the required parameter 'play_session_id' is set
        if ($play_session_id === null || (is_array($play_session_id) && count($play_session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $play_session_id when calling pingPlaybackSession'
            );
        }


        $resourcePath = '/Sessions/Playing/Ping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_session_id,
            'playSessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportPlaybackProgress
     *
     * Reports playback progress within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackProgressRequest $report_playback_progress_request The playback progress info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportPlaybackProgress($report_playback_progress_request = null, string $contentType = self::contentTypes['reportPlaybackProgress'][0])
    {
        $this->reportPlaybackProgressWithHttpInfo($report_playback_progress_request, $contentType);
    }

    /**
     * Operation reportPlaybackProgressWithHttpInfo
     *
     * Reports playback progress within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackProgressRequest $report_playback_progress_request The playback progress info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportPlaybackProgressWithHttpInfo($report_playback_progress_request = null, string $contentType = self::contentTypes['reportPlaybackProgress'][0])
    {
        $request = $this->reportPlaybackProgressRequest($report_playback_progress_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportPlaybackProgressAsync
     *
     * Reports playback progress within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackProgressRequest $report_playback_progress_request The playback progress info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportPlaybackProgressAsync($report_playback_progress_request = null, string $contentType = self::contentTypes['reportPlaybackProgress'][0])
    {
        return $this->reportPlaybackProgressAsyncWithHttpInfo($report_playback_progress_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportPlaybackProgressAsyncWithHttpInfo
     *
     * Reports playback progress within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackProgressRequest $report_playback_progress_request The playback progress info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportPlaybackProgressAsyncWithHttpInfo($report_playback_progress_request = null, string $contentType = self::contentTypes['reportPlaybackProgress'][0])
    {
        $returnType = '';
        $request = $this->reportPlaybackProgressRequest($report_playback_progress_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportPlaybackProgress'
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackProgressRequest $report_playback_progress_request The playback progress info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportPlaybackProgressRequest($report_playback_progress_request = null, string $contentType = self::contentTypes['reportPlaybackProgress'][0])
    {



        $resourcePath = '/Sessions/Playing/Progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($report_playback_progress_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($report_playback_progress_request));
            } else {
                $httpBody = $report_playback_progress_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportPlaybackStart
     *
     * Reports playback has started within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStartRequest $report_playback_start_request The playback start info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStart'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportPlaybackStart($report_playback_start_request = null, string $contentType = self::contentTypes['reportPlaybackStart'][0])
    {
        $this->reportPlaybackStartWithHttpInfo($report_playback_start_request, $contentType);
    }

    /**
     * Operation reportPlaybackStartWithHttpInfo
     *
     * Reports playback has started within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStartRequest $report_playback_start_request The playback start info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStart'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportPlaybackStartWithHttpInfo($report_playback_start_request = null, string $contentType = self::contentTypes['reportPlaybackStart'][0])
    {
        $request = $this->reportPlaybackStartRequest($report_playback_start_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportPlaybackStartAsync
     *
     * Reports playback has started within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStartRequest $report_playback_start_request The playback start info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportPlaybackStartAsync($report_playback_start_request = null, string $contentType = self::contentTypes['reportPlaybackStart'][0])
    {
        return $this->reportPlaybackStartAsyncWithHttpInfo($report_playback_start_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportPlaybackStartAsyncWithHttpInfo
     *
     * Reports playback has started within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStartRequest $report_playback_start_request The playback start info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportPlaybackStartAsyncWithHttpInfo($report_playback_start_request = null, string $contentType = self::contentTypes['reportPlaybackStart'][0])
    {
        $returnType = '';
        $request = $this->reportPlaybackStartRequest($report_playback_start_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportPlaybackStart'
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStartRequest $report_playback_start_request The playback start info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportPlaybackStartRequest($report_playback_start_request = null, string $contentType = self::contentTypes['reportPlaybackStart'][0])
    {



        $resourcePath = '/Sessions/Playing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($report_playback_start_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($report_playback_start_request));
            } else {
                $httpBody = $report_playback_start_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportPlaybackStopped
     *
     * Reports playback has stopped within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStoppedRequest $report_playback_stopped_request The playback stop info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportPlaybackStopped($report_playback_stopped_request = null, string $contentType = self::contentTypes['reportPlaybackStopped'][0])
    {
        $this->reportPlaybackStoppedWithHttpInfo($report_playback_stopped_request, $contentType);
    }

    /**
     * Operation reportPlaybackStoppedWithHttpInfo
     *
     * Reports playback has stopped within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStoppedRequest $report_playback_stopped_request The playback stop info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportPlaybackStoppedWithHttpInfo($report_playback_stopped_request = null, string $contentType = self::contentTypes['reportPlaybackStopped'][0])
    {
        $request = $this->reportPlaybackStoppedRequest($report_playback_stopped_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportPlaybackStoppedAsync
     *
     * Reports playback has stopped within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStoppedRequest $report_playback_stopped_request The playback stop info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportPlaybackStoppedAsync($report_playback_stopped_request = null, string $contentType = self::contentTypes['reportPlaybackStopped'][0])
    {
        return $this->reportPlaybackStoppedAsyncWithHttpInfo($report_playback_stopped_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportPlaybackStoppedAsyncWithHttpInfo
     *
     * Reports playback has stopped within a session.
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStoppedRequest $report_playback_stopped_request The playback stop info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportPlaybackStoppedAsyncWithHttpInfo($report_playback_stopped_request = null, string $contentType = self::contentTypes['reportPlaybackStopped'][0])
    {
        $returnType = '';
        $request = $this->reportPlaybackStoppedRequest($report_playback_stopped_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportPlaybackStopped'
     *
     * @param  \OpenAPI\Client\Model\ReportPlaybackStoppedRequest $report_playback_stopped_request The playback stop info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportPlaybackStopped'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportPlaybackStoppedRequest($report_playback_stopped_request = null, string $contentType = self::contentTypes['reportPlaybackStopped'][0])
    {



        $resourcePath = '/Sessions/Playing/Stopped';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($report_playback_stopped_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($report_playback_stopped_request));
            } else {
                $httpBody = $report_playback_stopped_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
