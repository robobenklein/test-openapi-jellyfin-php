<?php
/**
 * ChannelFeatures
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChannelFeatures Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelFeatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'id' => 'string',
        'can_search' => 'bool',
        'media_types' => '\OpenAPI\Client\Model\ChannelMediaType[]',
        'content_types' => '\OpenAPI\Client\Model\ChannelMediaContentType[]',
        'max_page_size' => 'int',
        'auto_refresh_levels' => 'int',
        'default_sort_fields' => '\OpenAPI\Client\Model\ChannelItemSortField[]',
        'supports_sort_order_toggle' => 'bool',
        'supports_latest_media' => 'bool',
        'can_filter' => 'bool',
        'supports_content_downloading' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'id' => 'uuid',
        'can_search' => null,
        'media_types' => null,
        'content_types' => null,
        'max_page_size' => 'int32',
        'auto_refresh_levels' => 'int32',
        'default_sort_fields' => null,
        'supports_sort_order_toggle' => null,
        'supports_latest_media' => null,
        'can_filter' => null,
        'supports_content_downloading' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'id' => false,
		'can_search' => false,
		'media_types' => false,
		'content_types' => false,
		'max_page_size' => true,
		'auto_refresh_levels' => true,
		'default_sort_fields' => false,
		'supports_sort_order_toggle' => false,
		'supports_latest_media' => false,
		'can_filter' => false,
		'supports_content_downloading' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'id' => 'Id',
        'can_search' => 'CanSearch',
        'media_types' => 'MediaTypes',
        'content_types' => 'ContentTypes',
        'max_page_size' => 'MaxPageSize',
        'auto_refresh_levels' => 'AutoRefreshLevels',
        'default_sort_fields' => 'DefaultSortFields',
        'supports_sort_order_toggle' => 'SupportsSortOrderToggle',
        'supports_latest_media' => 'SupportsLatestMedia',
        'can_filter' => 'CanFilter',
        'supports_content_downloading' => 'SupportsContentDownloading'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'id' => 'setId',
        'can_search' => 'setCanSearch',
        'media_types' => 'setMediaTypes',
        'content_types' => 'setContentTypes',
        'max_page_size' => 'setMaxPageSize',
        'auto_refresh_levels' => 'setAutoRefreshLevels',
        'default_sort_fields' => 'setDefaultSortFields',
        'supports_sort_order_toggle' => 'setSupportsSortOrderToggle',
        'supports_latest_media' => 'setSupportsLatestMedia',
        'can_filter' => 'setCanFilter',
        'supports_content_downloading' => 'setSupportsContentDownloading'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'id' => 'getId',
        'can_search' => 'getCanSearch',
        'media_types' => 'getMediaTypes',
        'content_types' => 'getContentTypes',
        'max_page_size' => 'getMaxPageSize',
        'auto_refresh_levels' => 'getAutoRefreshLevels',
        'default_sort_fields' => 'getDefaultSortFields',
        'supports_sort_order_toggle' => 'getSupportsSortOrderToggle',
        'supports_latest_media' => 'getSupportsLatestMedia',
        'can_filter' => 'getCanFilter',
        'supports_content_downloading' => 'getSupportsContentDownloading'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('can_search', $data ?? [], null);
        $this->setIfExists('media_types', $data ?? [], null);
        $this->setIfExists('content_types', $data ?? [], null);
        $this->setIfExists('max_page_size', $data ?? [], null);
        $this->setIfExists('auto_refresh_levels', $data ?? [], null);
        $this->setIfExists('default_sort_fields', $data ?? [], null);
        $this->setIfExists('supports_sort_order_toggle', $data ?? [], null);
        $this->setIfExists('supports_latest_media', $data ?? [], null);
        $this->setIfExists('can_filter', $data ?? [], null);
        $this->setIfExists('supports_content_downloading', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets can_search
     *
     * @return bool|null
     */
    public function getCanSearch()
    {
        return $this->container['can_search'];
    }

    /**
     * Sets can_search
     *
     * @param bool|null $can_search Gets or sets a value indicating whether this instance can search.
     *
     * @return self
     */
    public function setCanSearch($can_search)
    {
        if (is_null($can_search)) {
            throw new \InvalidArgumentException('non-nullable can_search cannot be null');
        }
        $this->container['can_search'] = $can_search;

        return $this;
    }

    /**
     * Gets media_types
     *
     * @return \OpenAPI\Client\Model\ChannelMediaType[]|null
     */
    public function getMediaTypes()
    {
        return $this->container['media_types'];
    }

    /**
     * Sets media_types
     *
     * @param \OpenAPI\Client\Model\ChannelMediaType[]|null $media_types Gets or sets the media types.
     *
     * @return self
     */
    public function setMediaTypes($media_types)
    {
        if (is_null($media_types)) {
            throw new \InvalidArgumentException('non-nullable media_types cannot be null');
        }
        $this->container['media_types'] = $media_types;

        return $this;
    }

    /**
     * Gets content_types
     *
     * @return \OpenAPI\Client\Model\ChannelMediaContentType[]|null
     */
    public function getContentTypes()
    {
        return $this->container['content_types'];
    }

    /**
     * Sets content_types
     *
     * @param \OpenAPI\Client\Model\ChannelMediaContentType[]|null $content_types Gets or sets the content types.
     *
     * @return self
     */
    public function setContentTypes($content_types)
    {
        if (is_null($content_types)) {
            throw new \InvalidArgumentException('non-nullable content_types cannot be null');
        }
        $this->container['content_types'] = $content_types;

        return $this;
    }

    /**
     * Gets max_page_size
     *
     * @return int|null
     */
    public function getMaxPageSize()
    {
        return $this->container['max_page_size'];
    }

    /**
     * Sets max_page_size
     *
     * @param int|null $max_page_size Gets or sets the maximum number of records the channel allows retrieving at a time.
     *
     * @return self
     */
    public function setMaxPageSize($max_page_size)
    {
        if (is_null($max_page_size)) {
            array_push($this->openAPINullablesSetToNull, 'max_page_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_page_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_page_size'] = $max_page_size;

        return $this;
    }

    /**
     * Gets auto_refresh_levels
     *
     * @return int|null
     */
    public function getAutoRefreshLevels()
    {
        return $this->container['auto_refresh_levels'];
    }

    /**
     * Sets auto_refresh_levels
     *
     * @param int|null $auto_refresh_levels Gets or sets the automatic refresh levels.
     *
     * @return self
     */
    public function setAutoRefreshLevels($auto_refresh_levels)
    {
        if (is_null($auto_refresh_levels)) {
            array_push($this->openAPINullablesSetToNull, 'auto_refresh_levels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_refresh_levels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_refresh_levels'] = $auto_refresh_levels;

        return $this;
    }

    /**
     * Gets default_sort_fields
     *
     * @return \OpenAPI\Client\Model\ChannelItemSortField[]|null
     */
    public function getDefaultSortFields()
    {
        return $this->container['default_sort_fields'];
    }

    /**
     * Sets default_sort_fields
     *
     * @param \OpenAPI\Client\Model\ChannelItemSortField[]|null $default_sort_fields Gets or sets the default sort orders.
     *
     * @return self
     */
    public function setDefaultSortFields($default_sort_fields)
    {
        if (is_null($default_sort_fields)) {
            throw new \InvalidArgumentException('non-nullable default_sort_fields cannot be null');
        }
        $this->container['default_sort_fields'] = $default_sort_fields;

        return $this;
    }

    /**
     * Gets supports_sort_order_toggle
     *
     * @return bool|null
     */
    public function getSupportsSortOrderToggle()
    {
        return $this->container['supports_sort_order_toggle'];
    }

    /**
     * Sets supports_sort_order_toggle
     *
     * @param bool|null $supports_sort_order_toggle Gets or sets a value indicating whether a sort ascending/descending toggle is supported.
     *
     * @return self
     */
    public function setSupportsSortOrderToggle($supports_sort_order_toggle)
    {
        if (is_null($supports_sort_order_toggle)) {
            throw new \InvalidArgumentException('non-nullable supports_sort_order_toggle cannot be null');
        }
        $this->container['supports_sort_order_toggle'] = $supports_sort_order_toggle;

        return $this;
    }

    /**
     * Gets supports_latest_media
     *
     * @return bool|null
     */
    public function getSupportsLatestMedia()
    {
        return $this->container['supports_latest_media'];
    }

    /**
     * Sets supports_latest_media
     *
     * @param bool|null $supports_latest_media Gets or sets a value indicating whether [supports latest media].
     *
     * @return self
     */
    public function setSupportsLatestMedia($supports_latest_media)
    {
        if (is_null($supports_latest_media)) {
            throw new \InvalidArgumentException('non-nullable supports_latest_media cannot be null');
        }
        $this->container['supports_latest_media'] = $supports_latest_media;

        return $this;
    }

    /**
     * Gets can_filter
     *
     * @return bool|null
     */
    public function getCanFilter()
    {
        return $this->container['can_filter'];
    }

    /**
     * Sets can_filter
     *
     * @param bool|null $can_filter Gets or sets a value indicating whether this instance can filter.
     *
     * @return self
     */
    public function setCanFilter($can_filter)
    {
        if (is_null($can_filter)) {
            throw new \InvalidArgumentException('non-nullable can_filter cannot be null');
        }
        $this->container['can_filter'] = $can_filter;

        return $this;
    }

    /**
     * Gets supports_content_downloading
     *
     * @return bool|null
     */
    public function getSupportsContentDownloading()
    {
        return $this->container['supports_content_downloading'];
    }

    /**
     * Sets supports_content_downloading
     *
     * @param bool|null $supports_content_downloading Gets or sets a value indicating whether [supports content downloading].
     *
     * @return self
     */
    public function setSupportsContentDownloading($supports_content_downloading)
    {
        if (is_null($supports_content_downloading)) {
            throw new \InvalidArgumentException('non-nullable supports_content_downloading cannot be null');
        }
        $this->container['supports_content_downloading'] = $supports_content_downloading;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


