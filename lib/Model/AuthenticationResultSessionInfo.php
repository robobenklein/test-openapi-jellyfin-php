<?php
/**
 * AuthenticationResultSessionInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuthenticationResultSessionInfo Class Doc Comment
 *
 * @category Class
 * @description Class SessionInfo.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuthenticationResultSessionInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthenticationResult_SessionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'play_state' => '\OpenAPI\Client\Model\PlayerStateInfo',
        'additional_users' => '\OpenAPI\Client\Model\SessionUserInfo[]',
        'capabilities' => '\OpenAPI\Client\Model\ClientCapabilities',
        'remote_end_point' => 'string',
        'playable_media_types' => 'string[]',
        'id' => 'string',
        'user_id' => 'string',
        'user_name' => 'string',
        'client' => 'string',
        'last_activity_date' => '\DateTime',
        'last_playback_check_in' => '\DateTime',
        'device_name' => 'string',
        'device_type' => 'string',
        'now_playing_item' => '\OpenAPI\Client\Model\SessionInfoNowPlayingItem',
        'full_now_playing_item' => '\OpenAPI\Client\Model\SessionInfoFullNowPlayingItem',
        'now_viewing_item' => '\OpenAPI\Client\Model\SessionInfoNowViewingItem',
        'device_id' => 'string',
        'application_version' => 'string',
        'transcoding_info' => '\OpenAPI\Client\Model\TranscodingInfo',
        'is_active' => 'bool',
        'supports_media_control' => 'bool',
        'supports_remote_control' => 'bool',
        'now_playing_queue' => '\OpenAPI\Client\Model\QueueItem[]',
        'now_playing_queue_full_items' => '\OpenAPI\Client\Model\BaseItemDto[]',
        'has_custom_device_name' => 'bool',
        'playlist_item_id' => 'string',
        'server_id' => 'string',
        'user_primary_image_tag' => 'string',
        'supported_commands' => '\OpenAPI\Client\Model\GeneralCommandType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'play_state' => null,
        'additional_users' => null,
        'capabilities' => null,
        'remote_end_point' => null,
        'playable_media_types' => null,
        'id' => null,
        'user_id' => 'uuid',
        'user_name' => null,
        'client' => null,
        'last_activity_date' => 'date-time',
        'last_playback_check_in' => 'date-time',
        'device_name' => null,
        'device_type' => null,
        'now_playing_item' => null,
        'full_now_playing_item' => null,
        'now_viewing_item' => null,
        'device_id' => null,
        'application_version' => null,
        'transcoding_info' => null,
        'is_active' => null,
        'supports_media_control' => null,
        'supports_remote_control' => null,
        'now_playing_queue' => null,
        'now_playing_queue_full_items' => null,
        'has_custom_device_name' => null,
        'playlist_item_id' => null,
        'server_id' => null,
        'user_primary_image_tag' => null,
        'supported_commands' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'play_state' => true,
		'additional_users' => true,
		'capabilities' => true,
		'remote_end_point' => true,
		'playable_media_types' => true,
		'id' => true,
		'user_id' => false,
		'user_name' => true,
		'client' => true,
		'last_activity_date' => false,
		'last_playback_check_in' => false,
		'device_name' => true,
		'device_type' => true,
		'now_playing_item' => true,
		'full_now_playing_item' => true,
		'now_viewing_item' => true,
		'device_id' => true,
		'application_version' => true,
		'transcoding_info' => true,
		'is_active' => false,
		'supports_media_control' => false,
		'supports_remote_control' => false,
		'now_playing_queue' => true,
		'now_playing_queue_full_items' => true,
		'has_custom_device_name' => false,
		'playlist_item_id' => true,
		'server_id' => true,
		'user_primary_image_tag' => true,
		'supported_commands' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'play_state' => 'PlayState',
        'additional_users' => 'AdditionalUsers',
        'capabilities' => 'Capabilities',
        'remote_end_point' => 'RemoteEndPoint',
        'playable_media_types' => 'PlayableMediaTypes',
        'id' => 'Id',
        'user_id' => 'UserId',
        'user_name' => 'UserName',
        'client' => 'Client',
        'last_activity_date' => 'LastActivityDate',
        'last_playback_check_in' => 'LastPlaybackCheckIn',
        'device_name' => 'DeviceName',
        'device_type' => 'DeviceType',
        'now_playing_item' => 'NowPlayingItem',
        'full_now_playing_item' => 'FullNowPlayingItem',
        'now_viewing_item' => 'NowViewingItem',
        'device_id' => 'DeviceId',
        'application_version' => 'ApplicationVersion',
        'transcoding_info' => 'TranscodingInfo',
        'is_active' => 'IsActive',
        'supports_media_control' => 'SupportsMediaControl',
        'supports_remote_control' => 'SupportsRemoteControl',
        'now_playing_queue' => 'NowPlayingQueue',
        'now_playing_queue_full_items' => 'NowPlayingQueueFullItems',
        'has_custom_device_name' => 'HasCustomDeviceName',
        'playlist_item_id' => 'PlaylistItemId',
        'server_id' => 'ServerId',
        'user_primary_image_tag' => 'UserPrimaryImageTag',
        'supported_commands' => 'SupportedCommands'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'play_state' => 'setPlayState',
        'additional_users' => 'setAdditionalUsers',
        'capabilities' => 'setCapabilities',
        'remote_end_point' => 'setRemoteEndPoint',
        'playable_media_types' => 'setPlayableMediaTypes',
        'id' => 'setId',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName',
        'client' => 'setClient',
        'last_activity_date' => 'setLastActivityDate',
        'last_playback_check_in' => 'setLastPlaybackCheckIn',
        'device_name' => 'setDeviceName',
        'device_type' => 'setDeviceType',
        'now_playing_item' => 'setNowPlayingItem',
        'full_now_playing_item' => 'setFullNowPlayingItem',
        'now_viewing_item' => 'setNowViewingItem',
        'device_id' => 'setDeviceId',
        'application_version' => 'setApplicationVersion',
        'transcoding_info' => 'setTranscodingInfo',
        'is_active' => 'setIsActive',
        'supports_media_control' => 'setSupportsMediaControl',
        'supports_remote_control' => 'setSupportsRemoteControl',
        'now_playing_queue' => 'setNowPlayingQueue',
        'now_playing_queue_full_items' => 'setNowPlayingQueueFullItems',
        'has_custom_device_name' => 'setHasCustomDeviceName',
        'playlist_item_id' => 'setPlaylistItemId',
        'server_id' => 'setServerId',
        'user_primary_image_tag' => 'setUserPrimaryImageTag',
        'supported_commands' => 'setSupportedCommands'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'play_state' => 'getPlayState',
        'additional_users' => 'getAdditionalUsers',
        'capabilities' => 'getCapabilities',
        'remote_end_point' => 'getRemoteEndPoint',
        'playable_media_types' => 'getPlayableMediaTypes',
        'id' => 'getId',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName',
        'client' => 'getClient',
        'last_activity_date' => 'getLastActivityDate',
        'last_playback_check_in' => 'getLastPlaybackCheckIn',
        'device_name' => 'getDeviceName',
        'device_type' => 'getDeviceType',
        'now_playing_item' => 'getNowPlayingItem',
        'full_now_playing_item' => 'getFullNowPlayingItem',
        'now_viewing_item' => 'getNowViewingItem',
        'device_id' => 'getDeviceId',
        'application_version' => 'getApplicationVersion',
        'transcoding_info' => 'getTranscodingInfo',
        'is_active' => 'getIsActive',
        'supports_media_control' => 'getSupportsMediaControl',
        'supports_remote_control' => 'getSupportsRemoteControl',
        'now_playing_queue' => 'getNowPlayingQueue',
        'now_playing_queue_full_items' => 'getNowPlayingQueueFullItems',
        'has_custom_device_name' => 'getHasCustomDeviceName',
        'playlist_item_id' => 'getPlaylistItemId',
        'server_id' => 'getServerId',
        'user_primary_image_tag' => 'getUserPrimaryImageTag',
        'supported_commands' => 'getSupportedCommands'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('play_state', $data ?? [], null);
        $this->setIfExists('additional_users', $data ?? [], null);
        $this->setIfExists('capabilities', $data ?? [], null);
        $this->setIfExists('remote_end_point', $data ?? [], null);
        $this->setIfExists('playable_media_types', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('last_activity_date', $data ?? [], null);
        $this->setIfExists('last_playback_check_in', $data ?? [], null);
        $this->setIfExists('device_name', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('now_playing_item', $data ?? [], null);
        $this->setIfExists('full_now_playing_item', $data ?? [], null);
        $this->setIfExists('now_viewing_item', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('application_version', $data ?? [], null);
        $this->setIfExists('transcoding_info', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('supports_media_control', $data ?? [], null);
        $this->setIfExists('supports_remote_control', $data ?? [], null);
        $this->setIfExists('now_playing_queue', $data ?? [], null);
        $this->setIfExists('now_playing_queue_full_items', $data ?? [], null);
        $this->setIfExists('has_custom_device_name', $data ?? [], null);
        $this->setIfExists('playlist_item_id', $data ?? [], null);
        $this->setIfExists('server_id', $data ?? [], null);
        $this->setIfExists('user_primary_image_tag', $data ?? [], null);
        $this->setIfExists('supported_commands', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets play_state
     *
     * @return \OpenAPI\Client\Model\PlayerStateInfo|null
     */
    public function getPlayState()
    {
        return $this->container['play_state'];
    }

    /**
     * Sets play_state
     *
     * @param \OpenAPI\Client\Model\PlayerStateInfo|null $play_state play_state
     *
     * @return self
     */
    public function setPlayState($play_state)
    {
        if (is_null($play_state)) {
            array_push($this->openAPINullablesSetToNull, 'play_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('play_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['play_state'] = $play_state;

        return $this;
    }

    /**
     * Gets additional_users
     *
     * @return \OpenAPI\Client\Model\SessionUserInfo[]|null
     */
    public function getAdditionalUsers()
    {
        return $this->container['additional_users'];
    }

    /**
     * Sets additional_users
     *
     * @param \OpenAPI\Client\Model\SessionUserInfo[]|null $additional_users additional_users
     *
     * @return self
     */
    public function setAdditionalUsers($additional_users)
    {
        if (is_null($additional_users)) {
            array_push($this->openAPINullablesSetToNull, 'additional_users');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_users', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_users'] = $additional_users;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return \OpenAPI\Client\Model\ClientCapabilities|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param \OpenAPI\Client\Model\ClientCapabilities|null $capabilities capabilities
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        if (is_null($capabilities)) {
            array_push($this->openAPINullablesSetToNull, 'capabilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capabilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets remote_end_point
     *
     * @return string|null
     */
    public function getRemoteEndPoint()
    {
        return $this->container['remote_end_point'];
    }

    /**
     * Sets remote_end_point
     *
     * @param string|null $remote_end_point Gets or sets the remote end point.
     *
     * @return self
     */
    public function setRemoteEndPoint($remote_end_point)
    {
        if (is_null($remote_end_point)) {
            array_push($this->openAPINullablesSetToNull, 'remote_end_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remote_end_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remote_end_point'] = $remote_end_point;

        return $this;
    }

    /**
     * Gets playable_media_types
     *
     * @return string[]|null
     */
    public function getPlayableMediaTypes()
    {
        return $this->container['playable_media_types'];
    }

    /**
     * Sets playable_media_types
     *
     * @param string[]|null $playable_media_types Gets the playable media types.
     *
     * @return self
     */
    public function setPlayableMediaTypes($playable_media_types)
    {
        if (is_null($playable_media_types)) {
            array_push($this->openAPINullablesSetToNull, 'playable_media_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playable_media_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playable_media_types'] = $playable_media_types;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id Gets or sets the user id.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name Gets or sets the username.
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            array_push($this->openAPINullablesSetToNull, 'user_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string|null $client Gets or sets the type of the client.
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            array_push($this->openAPINullablesSetToNull, 'client');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets last_activity_date
     *
     * @return \DateTime|null
     */
    public function getLastActivityDate()
    {
        return $this->container['last_activity_date'];
    }

    /**
     * Sets last_activity_date
     *
     * @param \DateTime|null $last_activity_date Gets or sets the last activity date.
     *
     * @return self
     */
    public function setLastActivityDate($last_activity_date)
    {
        if (is_null($last_activity_date)) {
            throw new \InvalidArgumentException('non-nullable last_activity_date cannot be null');
        }
        $this->container['last_activity_date'] = $last_activity_date;

        return $this;
    }

    /**
     * Gets last_playback_check_in
     *
     * @return \DateTime|null
     */
    public function getLastPlaybackCheckIn()
    {
        return $this->container['last_playback_check_in'];
    }

    /**
     * Sets last_playback_check_in
     *
     * @param \DateTime|null $last_playback_check_in Gets or sets the last playback check in.
     *
     * @return self
     */
    public function setLastPlaybackCheckIn($last_playback_check_in)
    {
        if (is_null($last_playback_check_in)) {
            throw new \InvalidArgumentException('non-nullable last_playback_check_in cannot be null');
        }
        $this->container['last_playback_check_in'] = $last_playback_check_in;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name Gets or sets the name of the device.
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        if (is_null($device_name)) {
            array_push($this->openAPINullablesSetToNull, 'device_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string|null $device_type Gets or sets the type of the device.
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            array_push($this->openAPINullablesSetToNull, 'device_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets now_playing_item
     *
     * @return \OpenAPI\Client\Model\SessionInfoNowPlayingItem|null
     */
    public function getNowPlayingItem()
    {
        return $this->container['now_playing_item'];
    }

    /**
     * Sets now_playing_item
     *
     * @param \OpenAPI\Client\Model\SessionInfoNowPlayingItem|null $now_playing_item now_playing_item
     *
     * @return self
     */
    public function setNowPlayingItem($now_playing_item)
    {
        if (is_null($now_playing_item)) {
            array_push($this->openAPINullablesSetToNull, 'now_playing_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('now_playing_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['now_playing_item'] = $now_playing_item;

        return $this;
    }

    /**
     * Gets full_now_playing_item
     *
     * @return \OpenAPI\Client\Model\SessionInfoFullNowPlayingItem|null
     */
    public function getFullNowPlayingItem()
    {
        return $this->container['full_now_playing_item'];
    }

    /**
     * Sets full_now_playing_item
     *
     * @param \OpenAPI\Client\Model\SessionInfoFullNowPlayingItem|null $full_now_playing_item full_now_playing_item
     *
     * @return self
     */
    public function setFullNowPlayingItem($full_now_playing_item)
    {
        if (is_null($full_now_playing_item)) {
            array_push($this->openAPINullablesSetToNull, 'full_now_playing_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_now_playing_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['full_now_playing_item'] = $full_now_playing_item;

        return $this;
    }

    /**
     * Gets now_viewing_item
     *
     * @return \OpenAPI\Client\Model\SessionInfoNowViewingItem|null
     */
    public function getNowViewingItem()
    {
        return $this->container['now_viewing_item'];
    }

    /**
     * Sets now_viewing_item
     *
     * @param \OpenAPI\Client\Model\SessionInfoNowViewingItem|null $now_viewing_item now_viewing_item
     *
     * @return self
     */
    public function setNowViewingItem($now_viewing_item)
    {
        if (is_null($now_viewing_item)) {
            array_push($this->openAPINullablesSetToNull, 'now_viewing_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('now_viewing_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['now_viewing_item'] = $now_viewing_item;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id Gets or sets the device id.
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            array_push($this->openAPINullablesSetToNull, 'device_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets application_version
     *
     * @return string|null
     */
    public function getApplicationVersion()
    {
        return $this->container['application_version'];
    }

    /**
     * Sets application_version
     *
     * @param string|null $application_version Gets or sets the application version.
     *
     * @return self
     */
    public function setApplicationVersion($application_version)
    {
        if (is_null($application_version)) {
            array_push($this->openAPINullablesSetToNull, 'application_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('application_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['application_version'] = $application_version;

        return $this;
    }

    /**
     * Gets transcoding_info
     *
     * @return \OpenAPI\Client\Model\TranscodingInfo|null
     */
    public function getTranscodingInfo()
    {
        return $this->container['transcoding_info'];
    }

    /**
     * Sets transcoding_info
     *
     * @param \OpenAPI\Client\Model\TranscodingInfo|null $transcoding_info transcoding_info
     *
     * @return self
     */
    public function setTranscodingInfo($transcoding_info)
    {
        if (is_null($transcoding_info)) {
            array_push($this->openAPINullablesSetToNull, 'transcoding_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcoding_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transcoding_info'] = $transcoding_info;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active Gets a value indicating whether this instance is active.
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets supports_media_control
     *
     * @return bool|null
     */
    public function getSupportsMediaControl()
    {
        return $this->container['supports_media_control'];
    }

    /**
     * Sets supports_media_control
     *
     * @param bool|null $supports_media_control supports_media_control
     *
     * @return self
     */
    public function setSupportsMediaControl($supports_media_control)
    {
        if (is_null($supports_media_control)) {
            throw new \InvalidArgumentException('non-nullable supports_media_control cannot be null');
        }
        $this->container['supports_media_control'] = $supports_media_control;

        return $this;
    }

    /**
     * Gets supports_remote_control
     *
     * @return bool|null
     */
    public function getSupportsRemoteControl()
    {
        return $this->container['supports_remote_control'];
    }

    /**
     * Sets supports_remote_control
     *
     * @param bool|null $supports_remote_control supports_remote_control
     *
     * @return self
     */
    public function setSupportsRemoteControl($supports_remote_control)
    {
        if (is_null($supports_remote_control)) {
            throw new \InvalidArgumentException('non-nullable supports_remote_control cannot be null');
        }
        $this->container['supports_remote_control'] = $supports_remote_control;

        return $this;
    }

    /**
     * Gets now_playing_queue
     *
     * @return \OpenAPI\Client\Model\QueueItem[]|null
     */
    public function getNowPlayingQueue()
    {
        return $this->container['now_playing_queue'];
    }

    /**
     * Sets now_playing_queue
     *
     * @param \OpenAPI\Client\Model\QueueItem[]|null $now_playing_queue now_playing_queue
     *
     * @return self
     */
    public function setNowPlayingQueue($now_playing_queue)
    {
        if (is_null($now_playing_queue)) {
            array_push($this->openAPINullablesSetToNull, 'now_playing_queue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('now_playing_queue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['now_playing_queue'] = $now_playing_queue;

        return $this;
    }

    /**
     * Gets now_playing_queue_full_items
     *
     * @return \OpenAPI\Client\Model\BaseItemDto[]|null
     */
    public function getNowPlayingQueueFullItems()
    {
        return $this->container['now_playing_queue_full_items'];
    }

    /**
     * Sets now_playing_queue_full_items
     *
     * @param \OpenAPI\Client\Model\BaseItemDto[]|null $now_playing_queue_full_items now_playing_queue_full_items
     *
     * @return self
     */
    public function setNowPlayingQueueFullItems($now_playing_queue_full_items)
    {
        if (is_null($now_playing_queue_full_items)) {
            array_push($this->openAPINullablesSetToNull, 'now_playing_queue_full_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('now_playing_queue_full_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['now_playing_queue_full_items'] = $now_playing_queue_full_items;

        return $this;
    }

    /**
     * Gets has_custom_device_name
     *
     * @return bool|null
     */
    public function getHasCustomDeviceName()
    {
        return $this->container['has_custom_device_name'];
    }

    /**
     * Sets has_custom_device_name
     *
     * @param bool|null $has_custom_device_name has_custom_device_name
     *
     * @return self
     */
    public function setHasCustomDeviceName($has_custom_device_name)
    {
        if (is_null($has_custom_device_name)) {
            throw new \InvalidArgumentException('non-nullable has_custom_device_name cannot be null');
        }
        $this->container['has_custom_device_name'] = $has_custom_device_name;

        return $this;
    }

    /**
     * Gets playlist_item_id
     *
     * @return string|null
     */
    public function getPlaylistItemId()
    {
        return $this->container['playlist_item_id'];
    }

    /**
     * Sets playlist_item_id
     *
     * @param string|null $playlist_item_id playlist_item_id
     *
     * @return self
     */
    public function setPlaylistItemId($playlist_item_id)
    {
        if (is_null($playlist_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'playlist_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist_item_id'] = $playlist_item_id;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        if (is_null($server_id)) {
            array_push($this->openAPINullablesSetToNull, 'server_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets user_primary_image_tag
     *
     * @return string|null
     */
    public function getUserPrimaryImageTag()
    {
        return $this->container['user_primary_image_tag'];
    }

    /**
     * Sets user_primary_image_tag
     *
     * @param string|null $user_primary_image_tag user_primary_image_tag
     *
     * @return self
     */
    public function setUserPrimaryImageTag($user_primary_image_tag)
    {
        if (is_null($user_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'user_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_primary_image_tag'] = $user_primary_image_tag;

        return $this;
    }

    /**
     * Gets supported_commands
     *
     * @return \OpenAPI\Client\Model\GeneralCommandType[]|null
     */
    public function getSupportedCommands()
    {
        return $this->container['supported_commands'];
    }

    /**
     * Sets supported_commands
     *
     * @param \OpenAPI\Client\Model\GeneralCommandType[]|null $supported_commands Gets the supported commands.
     *
     * @return self
     */
    public function setSupportedCommands($supported_commands)
    {
        if (is_null($supported_commands)) {
            array_push($this->openAPINullablesSetToNull, 'supported_commands');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supported_commands', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supported_commands'] = $supported_commands;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


