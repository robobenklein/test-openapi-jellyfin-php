<?php
/**
 * ListingsProviderInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListingsProviderInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListingsProviderInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListingsProviderInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'username' => 'string',
        'password' => 'string',
        'listings_id' => 'string',
        'zip_code' => 'string',
        'country' => 'string',
        'path' => 'string',
        'enabled_tuners' => 'string[]',
        'enable_all_tuners' => 'bool',
        'news_categories' => 'string[]',
        'sports_categories' => 'string[]',
        'kids_categories' => 'string[]',
        'movie_categories' => 'string[]',
        'channel_mappings' => '\OpenAPI\Client\Model\NameValuePair[]',
        'movie_prefix' => 'string',
        'preferred_language' => 'string',
        'user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'username' => null,
        'password' => null,
        'listings_id' => null,
        'zip_code' => null,
        'country' => null,
        'path' => null,
        'enabled_tuners' => null,
        'enable_all_tuners' => null,
        'news_categories' => null,
        'sports_categories' => null,
        'kids_categories' => null,
        'movie_categories' => null,
        'channel_mappings' => null,
        'movie_prefix' => null,
        'preferred_language' => null,
        'user_agent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'type' => true,
		'username' => true,
		'password' => true,
		'listings_id' => true,
		'zip_code' => true,
		'country' => true,
		'path' => true,
		'enabled_tuners' => true,
		'enable_all_tuners' => false,
		'news_categories' => true,
		'sports_categories' => true,
		'kids_categories' => true,
		'movie_categories' => true,
		'channel_mappings' => true,
		'movie_prefix' => true,
		'preferred_language' => true,
		'user_agent' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'type' => 'Type',
        'username' => 'Username',
        'password' => 'Password',
        'listings_id' => 'ListingsId',
        'zip_code' => 'ZipCode',
        'country' => 'Country',
        'path' => 'Path',
        'enabled_tuners' => 'EnabledTuners',
        'enable_all_tuners' => 'EnableAllTuners',
        'news_categories' => 'NewsCategories',
        'sports_categories' => 'SportsCategories',
        'kids_categories' => 'KidsCategories',
        'movie_categories' => 'MovieCategories',
        'channel_mappings' => 'ChannelMappings',
        'movie_prefix' => 'MoviePrefix',
        'preferred_language' => 'PreferredLanguage',
        'user_agent' => 'UserAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'listings_id' => 'setListingsId',
        'zip_code' => 'setZipCode',
        'country' => 'setCountry',
        'path' => 'setPath',
        'enabled_tuners' => 'setEnabledTuners',
        'enable_all_tuners' => 'setEnableAllTuners',
        'news_categories' => 'setNewsCategories',
        'sports_categories' => 'setSportsCategories',
        'kids_categories' => 'setKidsCategories',
        'movie_categories' => 'setMovieCategories',
        'channel_mappings' => 'setChannelMappings',
        'movie_prefix' => 'setMoviePrefix',
        'preferred_language' => 'setPreferredLanguage',
        'user_agent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'listings_id' => 'getListingsId',
        'zip_code' => 'getZipCode',
        'country' => 'getCountry',
        'path' => 'getPath',
        'enabled_tuners' => 'getEnabledTuners',
        'enable_all_tuners' => 'getEnableAllTuners',
        'news_categories' => 'getNewsCategories',
        'sports_categories' => 'getSportsCategories',
        'kids_categories' => 'getKidsCategories',
        'movie_categories' => 'getMovieCategories',
        'channel_mappings' => 'getChannelMappings',
        'movie_prefix' => 'getMoviePrefix',
        'preferred_language' => 'getPreferredLanguage',
        'user_agent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('listings_id', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('enabled_tuners', $data ?? [], null);
        $this->setIfExists('enable_all_tuners', $data ?? [], null);
        $this->setIfExists('news_categories', $data ?? [], null);
        $this->setIfExists('sports_categories', $data ?? [], null);
        $this->setIfExists('kids_categories', $data ?? [], null);
        $this->setIfExists('movie_categories', $data ?? [], null);
        $this->setIfExists('channel_mappings', $data ?? [], null);
        $this->setIfExists('movie_prefix', $data ?? [], null);
        $this->setIfExists('preferred_language', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets listings_id
     *
     * @return string|null
     */
    public function getListingsId()
    {
        return $this->container['listings_id'];
    }

    /**
     * Sets listings_id
     *
     * @param string|null $listings_id listings_id
     *
     * @return self
     */
    public function setListingsId($listings_id)
    {
        if (is_null($listings_id)) {
            array_push($this->openAPINullablesSetToNull, 'listings_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('listings_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['listings_id'] = $listings_id;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets enabled_tuners
     *
     * @return string[]|null
     */
    public function getEnabledTuners()
    {
        return $this->container['enabled_tuners'];
    }

    /**
     * Sets enabled_tuners
     *
     * @param string[]|null $enabled_tuners enabled_tuners
     *
     * @return self
     */
    public function setEnabledTuners($enabled_tuners)
    {
        if (is_null($enabled_tuners)) {
            array_push($this->openAPINullablesSetToNull, 'enabled_tuners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enabled_tuners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enabled_tuners'] = $enabled_tuners;

        return $this;
    }

    /**
     * Gets enable_all_tuners
     *
     * @return bool|null
     */
    public function getEnableAllTuners()
    {
        return $this->container['enable_all_tuners'];
    }

    /**
     * Sets enable_all_tuners
     *
     * @param bool|null $enable_all_tuners enable_all_tuners
     *
     * @return self
     */
    public function setEnableAllTuners($enable_all_tuners)
    {
        if (is_null($enable_all_tuners)) {
            throw new \InvalidArgumentException('non-nullable enable_all_tuners cannot be null');
        }
        $this->container['enable_all_tuners'] = $enable_all_tuners;

        return $this;
    }

    /**
     * Gets news_categories
     *
     * @return string[]|null
     */
    public function getNewsCategories()
    {
        return $this->container['news_categories'];
    }

    /**
     * Sets news_categories
     *
     * @param string[]|null $news_categories news_categories
     *
     * @return self
     */
    public function setNewsCategories($news_categories)
    {
        if (is_null($news_categories)) {
            array_push($this->openAPINullablesSetToNull, 'news_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('news_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['news_categories'] = $news_categories;

        return $this;
    }

    /**
     * Gets sports_categories
     *
     * @return string[]|null
     */
    public function getSportsCategories()
    {
        return $this->container['sports_categories'];
    }

    /**
     * Sets sports_categories
     *
     * @param string[]|null $sports_categories sports_categories
     *
     * @return self
     */
    public function setSportsCategories($sports_categories)
    {
        if (is_null($sports_categories)) {
            array_push($this->openAPINullablesSetToNull, 'sports_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sports_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sports_categories'] = $sports_categories;

        return $this;
    }

    /**
     * Gets kids_categories
     *
     * @return string[]|null
     */
    public function getKidsCategories()
    {
        return $this->container['kids_categories'];
    }

    /**
     * Sets kids_categories
     *
     * @param string[]|null $kids_categories kids_categories
     *
     * @return self
     */
    public function setKidsCategories($kids_categories)
    {
        if (is_null($kids_categories)) {
            array_push($this->openAPINullablesSetToNull, 'kids_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kids_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kids_categories'] = $kids_categories;

        return $this;
    }

    /**
     * Gets movie_categories
     *
     * @return string[]|null
     */
    public function getMovieCategories()
    {
        return $this->container['movie_categories'];
    }

    /**
     * Sets movie_categories
     *
     * @param string[]|null $movie_categories movie_categories
     *
     * @return self
     */
    public function setMovieCategories($movie_categories)
    {
        if (is_null($movie_categories)) {
            array_push($this->openAPINullablesSetToNull, 'movie_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movie_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movie_categories'] = $movie_categories;

        return $this;
    }

    /**
     * Gets channel_mappings
     *
     * @return \OpenAPI\Client\Model\NameValuePair[]|null
     */
    public function getChannelMappings()
    {
        return $this->container['channel_mappings'];
    }

    /**
     * Sets channel_mappings
     *
     * @param \OpenAPI\Client\Model\NameValuePair[]|null $channel_mappings channel_mappings
     *
     * @return self
     */
    public function setChannelMappings($channel_mappings)
    {
        if (is_null($channel_mappings)) {
            array_push($this->openAPINullablesSetToNull, 'channel_mappings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_mappings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_mappings'] = $channel_mappings;

        return $this;
    }

    /**
     * Gets movie_prefix
     *
     * @return string|null
     */
    public function getMoviePrefix()
    {
        return $this->container['movie_prefix'];
    }

    /**
     * Sets movie_prefix
     *
     * @param string|null $movie_prefix movie_prefix
     *
     * @return self
     */
    public function setMoviePrefix($movie_prefix)
    {
        if (is_null($movie_prefix)) {
            array_push($this->openAPINullablesSetToNull, 'movie_prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movie_prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movie_prefix'] = $movie_prefix;

        return $this;
    }

    /**
     * Gets preferred_language
     *
     * @return string|null
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferred_language'];
    }

    /**
     * Sets preferred_language
     *
     * @param string|null $preferred_language preferred_language
     *
     * @return self
     */
    public function setPreferredLanguage($preferred_language)
    {
        if (is_null($preferred_language)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_language'] = $preferred_language;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            array_push($this->openAPINullablesSetToNull, 'user_agent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_agent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


