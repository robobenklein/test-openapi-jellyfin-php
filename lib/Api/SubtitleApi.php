<?php
/**
 * SubtitleApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SubtitleApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubtitleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteSubtitle' => [
            'application/json',
        ],
        'downloadRemoteSubtitles' => [
            'application/json',
        ],
        'getFallbackFont' => [
            'application/json',
        ],
        'getFallbackFontList' => [
            'application/json',
        ],
        'getRemoteSubtitles' => [
            'application/json',
        ],
        'getSubtitle' => [
            'application/json',
        ],
        'getSubtitlePlaylist' => [
            'application/json',
        ],
        'getSubtitleWithTicks' => [
            'application/json',
        ],
        'searchRemoteSubtitles' => [
            'application/json',
        ],
        'uploadSubtitle' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteSubtitle
     *
     * Deletes an external subtitle file.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The index of the subtitle file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubtitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubtitle($item_id, $index, string $contentType = self::contentTypes['deleteSubtitle'][0])
    {
        $this->deleteSubtitleWithHttpInfo($item_id, $index, $contentType);
    }

    /**
     * Operation deleteSubtitleWithHttpInfo
     *
     * Deletes an external subtitle file.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The index of the subtitle file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubtitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubtitleWithHttpInfo($item_id, $index, string $contentType = self::contentTypes['deleteSubtitle'][0])
    {
        $request = $this->deleteSubtitleRequest($item_id, $index, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubtitleAsync
     *
     * Deletes an external subtitle file.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The index of the subtitle file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubtitleAsync($item_id, $index, string $contentType = self::contentTypes['deleteSubtitle'][0])
    {
        return $this->deleteSubtitleAsyncWithHttpInfo($item_id, $index, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubtitleAsyncWithHttpInfo
     *
     * Deletes an external subtitle file.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The index of the subtitle file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubtitleAsyncWithHttpInfo($item_id, $index, string $contentType = self::contentTypes['deleteSubtitle'][0])
    {
        $returnType = '';
        $request = $this->deleteSubtitleRequest($item_id, $index, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubtitle'
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The index of the subtitle file. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSubtitleRequest($item_id, $index, string $contentType = self::contentTypes['deleteSubtitle'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling deleteSubtitle'
            );
        }

        // verify the required parameter 'index' is set
        if ($index === null || (is_array($index) && count($index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling deleteSubtitle'
            );
        }


        $resourcePath = '/Videos/{itemId}/Subtitles/{index}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadRemoteSubtitles
     *
     * Downloads a remote subtitle.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $subtitle_id The subtitle id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadRemoteSubtitles($item_id, $subtitle_id, string $contentType = self::contentTypes['downloadRemoteSubtitles'][0])
    {
        $this->downloadRemoteSubtitlesWithHttpInfo($item_id, $subtitle_id, $contentType);
    }

    /**
     * Operation downloadRemoteSubtitlesWithHttpInfo
     *
     * Downloads a remote subtitle.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $subtitle_id The subtitle id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadRemoteSubtitlesWithHttpInfo($item_id, $subtitle_id, string $contentType = self::contentTypes['downloadRemoteSubtitles'][0])
    {
        $request = $this->downloadRemoteSubtitlesRequest($item_id, $subtitle_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation downloadRemoteSubtitlesAsync
     *
     * Downloads a remote subtitle.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $subtitle_id The subtitle id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadRemoteSubtitlesAsync($item_id, $subtitle_id, string $contentType = self::contentTypes['downloadRemoteSubtitles'][0])
    {
        return $this->downloadRemoteSubtitlesAsyncWithHttpInfo($item_id, $subtitle_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadRemoteSubtitlesAsyncWithHttpInfo
     *
     * Downloads a remote subtitle.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $subtitle_id The subtitle id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadRemoteSubtitlesAsyncWithHttpInfo($item_id, $subtitle_id, string $contentType = self::contentTypes['downloadRemoteSubtitles'][0])
    {
        $returnType = '';
        $request = $this->downloadRemoteSubtitlesRequest($item_id, $subtitle_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadRemoteSubtitles'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $subtitle_id The subtitle id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadRemoteSubtitlesRequest($item_id, $subtitle_id, string $contentType = self::contentTypes['downloadRemoteSubtitles'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling downloadRemoteSubtitles'
            );
        }

        // verify the required parameter 'subtitle_id' is set
        if ($subtitle_id === null || (is_array($subtitle_id) && count($subtitle_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subtitle_id when calling downloadRemoteSubtitles'
            );
        }


        $resourcePath = '/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($subtitle_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subtitleId' . '}',
                ObjectSerializer::toPathValue($subtitle_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFallbackFont
     *
     * Gets a fallback font file.
     *
     * @param  string $name The name of the fallback font file to get. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFont'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getFallbackFont($name, string $contentType = self::contentTypes['getFallbackFont'][0])
    {
        list($response) = $this->getFallbackFontWithHttpInfo($name, $contentType);
        return $response;
    }

    /**
     * Operation getFallbackFontWithHttpInfo
     *
     * Gets a fallback font file.
     *
     * @param  string $name The name of the fallback font file to get. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFont'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFallbackFontWithHttpInfo($name, string $contentType = self::contentTypes['getFallbackFont'][0])
    {
        $request = $this->getFallbackFontRequest($name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFallbackFontAsync
     *
     * Gets a fallback font file.
     *
     * @param  string $name The name of the fallback font file to get. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFont'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFallbackFontAsync($name, string $contentType = self::contentTypes['getFallbackFont'][0])
    {
        return $this->getFallbackFontAsyncWithHttpInfo($name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFallbackFontAsyncWithHttpInfo
     *
     * Gets a fallback font file.
     *
     * @param  string $name The name of the fallback font file to get. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFont'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFallbackFontAsyncWithHttpInfo($name, string $contentType = self::contentTypes['getFallbackFont'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getFallbackFontRequest($name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFallbackFont'
     *
     * @param  string $name The name of the fallback font file to get. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFont'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFallbackFontRequest($name, string $contentType = self::contentTypes['getFallbackFont'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getFallbackFont'
            );
        }


        $resourcePath = '/FallbackFont/Fonts/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['font/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFallbackFontList
     *
     * Gets a list of available fallback font files.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFontList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FontFile[]
     */
    public function getFallbackFontList(string $contentType = self::contentTypes['getFallbackFontList'][0])
    {
        list($response) = $this->getFallbackFontListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFallbackFontListWithHttpInfo
     *
     * Gets a list of available fallback font files.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFontList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FontFile[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFallbackFontListWithHttpInfo(string $contentType = self::contentTypes['getFallbackFontList'][0])
    {
        $request = $this->getFallbackFontListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FontFile[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FontFile[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FontFile[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FontFile[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FontFile[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFallbackFontListAsync
     *
     * Gets a list of available fallback font files.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFontList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFallbackFontListAsync(string $contentType = self::contentTypes['getFallbackFontList'][0])
    {
        return $this->getFallbackFontListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFallbackFontListAsyncWithHttpInfo
     *
     * Gets a list of available fallback font files.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFontList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFallbackFontListAsyncWithHttpInfo(string $contentType = self::contentTypes['getFallbackFontList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FontFile[]';
        $request = $this->getFallbackFontListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFallbackFontList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFallbackFontList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFallbackFontListRequest(string $contentType = self::contentTypes['getFallbackFontList'][0])
    {


        $resourcePath = '/FallbackFont/Fonts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRemoteSubtitles
     *
     * Gets the remote subtitles.
     *
     * @param  string $id The item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getRemoteSubtitles($id, string $contentType = self::contentTypes['getRemoteSubtitles'][0])
    {
        list($response) = $this->getRemoteSubtitlesWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRemoteSubtitlesWithHttpInfo
     *
     * Gets the remote subtitles.
     *
     * @param  string $id The item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRemoteSubtitlesWithHttpInfo($id, string $contentType = self::contentTypes['getRemoteSubtitles'][0])
    {
        $request = $this->getRemoteSubtitlesRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRemoteSubtitlesAsync
     *
     * Gets the remote subtitles.
     *
     * @param  string $id The item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRemoteSubtitlesAsync($id, string $contentType = self::contentTypes['getRemoteSubtitles'][0])
    {
        return $this->getRemoteSubtitlesAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRemoteSubtitlesAsyncWithHttpInfo
     *
     * Gets the remote subtitles.
     *
     * @param  string $id The item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRemoteSubtitlesAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRemoteSubtitles'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getRemoteSubtitlesRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRemoteSubtitles'
     *
     * @param  string $id The item id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRemoteSubtitlesRequest($id, string $contentType = self::contentTypes['getRemoteSubtitles'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRemoteSubtitles'
            );
        }


        $resourcePath = '/Providers/Subtitles/Subtitles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubtitle
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getSubtitle($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id = null, $media_source_id = null, $index = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, $start_position_ticks = 0, string $contentType = self::contentTypes['getSubtitle'][0])
    {
        list($response) = $this->getSubtitleWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id, $media_source_id, $index, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $start_position_ticks, $contentType);
        return $response;
    }

    /**
     * Operation getSubtitleWithHttpInfo
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubtitleWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id = null, $media_source_id = null, $index = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, $start_position_ticks = 0, string $contentType = self::contentTypes['getSubtitle'][0])
    {
        $request = $this->getSubtitleRequest($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id, $media_source_id, $index, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $start_position_ticks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubtitleAsync
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubtitleAsync($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id = null, $media_source_id = null, $index = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, $start_position_ticks = 0, string $contentType = self::contentTypes['getSubtitle'][0])
    {
        return $this->getSubtitleAsyncWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id, $media_source_id, $index, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $start_position_ticks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubtitleAsyncWithHttpInfo
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubtitleAsyncWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id = null, $media_source_id = null, $index = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, $start_position_ticks = 0, string $contentType = self::contentTypes['getSubtitle'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getSubtitleRequest($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id, $media_source_id, $index, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $start_position_ticks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubtitle'
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubtitleRequest($route_item_id, $route_media_source_id, $route_index, $route_format, $item_id = null, $media_source_id = null, $index = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, $start_position_ticks = 0, string $contentType = self::contentTypes['getSubtitle'][0])
    {

        // verify the required parameter 'route_item_id' is set
        if ($route_item_id === null || (is_array($route_item_id) && count($route_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_item_id when calling getSubtitle'
            );
        }

        // verify the required parameter 'route_media_source_id' is set
        if ($route_media_source_id === null || (is_array($route_media_source_id) && count($route_media_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_media_source_id when calling getSubtitle'
            );
        }

        // verify the required parameter 'route_index' is set
        if ($route_index === null || (is_array($route_index) && count($route_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_index when calling getSubtitle'
            );
        }

        // verify the required parameter 'route_format' is set
        if ($route_format === null || (is_array($route_format) && count($route_format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_format when calling getSubtitle'
            );
        }










        $resourcePath = '/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_position_ticks,
            'endPositionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $copy_timestamps,
            'copyTimestamps', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $add_vtt_time_map,
            'addVttTimeMap', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_position_ticks,
            'startPositionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($route_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeItemId' . '}',
                ObjectSerializer::toPathValue($route_item_id),
                $resourcePath
            );
        }
        // path params
        if ($route_media_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeMediaSourceId' . '}',
                ObjectSerializer::toPathValue($route_media_source_id),
                $resourcePath
            );
        }
        // path params
        if ($route_index !== null) {
            $resourcePath = str_replace(
                '{' . 'routeIndex' . '}',
                ObjectSerializer::toPathValue($route_index),
                $resourcePath
            );
        }
        // path params
        if ($route_format !== null) {
            $resourcePath = str_replace(
                '{' . 'routeFormat' . '}',
                ObjectSerializer::toPathValue($route_format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubtitlePlaylist
     *
     * Gets an HLS subtitle playlist.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The subtitle stream index. (required)
     * @param  string $media_source_id The media source id. (required)
     * @param  int $segment_length The subtitle segment length. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitlePlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getSubtitlePlaylist($item_id, $index, $media_source_id, $segment_length, string $contentType = self::contentTypes['getSubtitlePlaylist'][0])
    {
        list($response) = $this->getSubtitlePlaylistWithHttpInfo($item_id, $index, $media_source_id, $segment_length, $contentType);
        return $response;
    }

    /**
     * Operation getSubtitlePlaylistWithHttpInfo
     *
     * Gets an HLS subtitle playlist.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The subtitle stream index. (required)
     * @param  string $media_source_id The media source id. (required)
     * @param  int $segment_length The subtitle segment length. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitlePlaylist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubtitlePlaylistWithHttpInfo($item_id, $index, $media_source_id, $segment_length, string $contentType = self::contentTypes['getSubtitlePlaylist'][0])
    {
        $request = $this->getSubtitlePlaylistRequest($item_id, $index, $media_source_id, $segment_length, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubtitlePlaylistAsync
     *
     * Gets an HLS subtitle playlist.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The subtitle stream index. (required)
     * @param  string $media_source_id The media source id. (required)
     * @param  int $segment_length The subtitle segment length. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitlePlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubtitlePlaylistAsync($item_id, $index, $media_source_id, $segment_length, string $contentType = self::contentTypes['getSubtitlePlaylist'][0])
    {
        return $this->getSubtitlePlaylistAsyncWithHttpInfo($item_id, $index, $media_source_id, $segment_length, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubtitlePlaylistAsyncWithHttpInfo
     *
     * Gets an HLS subtitle playlist.
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The subtitle stream index. (required)
     * @param  string $media_source_id The media source id. (required)
     * @param  int $segment_length The subtitle segment length. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitlePlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubtitlePlaylistAsyncWithHttpInfo($item_id, $index, $media_source_id, $segment_length, string $contentType = self::contentTypes['getSubtitlePlaylist'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getSubtitlePlaylistRequest($item_id, $index, $media_source_id, $segment_length, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubtitlePlaylist'
     *
     * @param  string $item_id The item id. (required)
     * @param  int $index The subtitle stream index. (required)
     * @param  string $media_source_id The media source id. (required)
     * @param  int $segment_length The subtitle segment length. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitlePlaylist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubtitlePlaylistRequest($item_id, $index, $media_source_id, $segment_length, string $contentType = self::contentTypes['getSubtitlePlaylist'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getSubtitlePlaylist'
            );
        }

        // verify the required parameter 'index' is set
        if ($index === null || (is_array($index) && count($index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index when calling getSubtitlePlaylist'
            );
        }

        // verify the required parameter 'media_source_id' is set
        if ($media_source_id === null || (is_array($media_source_id) && count($media_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_source_id when calling getSubtitlePlaylist'
            );
        }

        // verify the required parameter 'segment_length' is set
        if ($segment_length === null || (is_array($segment_length) && count($segment_length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment_length when calling getSubtitlePlaylist'
            );
        }


        $resourcePath = '/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $segment_length,
            'segmentLength', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                '{' . 'index' . '}',
                ObjectSerializer::toPathValue($index),
                $resourcePath
            );
        }
        // path params
        if ($media_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mediaSourceId' . '}',
                ObjectSerializer::toPathValue($media_source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/x-mpegURL', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubtitleWithTicks
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  int $route_start_position_ticks The (route) start position of the subtitle in ticks. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitleWithTicks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getSubtitleWithTicks($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id = null, $media_source_id = null, $index = null, $start_position_ticks = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, string $contentType = self::contentTypes['getSubtitleWithTicks'][0])
    {
        list($response) = $this->getSubtitleWithTicksWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id, $media_source_id, $index, $start_position_ticks, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $contentType);
        return $response;
    }

    /**
     * Operation getSubtitleWithTicksWithHttpInfo
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  int $route_start_position_ticks The (route) start position of the subtitle in ticks. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitleWithTicks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubtitleWithTicksWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id = null, $media_source_id = null, $index = null, $start_position_ticks = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, string $contentType = self::contentTypes['getSubtitleWithTicks'][0])
    {
        $request = $this->getSubtitleWithTicksRequest($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id, $media_source_id, $index, $start_position_ticks, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubtitleWithTicksAsync
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  int $route_start_position_ticks The (route) start position of the subtitle in ticks. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitleWithTicks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubtitleWithTicksAsync($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id = null, $media_source_id = null, $index = null, $start_position_ticks = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, string $contentType = self::contentTypes['getSubtitleWithTicks'][0])
    {
        return $this->getSubtitleWithTicksAsyncWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id, $media_source_id, $index, $start_position_ticks, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubtitleWithTicksAsyncWithHttpInfo
     *
     * Gets subtitles in a specified format.
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  int $route_start_position_ticks The (route) start position of the subtitle in ticks. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitleWithTicks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubtitleWithTicksAsyncWithHttpInfo($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id = null, $media_source_id = null, $index = null, $start_position_ticks = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, string $contentType = self::contentTypes['getSubtitleWithTicks'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getSubtitleWithTicksRequest($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id, $media_source_id, $index, $start_position_ticks, $format, $end_position_ticks, $copy_timestamps, $add_vtt_time_map, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubtitleWithTicks'
     *
     * @param  string $route_item_id The (route) item id. (required)
     * @param  string $route_media_source_id The (route) media source id. (required)
     * @param  int $route_index The (route) subtitle stream index. (required)
     * @param  int $route_start_position_ticks The (route) start position of the subtitle in ticks. (required)
     * @param  string $route_format The (route) format of the returned subtitle. (required)
     * @param  string $item_id The item id. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  int $index The subtitle stream index. (optional) (deprecated)
     * @param  int $start_position_ticks The start position of the subtitle in ticks. (optional) (deprecated)
     * @param  string $format The format of the returned subtitle. (optional) (deprecated)
     * @param  int $end_position_ticks Optional. The end position of the subtitle in ticks. (optional)
     * @param  bool $copy_timestamps Optional. Whether to copy the timestamps. (optional, default to false)
     * @param  bool $add_vtt_time_map Optional. Whether to add a VTT time map. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubtitleWithTicks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubtitleWithTicksRequest($route_item_id, $route_media_source_id, $route_index, $route_start_position_ticks, $route_format, $item_id = null, $media_source_id = null, $index = null, $start_position_ticks = null, $format = null, $end_position_ticks = null, $copy_timestamps = false, $add_vtt_time_map = false, string $contentType = self::contentTypes['getSubtitleWithTicks'][0])
    {

        // verify the required parameter 'route_item_id' is set
        if ($route_item_id === null || (is_array($route_item_id) && count($route_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_item_id when calling getSubtitleWithTicks'
            );
        }

        // verify the required parameter 'route_media_source_id' is set
        if ($route_media_source_id === null || (is_array($route_media_source_id) && count($route_media_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_media_source_id when calling getSubtitleWithTicks'
            );
        }

        // verify the required parameter 'route_index' is set
        if ($route_index === null || (is_array($route_index) && count($route_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_index when calling getSubtitleWithTicks'
            );
        }

        // verify the required parameter 'route_start_position_ticks' is set
        if ($route_start_position_ticks === null || (is_array($route_start_position_ticks) && count($route_start_position_ticks) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_start_position_ticks when calling getSubtitleWithTicks'
            );
        }

        // verify the required parameter 'route_format' is set
        if ($route_format === null || (is_array($route_format) && count($route_format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_format when calling getSubtitleWithTicks'
            );
        }










        $resourcePath = '/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_position_ticks,
            'startPositionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_position_ticks,
            'endPositionTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $copy_timestamps,
            'copyTimestamps', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $add_vtt_time_map,
            'addVttTimeMap', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($route_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeItemId' . '}',
                ObjectSerializer::toPathValue($route_item_id),
                $resourcePath
            );
        }
        // path params
        if ($route_media_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeMediaSourceId' . '}',
                ObjectSerializer::toPathValue($route_media_source_id),
                $resourcePath
            );
        }
        // path params
        if ($route_index !== null) {
            $resourcePath = str_replace(
                '{' . 'routeIndex' . '}',
                ObjectSerializer::toPathValue($route_index),
                $resourcePath
            );
        }
        // path params
        if ($route_start_position_ticks !== null) {
            $resourcePath = str_replace(
                '{' . 'routeStartPositionTicks' . '}',
                ObjectSerializer::toPathValue($route_start_position_ticks),
                $resourcePath
            );
        }
        // path params
        if ($route_format !== null) {
            $resourcePath = str_replace(
                '{' . 'routeFormat' . '}',
                ObjectSerializer::toPathValue($route_format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchRemoteSubtitles
     *
     * Search remote subtitles.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $language The language of the subtitles. (required)
     * @param  bool $is_perfect_match Optional. Only show subtitles which are a perfect match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteSubtitleInfo[]
     */
    public function searchRemoteSubtitles($item_id, $language, $is_perfect_match = null, string $contentType = self::contentTypes['searchRemoteSubtitles'][0])
    {
        list($response) = $this->searchRemoteSubtitlesWithHttpInfo($item_id, $language, $is_perfect_match, $contentType);
        return $response;
    }

    /**
     * Operation searchRemoteSubtitlesWithHttpInfo
     *
     * Search remote subtitles.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $language The language of the subtitles. (required)
     * @param  bool $is_perfect_match Optional. Only show subtitles which are a perfect match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteSubtitleInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchRemoteSubtitlesWithHttpInfo($item_id, $language, $is_perfect_match = null, string $contentType = self::contentTypes['searchRemoteSubtitles'][0])
    {
        $request = $this->searchRemoteSubtitlesRequest($item_id, $language, $is_perfect_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteSubtitleInfo[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteSubtitleInfo[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteSubtitleInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteSubtitleInfo[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteSubtitleInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchRemoteSubtitlesAsync
     *
     * Search remote subtitles.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $language The language of the subtitles. (required)
     * @param  bool $is_perfect_match Optional. Only show subtitles which are a perfect match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchRemoteSubtitlesAsync($item_id, $language, $is_perfect_match = null, string $contentType = self::contentTypes['searchRemoteSubtitles'][0])
    {
        return $this->searchRemoteSubtitlesAsyncWithHttpInfo($item_id, $language, $is_perfect_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchRemoteSubtitlesAsyncWithHttpInfo
     *
     * Search remote subtitles.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $language The language of the subtitles. (required)
     * @param  bool $is_perfect_match Optional. Only show subtitles which are a perfect match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchRemoteSubtitlesAsyncWithHttpInfo($item_id, $language, $is_perfect_match = null, string $contentType = self::contentTypes['searchRemoteSubtitles'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteSubtitleInfo[]';
        $request = $this->searchRemoteSubtitlesRequest($item_id, $language, $is_perfect_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchRemoteSubtitles'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $language The language of the subtitles. (required)
     * @param  bool $is_perfect_match Optional. Only show subtitles which are a perfect match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRemoteSubtitles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchRemoteSubtitlesRequest($item_id, $language, $is_perfect_match = null, string $contentType = self::contentTypes['searchRemoteSubtitles'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling searchRemoteSubtitles'
            );
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling searchRemoteSubtitles'
            );
        }



        $resourcePath = '/Items/{itemId}/RemoteSearch/Subtitles/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_perfect_match,
            'isPerfectMatch', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadSubtitle
     *
     * Upload an external subtitle file.
     *
     * @param  string $item_id The item the subtitle belongs to. (required)
     * @param  \OpenAPI\Client\Model\UploadSubtitleRequest $upload_subtitle_request The request body. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadSubtitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadSubtitle($item_id, $upload_subtitle_request, string $contentType = self::contentTypes['uploadSubtitle'][0])
    {
        $this->uploadSubtitleWithHttpInfo($item_id, $upload_subtitle_request, $contentType);
    }

    /**
     * Operation uploadSubtitleWithHttpInfo
     *
     * Upload an external subtitle file.
     *
     * @param  string $item_id The item the subtitle belongs to. (required)
     * @param  \OpenAPI\Client\Model\UploadSubtitleRequest $upload_subtitle_request The request body. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadSubtitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadSubtitleWithHttpInfo($item_id, $upload_subtitle_request, string $contentType = self::contentTypes['uploadSubtitle'][0])
    {
        $request = $this->uploadSubtitleRequest($item_id, $upload_subtitle_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation uploadSubtitleAsync
     *
     * Upload an external subtitle file.
     *
     * @param  string $item_id The item the subtitle belongs to. (required)
     * @param  \OpenAPI\Client\Model\UploadSubtitleRequest $upload_subtitle_request The request body. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadSubtitleAsync($item_id, $upload_subtitle_request, string $contentType = self::contentTypes['uploadSubtitle'][0])
    {
        return $this->uploadSubtitleAsyncWithHttpInfo($item_id, $upload_subtitle_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadSubtitleAsyncWithHttpInfo
     *
     * Upload an external subtitle file.
     *
     * @param  string $item_id The item the subtitle belongs to. (required)
     * @param  \OpenAPI\Client\Model\UploadSubtitleRequest $upload_subtitle_request The request body. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadSubtitleAsyncWithHttpInfo($item_id, $upload_subtitle_request, string $contentType = self::contentTypes['uploadSubtitle'][0])
    {
        $returnType = '';
        $request = $this->uploadSubtitleRequest($item_id, $upload_subtitle_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadSubtitle'
     *
     * @param  string $item_id The item the subtitle belongs to. (required)
     * @param  \OpenAPI\Client\Model\UploadSubtitleRequest $upload_subtitle_request The request body. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadSubtitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadSubtitleRequest($item_id, $upload_subtitle_request, string $contentType = self::contentTypes['uploadSubtitle'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling uploadSubtitle'
            );
        }

        // verify the required parameter 'upload_subtitle_request' is set
        if ($upload_subtitle_request === null || (is_array($upload_subtitle_request) && count($upload_subtitle_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upload_subtitle_request when calling uploadSubtitle'
            );
        }


        $resourcePath = '/Videos/{itemId}/Subtitles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upload_subtitle_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upload_subtitle_request));
            } else {
                $httpBody = $upload_subtitle_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
