<?php
/**
 * MediaInfoApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MediaInfoApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MediaInfoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'closeLiveStream' => [
            'application/json',
        ],
        'getBitrateTestBytes' => [
            'application/json',
        ],
        'getPlaybackInfo' => [
            'application/json',
        ],
        'getPostedPlaybackInfo' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'openLiveStream' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation closeLiveStream
     *
     * Closes a media source.
     *
     * @param  string $live_stream_id The livestream id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeLiveStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function closeLiveStream($live_stream_id, string $contentType = self::contentTypes['closeLiveStream'][0])
    {
        $this->closeLiveStreamWithHttpInfo($live_stream_id, $contentType);
    }

    /**
     * Operation closeLiveStreamWithHttpInfo
     *
     * Closes a media source.
     *
     * @param  string $live_stream_id The livestream id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeLiveStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeLiveStreamWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['closeLiveStream'][0])
    {
        $request = $this->closeLiveStreamRequest($live_stream_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation closeLiveStreamAsync
     *
     * Closes a media source.
     *
     * @param  string $live_stream_id The livestream id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeLiveStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeLiveStreamAsync($live_stream_id, string $contentType = self::contentTypes['closeLiveStream'][0])
    {
        return $this->closeLiveStreamAsyncWithHttpInfo($live_stream_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation closeLiveStreamAsyncWithHttpInfo
     *
     * Closes a media source.
     *
     * @param  string $live_stream_id The livestream id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeLiveStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeLiveStreamAsyncWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['closeLiveStream'][0])
    {
        $returnType = '';
        $request = $this->closeLiveStreamRequest($live_stream_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'closeLiveStream'
     *
     * @param  string $live_stream_id The livestream id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeLiveStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function closeLiveStreamRequest($live_stream_id, string $contentType = self::contentTypes['closeLiveStream'][0])
    {

        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling closeLiveStream'
            );
        }


        $resourcePath = '/LiveStreams/Close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $live_stream_id,
            'liveStreamId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBitrateTestBytes
     *
     * Tests the network with a request with the size of the bitrate.
     *
     * @param  int $size The bitrate. Defaults to 102400. (optional, default to 102400)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBitrateTestBytes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getBitrateTestBytes($size = 102400, string $contentType = self::contentTypes['getBitrateTestBytes'][0])
    {
        list($response) = $this->getBitrateTestBytesWithHttpInfo($size, $contentType);
        return $response;
    }

    /**
     * Operation getBitrateTestBytesWithHttpInfo
     *
     * Tests the network with a request with the size of the bitrate.
     *
     * @param  int $size The bitrate. Defaults to 102400. (optional, default to 102400)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBitrateTestBytes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBitrateTestBytesWithHttpInfo($size = 102400, string $contentType = self::contentTypes['getBitrateTestBytes'][0])
    {
        $request = $this->getBitrateTestBytesRequest($size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBitrateTestBytesAsync
     *
     * Tests the network with a request with the size of the bitrate.
     *
     * @param  int $size The bitrate. Defaults to 102400. (optional, default to 102400)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBitrateTestBytes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitrateTestBytesAsync($size = 102400, string $contentType = self::contentTypes['getBitrateTestBytes'][0])
    {
        return $this->getBitrateTestBytesAsyncWithHttpInfo($size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBitrateTestBytesAsyncWithHttpInfo
     *
     * Tests the network with a request with the size of the bitrate.
     *
     * @param  int $size The bitrate. Defaults to 102400. (optional, default to 102400)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBitrateTestBytes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitrateTestBytesAsyncWithHttpInfo($size = 102400, string $contentType = self::contentTypes['getBitrateTestBytes'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getBitrateTestBytesRequest($size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBitrateTestBytes'
     *
     * @param  int $size The bitrate. Defaults to 102400. (optional, default to 102400)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBitrateTestBytes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBitrateTestBytesRequest($size = 102400, string $contentType = self::contentTypes['getBitrateTestBytes'][0])
    {

        if ($size !== null && $size > 100000000) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling MediaInfoApi.getBitrateTestBytes, must be smaller than or equal to 100000000.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling MediaInfoApi.getBitrateTestBytes, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/Playback/BitrateTest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlaybackInfo
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaybackInfoResponse
     */
    public function getPlaybackInfo($item_id, $user_id, string $contentType = self::contentTypes['getPlaybackInfo'][0])
    {
        list($response) = $this->getPlaybackInfoWithHttpInfo($item_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation getPlaybackInfoWithHttpInfo
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaybackInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlaybackInfoWithHttpInfo($item_id, $user_id, string $contentType = self::contentTypes['getPlaybackInfo'][0])
    {
        $request = $this->getPlaybackInfoRequest($item_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaybackInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaybackInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaybackInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlaybackInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaybackInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlaybackInfoAsync
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlaybackInfoAsync($item_id, $user_id, string $contentType = self::contentTypes['getPlaybackInfo'][0])
    {
        return $this->getPlaybackInfoAsyncWithHttpInfo($item_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlaybackInfoAsyncWithHttpInfo
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlaybackInfoAsyncWithHttpInfo($item_id, $user_id, string $contentType = self::contentTypes['getPlaybackInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaybackInfoResponse';
        $request = $this->getPlaybackInfoRequest($item_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlaybackInfo'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlaybackInfoRequest($item_id, $user_id, string $contentType = self::contentTypes['getPlaybackInfo'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getPlaybackInfo'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getPlaybackInfo'
            );
        }


        $resourcePath = '/Items/{itemId}/PlaybackInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostedPlaybackInfo
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional) (deprecated)
     * @param  int $start_time_ticks The start time in ticks. (optional) (deprecated)
     * @param  int $audio_stream_index The audio stream index. (optional) (deprecated)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional) (deprecated)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  string $live_stream_id The livestream id. (optional) (deprecated)
     * @param  bool $auto_open_live_stream Whether to auto open the livestream. (optional) (deprecated)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional) (deprecated)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional) (deprecated)
     * @param  bool $enable_transcoding Whether to enable transcoding. Default: true. (optional) (deprecated)
     * @param  bool $allow_video_stream_copy Whether to allow to copy the video stream. Default: true. (optional) (deprecated)
     * @param  bool $allow_audio_stream_copy Whether to allow to copy the audio stream. Default: true. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\GetPostedPlaybackInfoRequest $get_posted_playback_info_request The playback info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostedPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaybackInfoResponse
     */
    public function getPostedPlaybackInfo($item_id, $user_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $media_source_id = null, $live_stream_id = null, $auto_open_live_stream = null, $enable_direct_play = null, $enable_direct_stream = null, $enable_transcoding = null, $allow_video_stream_copy = null, $allow_audio_stream_copy = null, $get_posted_playback_info_request = null, string $contentType = self::contentTypes['getPostedPlaybackInfo'][0])
    {
        list($response) = $this->getPostedPlaybackInfoWithHttpInfo($item_id, $user_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $media_source_id, $live_stream_id, $auto_open_live_stream, $enable_direct_play, $enable_direct_stream, $enable_transcoding, $allow_video_stream_copy, $allow_audio_stream_copy, $get_posted_playback_info_request, $contentType);
        return $response;
    }

    /**
     * Operation getPostedPlaybackInfoWithHttpInfo
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional) (deprecated)
     * @param  int $start_time_ticks The start time in ticks. (optional) (deprecated)
     * @param  int $audio_stream_index The audio stream index. (optional) (deprecated)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional) (deprecated)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  string $live_stream_id The livestream id. (optional) (deprecated)
     * @param  bool $auto_open_live_stream Whether to auto open the livestream. (optional) (deprecated)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional) (deprecated)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional) (deprecated)
     * @param  bool $enable_transcoding Whether to enable transcoding. Default: true. (optional) (deprecated)
     * @param  bool $allow_video_stream_copy Whether to allow to copy the video stream. Default: true. (optional) (deprecated)
     * @param  bool $allow_audio_stream_copy Whether to allow to copy the audio stream. Default: true. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\GetPostedPlaybackInfoRequest $get_posted_playback_info_request The playback info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostedPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaybackInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostedPlaybackInfoWithHttpInfo($item_id, $user_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $media_source_id = null, $live_stream_id = null, $auto_open_live_stream = null, $enable_direct_play = null, $enable_direct_stream = null, $enable_transcoding = null, $allow_video_stream_copy = null, $allow_audio_stream_copy = null, $get_posted_playback_info_request = null, string $contentType = self::contentTypes['getPostedPlaybackInfo'][0])
    {
        $request = $this->getPostedPlaybackInfoRequest($item_id, $user_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $media_source_id, $live_stream_id, $auto_open_live_stream, $enable_direct_play, $enable_direct_stream, $enable_transcoding, $allow_video_stream_copy, $allow_audio_stream_copy, $get_posted_playback_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaybackInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaybackInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaybackInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlaybackInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaybackInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostedPlaybackInfoAsync
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional) (deprecated)
     * @param  int $start_time_ticks The start time in ticks. (optional) (deprecated)
     * @param  int $audio_stream_index The audio stream index. (optional) (deprecated)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional) (deprecated)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  string $live_stream_id The livestream id. (optional) (deprecated)
     * @param  bool $auto_open_live_stream Whether to auto open the livestream. (optional) (deprecated)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional) (deprecated)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional) (deprecated)
     * @param  bool $enable_transcoding Whether to enable transcoding. Default: true. (optional) (deprecated)
     * @param  bool $allow_video_stream_copy Whether to allow to copy the video stream. Default: true. (optional) (deprecated)
     * @param  bool $allow_audio_stream_copy Whether to allow to copy the audio stream. Default: true. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\GetPostedPlaybackInfoRequest $get_posted_playback_info_request The playback info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostedPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostedPlaybackInfoAsync($item_id, $user_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $media_source_id = null, $live_stream_id = null, $auto_open_live_stream = null, $enable_direct_play = null, $enable_direct_stream = null, $enable_transcoding = null, $allow_video_stream_copy = null, $allow_audio_stream_copy = null, $get_posted_playback_info_request = null, string $contentType = self::contentTypes['getPostedPlaybackInfo'][0])
    {
        return $this->getPostedPlaybackInfoAsyncWithHttpInfo($item_id, $user_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $media_source_id, $live_stream_id, $auto_open_live_stream, $enable_direct_play, $enable_direct_stream, $enable_transcoding, $allow_video_stream_copy, $allow_audio_stream_copy, $get_posted_playback_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostedPlaybackInfoAsyncWithHttpInfo
     *
     * Gets live playback media info for an item.
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional) (deprecated)
     * @param  int $start_time_ticks The start time in ticks. (optional) (deprecated)
     * @param  int $audio_stream_index The audio stream index. (optional) (deprecated)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional) (deprecated)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  string $live_stream_id The livestream id. (optional) (deprecated)
     * @param  bool $auto_open_live_stream Whether to auto open the livestream. (optional) (deprecated)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional) (deprecated)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional) (deprecated)
     * @param  bool $enable_transcoding Whether to enable transcoding. Default: true. (optional) (deprecated)
     * @param  bool $allow_video_stream_copy Whether to allow to copy the video stream. Default: true. (optional) (deprecated)
     * @param  bool $allow_audio_stream_copy Whether to allow to copy the audio stream. Default: true. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\GetPostedPlaybackInfoRequest $get_posted_playback_info_request The playback info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostedPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostedPlaybackInfoAsyncWithHttpInfo($item_id, $user_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $media_source_id = null, $live_stream_id = null, $auto_open_live_stream = null, $enable_direct_play = null, $enable_direct_stream = null, $enable_transcoding = null, $allow_video_stream_copy = null, $allow_audio_stream_copy = null, $get_posted_playback_info_request = null, string $contentType = self::contentTypes['getPostedPlaybackInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaybackInfoResponse';
        $request = $this->getPostedPlaybackInfoRequest($item_id, $user_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $media_source_id, $live_stream_id, $auto_open_live_stream, $enable_direct_play, $enable_direct_stream, $enable_transcoding, $allow_video_stream_copy, $allow_audio_stream_copy, $get_posted_playback_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostedPlaybackInfo'
     *
     * @param  string $item_id The item id. (required)
     * @param  string $user_id The user id. (optional) (deprecated)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional) (deprecated)
     * @param  int $start_time_ticks The start time in ticks. (optional) (deprecated)
     * @param  int $audio_stream_index The audio stream index. (optional) (deprecated)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional) (deprecated)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional) (deprecated)
     * @param  string $media_source_id The media source id. (optional) (deprecated)
     * @param  string $live_stream_id The livestream id. (optional) (deprecated)
     * @param  bool $auto_open_live_stream Whether to auto open the livestream. (optional) (deprecated)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional) (deprecated)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional) (deprecated)
     * @param  bool $enable_transcoding Whether to enable transcoding. Default: true. (optional) (deprecated)
     * @param  bool $allow_video_stream_copy Whether to allow to copy the video stream. Default: true. (optional) (deprecated)
     * @param  bool $allow_audio_stream_copy Whether to allow to copy the audio stream. Default: true. (optional) (deprecated)
     * @param  \OpenAPI\Client\Model\GetPostedPlaybackInfoRequest $get_posted_playback_info_request The playback info. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostedPlaybackInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPostedPlaybackInfoRequest($item_id, $user_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $media_source_id = null, $live_stream_id = null, $auto_open_live_stream = null, $enable_direct_play = null, $enable_direct_stream = null, $enable_transcoding = null, $allow_video_stream_copy = null, $allow_audio_stream_copy = null, $get_posted_playback_info_request = null, string $contentType = self::contentTypes['getPostedPlaybackInfo'][0])
    {

        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getPostedPlaybackInfo'
            );
        }

















        $resourcePath = '/Items/{itemId}/PlaybackInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_streaming_bitrate,
            'maxStreamingBitrate', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time_ticks,
            'startTimeTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $audio_stream_index,
            'audioStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subtitle_stream_index,
            'subtitleStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_audio_channels,
            'maxAudioChannels', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_source_id,
            'mediaSourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $live_stream_id,
            'liveStreamId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $auto_open_live_stream,
            'autoOpenLiveStream', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_direct_play,
            'enableDirectPlay', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_direct_stream,
            'enableDirectStream', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_transcoding,
            'enableTranscoding', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allow_video_stream_copy,
            'allowVideoStreamCopy', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allow_audio_stream_copy,
            'allowAudioStreamCopy', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_posted_playback_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_posted_playback_info_request));
            } else {
                $httpBody = $get_posted_playback_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation openLiveStream
     *
     * Opens a media source.
     *
     * @param  string $open_token The open token. (optional)
     * @param  string $user_id The user id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional)
     * @param  int $start_time_ticks The start time in ticks. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional)
     * @param  string $item_id The item id. (optional)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional)
     * @param  \OpenAPI\Client\Model\OpenLiveStreamRequest $open_live_stream_request The open live stream dto. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['openLiveStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStreamResponse
     */
    public function openLiveStream($open_token = null, $user_id = null, $play_session_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $item_id = null, $enable_direct_play = null, $enable_direct_stream = null, $open_live_stream_request = null, string $contentType = self::contentTypes['openLiveStream'][0])
    {
        list($response) = $this->openLiveStreamWithHttpInfo($open_token, $user_id, $play_session_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $item_id, $enable_direct_play, $enable_direct_stream, $open_live_stream_request, $contentType);
        return $response;
    }

    /**
     * Operation openLiveStreamWithHttpInfo
     *
     * Opens a media source.
     *
     * @param  string $open_token The open token. (optional)
     * @param  string $user_id The user id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional)
     * @param  int $start_time_ticks The start time in ticks. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional)
     * @param  string $item_id The item id. (optional)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional)
     * @param  \OpenAPI\Client\Model\OpenLiveStreamRequest $open_live_stream_request The open live stream dto. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['openLiveStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStreamResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function openLiveStreamWithHttpInfo($open_token = null, $user_id = null, $play_session_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $item_id = null, $enable_direct_play = null, $enable_direct_stream = null, $open_live_stream_request = null, string $contentType = self::contentTypes['openLiveStream'][0])
    {
        $request = $this->openLiveStreamRequest($open_token, $user_id, $play_session_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $item_id, $enable_direct_play, $enable_direct_stream, $open_live_stream_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LiveStreamResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStreamResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStreamResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStreamResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStreamResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation openLiveStreamAsync
     *
     * Opens a media source.
     *
     * @param  string $open_token The open token. (optional)
     * @param  string $user_id The user id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional)
     * @param  int $start_time_ticks The start time in ticks. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional)
     * @param  string $item_id The item id. (optional)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional)
     * @param  \OpenAPI\Client\Model\OpenLiveStreamRequest $open_live_stream_request The open live stream dto. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['openLiveStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function openLiveStreamAsync($open_token = null, $user_id = null, $play_session_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $item_id = null, $enable_direct_play = null, $enable_direct_stream = null, $open_live_stream_request = null, string $contentType = self::contentTypes['openLiveStream'][0])
    {
        return $this->openLiveStreamAsyncWithHttpInfo($open_token, $user_id, $play_session_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $item_id, $enable_direct_play, $enable_direct_stream, $open_live_stream_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation openLiveStreamAsyncWithHttpInfo
     *
     * Opens a media source.
     *
     * @param  string $open_token The open token. (optional)
     * @param  string $user_id The user id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional)
     * @param  int $start_time_ticks The start time in ticks. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional)
     * @param  string $item_id The item id. (optional)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional)
     * @param  \OpenAPI\Client\Model\OpenLiveStreamRequest $open_live_stream_request The open live stream dto. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['openLiveStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function openLiveStreamAsyncWithHttpInfo($open_token = null, $user_id = null, $play_session_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $item_id = null, $enable_direct_play = null, $enable_direct_stream = null, $open_live_stream_request = null, string $contentType = self::contentTypes['openLiveStream'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LiveStreamResponse';
        $request = $this->openLiveStreamRequest($open_token, $user_id, $play_session_id, $max_streaming_bitrate, $start_time_ticks, $audio_stream_index, $subtitle_stream_index, $max_audio_channels, $item_id, $enable_direct_play, $enable_direct_stream, $open_live_stream_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'openLiveStream'
     *
     * @param  string $open_token The open token. (optional)
     * @param  string $user_id The user id. (optional)
     * @param  string $play_session_id The play session id. (optional)
     * @param  int $max_streaming_bitrate The maximum streaming bitrate. (optional)
     * @param  int $start_time_ticks The start time in ticks. (optional)
     * @param  int $audio_stream_index The audio stream index. (optional)
     * @param  int $subtitle_stream_index The subtitle stream index. (optional)
     * @param  int $max_audio_channels The maximum number of audio channels. (optional)
     * @param  string $item_id The item id. (optional)
     * @param  bool $enable_direct_play Whether to enable direct play. Default: true. (optional)
     * @param  bool $enable_direct_stream Whether to enable direct stream. Default: true. (optional)
     * @param  \OpenAPI\Client\Model\OpenLiveStreamRequest $open_live_stream_request The open live stream dto. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['openLiveStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function openLiveStreamRequest($open_token = null, $user_id = null, $play_session_id = null, $max_streaming_bitrate = null, $start_time_ticks = null, $audio_stream_index = null, $subtitle_stream_index = null, $max_audio_channels = null, $item_id = null, $enable_direct_play = null, $enable_direct_stream = null, $open_live_stream_request = null, string $contentType = self::contentTypes['openLiveStream'][0])
    {














        $resourcePath = '/LiveStreams/Open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $open_token,
            'openToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $play_session_id,
            'playSessionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_streaming_bitrate,
            'maxStreamingBitrate', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time_ticks,
            'startTimeTicks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $audio_stream_index,
            'audioStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subtitle_stream_index,
            'subtitleStreamIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_audio_channels,
            'maxAudioChannels', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $item_id,
            'itemId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_direct_play,
            'enableDirectPlay', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_direct_stream,
            'enableDirectStream', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/json; profile="CamelCase"', 'application/json; profile="PascalCase"', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($open_live_stream_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($open_live_stream_request));
            } else {
                $httpBody = $open_live_stream_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Emby-Token');
        if ($apiKey !== null) {
            $headers['X-Emby-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
