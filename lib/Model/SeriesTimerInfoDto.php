<?php
/**
 * SeriesTimerInfoDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SeriesTimerInfoDto Class Doc Comment
 *
 * @category Class
 * @description Class SeriesTimerInfoDto.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SeriesTimerInfoDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SeriesTimerInfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'server_id' => 'string',
        'external_id' => 'string',
        'channel_id' => 'string',
        'external_channel_id' => 'string',
        'channel_name' => 'string',
        'channel_primary_image_tag' => 'string',
        'program_id' => 'string',
        'external_program_id' => 'string',
        'name' => 'string',
        'overview' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'service_name' => 'string',
        'priority' => 'int',
        'pre_padding_seconds' => 'int',
        'post_padding_seconds' => 'int',
        'is_pre_padding_required' => 'bool',
        'parent_backdrop_item_id' => 'string',
        'parent_backdrop_image_tags' => 'string[]',
        'is_post_padding_required' => 'bool',
        'keep_until' => '\OpenAPI\Client\Model\KeepUntil',
        'record_any_time' => 'bool',
        'skip_episodes_in_library' => 'bool',
        'record_any_channel' => 'bool',
        'keep_up_to' => 'int',
        'record_new_only' => 'bool',
        'days' => '\OpenAPI\Client\Model\DayOfWeek[]',
        'day_pattern' => '\OpenAPI\Client\Model\DayPattern',
        'image_tags' => 'array<string,string>',
        'parent_thumb_item_id' => 'string',
        'parent_thumb_image_tag' => 'string',
        'parent_primary_image_item_id' => 'string',
        'parent_primary_image_tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'server_id' => null,
        'external_id' => null,
        'channel_id' => 'uuid',
        'external_channel_id' => null,
        'channel_name' => null,
        'channel_primary_image_tag' => null,
        'program_id' => null,
        'external_program_id' => null,
        'name' => null,
        'overview' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'service_name' => null,
        'priority' => 'int32',
        'pre_padding_seconds' => 'int32',
        'post_padding_seconds' => 'int32',
        'is_pre_padding_required' => null,
        'parent_backdrop_item_id' => null,
        'parent_backdrop_image_tags' => null,
        'is_post_padding_required' => null,
        'keep_until' => null,
        'record_any_time' => null,
        'skip_episodes_in_library' => null,
        'record_any_channel' => null,
        'keep_up_to' => 'int32',
        'record_new_only' => null,
        'days' => null,
        'day_pattern' => null,
        'image_tags' => null,
        'parent_thumb_item_id' => null,
        'parent_thumb_image_tag' => null,
        'parent_primary_image_item_id' => null,
        'parent_primary_image_tag' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'type' => true,
		'server_id' => true,
		'external_id' => true,
		'channel_id' => false,
		'external_channel_id' => true,
		'channel_name' => true,
		'channel_primary_image_tag' => true,
		'program_id' => true,
		'external_program_id' => true,
		'name' => true,
		'overview' => true,
		'start_date' => false,
		'end_date' => false,
		'service_name' => true,
		'priority' => false,
		'pre_padding_seconds' => false,
		'post_padding_seconds' => false,
		'is_pre_padding_required' => false,
		'parent_backdrop_item_id' => true,
		'parent_backdrop_image_tags' => true,
		'is_post_padding_required' => false,
		'keep_until' => false,
		'record_any_time' => false,
		'skip_episodes_in_library' => false,
		'record_any_channel' => false,
		'keep_up_to' => false,
		'record_new_only' => false,
		'days' => true,
		'day_pattern' => true,
		'image_tags' => true,
		'parent_thumb_item_id' => true,
		'parent_thumb_image_tag' => true,
		'parent_primary_image_item_id' => true,
		'parent_primary_image_tag' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'type' => 'Type',
        'server_id' => 'ServerId',
        'external_id' => 'ExternalId',
        'channel_id' => 'ChannelId',
        'external_channel_id' => 'ExternalChannelId',
        'channel_name' => 'ChannelName',
        'channel_primary_image_tag' => 'ChannelPrimaryImageTag',
        'program_id' => 'ProgramId',
        'external_program_id' => 'ExternalProgramId',
        'name' => 'Name',
        'overview' => 'Overview',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'service_name' => 'ServiceName',
        'priority' => 'Priority',
        'pre_padding_seconds' => 'PrePaddingSeconds',
        'post_padding_seconds' => 'PostPaddingSeconds',
        'is_pre_padding_required' => 'IsPrePaddingRequired',
        'parent_backdrop_item_id' => 'ParentBackdropItemId',
        'parent_backdrop_image_tags' => 'ParentBackdropImageTags',
        'is_post_padding_required' => 'IsPostPaddingRequired',
        'keep_until' => 'KeepUntil',
        'record_any_time' => 'RecordAnyTime',
        'skip_episodes_in_library' => 'SkipEpisodesInLibrary',
        'record_any_channel' => 'RecordAnyChannel',
        'keep_up_to' => 'KeepUpTo',
        'record_new_only' => 'RecordNewOnly',
        'days' => 'Days',
        'day_pattern' => 'DayPattern',
        'image_tags' => 'ImageTags',
        'parent_thumb_item_id' => 'ParentThumbItemId',
        'parent_thumb_image_tag' => 'ParentThumbImageTag',
        'parent_primary_image_item_id' => 'ParentPrimaryImageItemId',
        'parent_primary_image_tag' => 'ParentPrimaryImageTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'server_id' => 'setServerId',
        'external_id' => 'setExternalId',
        'channel_id' => 'setChannelId',
        'external_channel_id' => 'setExternalChannelId',
        'channel_name' => 'setChannelName',
        'channel_primary_image_tag' => 'setChannelPrimaryImageTag',
        'program_id' => 'setProgramId',
        'external_program_id' => 'setExternalProgramId',
        'name' => 'setName',
        'overview' => 'setOverview',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'service_name' => 'setServiceName',
        'priority' => 'setPriority',
        'pre_padding_seconds' => 'setPrePaddingSeconds',
        'post_padding_seconds' => 'setPostPaddingSeconds',
        'is_pre_padding_required' => 'setIsPrePaddingRequired',
        'parent_backdrop_item_id' => 'setParentBackdropItemId',
        'parent_backdrop_image_tags' => 'setParentBackdropImageTags',
        'is_post_padding_required' => 'setIsPostPaddingRequired',
        'keep_until' => 'setKeepUntil',
        'record_any_time' => 'setRecordAnyTime',
        'skip_episodes_in_library' => 'setSkipEpisodesInLibrary',
        'record_any_channel' => 'setRecordAnyChannel',
        'keep_up_to' => 'setKeepUpTo',
        'record_new_only' => 'setRecordNewOnly',
        'days' => 'setDays',
        'day_pattern' => 'setDayPattern',
        'image_tags' => 'setImageTags',
        'parent_thumb_item_id' => 'setParentThumbItemId',
        'parent_thumb_image_tag' => 'setParentThumbImageTag',
        'parent_primary_image_item_id' => 'setParentPrimaryImageItemId',
        'parent_primary_image_tag' => 'setParentPrimaryImageTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'server_id' => 'getServerId',
        'external_id' => 'getExternalId',
        'channel_id' => 'getChannelId',
        'external_channel_id' => 'getExternalChannelId',
        'channel_name' => 'getChannelName',
        'channel_primary_image_tag' => 'getChannelPrimaryImageTag',
        'program_id' => 'getProgramId',
        'external_program_id' => 'getExternalProgramId',
        'name' => 'getName',
        'overview' => 'getOverview',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'service_name' => 'getServiceName',
        'priority' => 'getPriority',
        'pre_padding_seconds' => 'getPrePaddingSeconds',
        'post_padding_seconds' => 'getPostPaddingSeconds',
        'is_pre_padding_required' => 'getIsPrePaddingRequired',
        'parent_backdrop_item_id' => 'getParentBackdropItemId',
        'parent_backdrop_image_tags' => 'getParentBackdropImageTags',
        'is_post_padding_required' => 'getIsPostPaddingRequired',
        'keep_until' => 'getKeepUntil',
        'record_any_time' => 'getRecordAnyTime',
        'skip_episodes_in_library' => 'getSkipEpisodesInLibrary',
        'record_any_channel' => 'getRecordAnyChannel',
        'keep_up_to' => 'getKeepUpTo',
        'record_new_only' => 'getRecordNewOnly',
        'days' => 'getDays',
        'day_pattern' => 'getDayPattern',
        'image_tags' => 'getImageTags',
        'parent_thumb_item_id' => 'getParentThumbItemId',
        'parent_thumb_image_tag' => 'getParentThumbImageTag',
        'parent_primary_image_item_id' => 'getParentPrimaryImageItemId',
        'parent_primary_image_tag' => 'getParentPrimaryImageTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('server_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('external_channel_id', $data ?? [], null);
        $this->setIfExists('channel_name', $data ?? [], null);
        $this->setIfExists('channel_primary_image_tag', $data ?? [], null);
        $this->setIfExists('program_id', $data ?? [], null);
        $this->setIfExists('external_program_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('service_name', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('pre_padding_seconds', $data ?? [], null);
        $this->setIfExists('post_padding_seconds', $data ?? [], null);
        $this->setIfExists('is_pre_padding_required', $data ?? [], null);
        $this->setIfExists('parent_backdrop_item_id', $data ?? [], null);
        $this->setIfExists('parent_backdrop_image_tags', $data ?? [], null);
        $this->setIfExists('is_post_padding_required', $data ?? [], null);
        $this->setIfExists('keep_until', $data ?? [], null);
        $this->setIfExists('record_any_time', $data ?? [], null);
        $this->setIfExists('skip_episodes_in_library', $data ?? [], null);
        $this->setIfExists('record_any_channel', $data ?? [], null);
        $this->setIfExists('keep_up_to', $data ?? [], null);
        $this->setIfExists('record_new_only', $data ?? [], null);
        $this->setIfExists('days', $data ?? [], null);
        $this->setIfExists('day_pattern', $data ?? [], null);
        $this->setIfExists('image_tags', $data ?? [], null);
        $this->setIfExists('parent_thumb_item_id', $data ?? [], null);
        $this->setIfExists('parent_thumb_image_tag', $data ?? [], null);
        $this->setIfExists('parent_primary_image_item_id', $data ?? [], null);
        $this->setIfExists('parent_primary_image_tag', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the Id of the recording.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id Gets or sets the server identifier.
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        if (is_null($server_id)) {
            array_push($this->openAPINullablesSetToNull, 'server_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Gets or sets the external identifier.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id Gets or sets the channel id of the recording.
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            throw new \InvalidArgumentException('non-nullable channel_id cannot be null');
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets external_channel_id
     *
     * @return string|null
     */
    public function getExternalChannelId()
    {
        return $this->container['external_channel_id'];
    }

    /**
     * Sets external_channel_id
     *
     * @param string|null $external_channel_id Gets or sets the external channel identifier.
     *
     * @return self
     */
    public function setExternalChannelId($external_channel_id)
    {
        if (is_null($external_channel_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_channel_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_channel_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_channel_id'] = $external_channel_id;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string|null $channel_name Gets or sets the channel name of the recording.
     *
     * @return self
     */
    public function setChannelName($channel_name)
    {
        if (is_null($channel_name)) {
            array_push($this->openAPINullablesSetToNull, 'channel_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets channel_primary_image_tag
     *
     * @return string|null
     */
    public function getChannelPrimaryImageTag()
    {
        return $this->container['channel_primary_image_tag'];
    }

    /**
     * Sets channel_primary_image_tag
     *
     * @param string|null $channel_primary_image_tag channel_primary_image_tag
     *
     * @return self
     */
    public function setChannelPrimaryImageTag($channel_primary_image_tag)
    {
        if (is_null($channel_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'channel_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_primary_image_tag'] = $channel_primary_image_tag;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return string|null
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param string|null $program_id Gets or sets the program identifier.
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        if (is_null($program_id)) {
            array_push($this->openAPINullablesSetToNull, 'program_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('program_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets external_program_id
     *
     * @return string|null
     */
    public function getExternalProgramId()
    {
        return $this->container['external_program_id'];
    }

    /**
     * Sets external_program_id
     *
     * @param string|null $external_program_id Gets or sets the external program identifier.
     *
     * @return self
     */
    public function setExternalProgramId($external_program_id)
    {
        if (is_null($external_program_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_program_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_program_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_program_id'] = $external_program_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name of the recording.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string|null
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string|null $overview Gets or sets the description of the recording.
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            array_push($this->openAPINullablesSetToNull, 'overview');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overview', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Gets or sets the start date of the recording, in UTC.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Gets or sets the end date of the recording, in UTC.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name Gets or sets the name of the service.
     *
     * @return self
     */
    public function setServiceName($service_name)
    {
        if (is_null($service_name)) {
            array_push($this->openAPINullablesSetToNull, 'service_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Gets or sets the priority.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets pre_padding_seconds
     *
     * @return int|null
     */
    public function getPrePaddingSeconds()
    {
        return $this->container['pre_padding_seconds'];
    }

    /**
     * Sets pre_padding_seconds
     *
     * @param int|null $pre_padding_seconds Gets or sets the pre padding seconds.
     *
     * @return self
     */
    public function setPrePaddingSeconds($pre_padding_seconds)
    {
        if (is_null($pre_padding_seconds)) {
            throw new \InvalidArgumentException('non-nullable pre_padding_seconds cannot be null');
        }
        $this->container['pre_padding_seconds'] = $pre_padding_seconds;

        return $this;
    }

    /**
     * Gets post_padding_seconds
     *
     * @return int|null
     */
    public function getPostPaddingSeconds()
    {
        return $this->container['post_padding_seconds'];
    }

    /**
     * Sets post_padding_seconds
     *
     * @param int|null $post_padding_seconds Gets or sets the post padding seconds.
     *
     * @return self
     */
    public function setPostPaddingSeconds($post_padding_seconds)
    {
        if (is_null($post_padding_seconds)) {
            throw new \InvalidArgumentException('non-nullable post_padding_seconds cannot be null');
        }
        $this->container['post_padding_seconds'] = $post_padding_seconds;

        return $this;
    }

    /**
     * Gets is_pre_padding_required
     *
     * @return bool|null
     */
    public function getIsPrePaddingRequired()
    {
        return $this->container['is_pre_padding_required'];
    }

    /**
     * Sets is_pre_padding_required
     *
     * @param bool|null $is_pre_padding_required Gets or sets a value indicating whether this instance is pre padding required.
     *
     * @return self
     */
    public function setIsPrePaddingRequired($is_pre_padding_required)
    {
        if (is_null($is_pre_padding_required)) {
            throw new \InvalidArgumentException('non-nullable is_pre_padding_required cannot be null');
        }
        $this->container['is_pre_padding_required'] = $is_pre_padding_required;

        return $this;
    }

    /**
     * Gets parent_backdrop_item_id
     *
     * @return string|null
     */
    public function getParentBackdropItemId()
    {
        return $this->container['parent_backdrop_item_id'];
    }

    /**
     * Sets parent_backdrop_item_id
     *
     * @param string|null $parent_backdrop_item_id Gets or sets the Id of the Parent that has a backdrop if the item does not have one.
     *
     * @return self
     */
    public function setParentBackdropItemId($parent_backdrop_item_id)
    {
        if (is_null($parent_backdrop_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_backdrop_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_backdrop_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_backdrop_item_id'] = $parent_backdrop_item_id;

        return $this;
    }

    /**
     * Gets parent_backdrop_image_tags
     *
     * @return string[]|null
     */
    public function getParentBackdropImageTags()
    {
        return $this->container['parent_backdrop_image_tags'];
    }

    /**
     * Sets parent_backdrop_image_tags
     *
     * @param string[]|null $parent_backdrop_image_tags Gets or sets the parent backdrop image tags.
     *
     * @return self
     */
    public function setParentBackdropImageTags($parent_backdrop_image_tags)
    {
        if (is_null($parent_backdrop_image_tags)) {
            array_push($this->openAPINullablesSetToNull, 'parent_backdrop_image_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_backdrop_image_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_backdrop_image_tags'] = $parent_backdrop_image_tags;

        return $this;
    }

    /**
     * Gets is_post_padding_required
     *
     * @return bool|null
     */
    public function getIsPostPaddingRequired()
    {
        return $this->container['is_post_padding_required'];
    }

    /**
     * Sets is_post_padding_required
     *
     * @param bool|null $is_post_padding_required Gets or sets a value indicating whether this instance is post padding required.
     *
     * @return self
     */
    public function setIsPostPaddingRequired($is_post_padding_required)
    {
        if (is_null($is_post_padding_required)) {
            throw new \InvalidArgumentException('non-nullable is_post_padding_required cannot be null');
        }
        $this->container['is_post_padding_required'] = $is_post_padding_required;

        return $this;
    }

    /**
     * Gets keep_until
     *
     * @return \OpenAPI\Client\Model\KeepUntil|null
     */
    public function getKeepUntil()
    {
        return $this->container['keep_until'];
    }

    /**
     * Sets keep_until
     *
     * @param \OpenAPI\Client\Model\KeepUntil|null $keep_until keep_until
     *
     * @return self
     */
    public function setKeepUntil($keep_until)
    {
        if (is_null($keep_until)) {
            throw new \InvalidArgumentException('non-nullable keep_until cannot be null');
        }
        $this->container['keep_until'] = $keep_until;

        return $this;
    }

    /**
     * Gets record_any_time
     *
     * @return bool|null
     */
    public function getRecordAnyTime()
    {
        return $this->container['record_any_time'];
    }

    /**
     * Sets record_any_time
     *
     * @param bool|null $record_any_time Gets or sets a value indicating whether [record any time].
     *
     * @return self
     */
    public function setRecordAnyTime($record_any_time)
    {
        if (is_null($record_any_time)) {
            throw new \InvalidArgumentException('non-nullable record_any_time cannot be null');
        }
        $this->container['record_any_time'] = $record_any_time;

        return $this;
    }

    /**
     * Gets skip_episodes_in_library
     *
     * @return bool|null
     */
    public function getSkipEpisodesInLibrary()
    {
        return $this->container['skip_episodes_in_library'];
    }

    /**
     * Sets skip_episodes_in_library
     *
     * @param bool|null $skip_episodes_in_library skip_episodes_in_library
     *
     * @return self
     */
    public function setSkipEpisodesInLibrary($skip_episodes_in_library)
    {
        if (is_null($skip_episodes_in_library)) {
            throw new \InvalidArgumentException('non-nullable skip_episodes_in_library cannot be null');
        }
        $this->container['skip_episodes_in_library'] = $skip_episodes_in_library;

        return $this;
    }

    /**
     * Gets record_any_channel
     *
     * @return bool|null
     */
    public function getRecordAnyChannel()
    {
        return $this->container['record_any_channel'];
    }

    /**
     * Sets record_any_channel
     *
     * @param bool|null $record_any_channel Gets or sets a value indicating whether [record any channel].
     *
     * @return self
     */
    public function setRecordAnyChannel($record_any_channel)
    {
        if (is_null($record_any_channel)) {
            throw new \InvalidArgumentException('non-nullable record_any_channel cannot be null');
        }
        $this->container['record_any_channel'] = $record_any_channel;

        return $this;
    }

    /**
     * Gets keep_up_to
     *
     * @return int|null
     */
    public function getKeepUpTo()
    {
        return $this->container['keep_up_to'];
    }

    /**
     * Sets keep_up_to
     *
     * @param int|null $keep_up_to keep_up_to
     *
     * @return self
     */
    public function setKeepUpTo($keep_up_to)
    {
        if (is_null($keep_up_to)) {
            throw new \InvalidArgumentException('non-nullable keep_up_to cannot be null');
        }
        $this->container['keep_up_to'] = $keep_up_to;

        return $this;
    }

    /**
     * Gets record_new_only
     *
     * @return bool|null
     */
    public function getRecordNewOnly()
    {
        return $this->container['record_new_only'];
    }

    /**
     * Sets record_new_only
     *
     * @param bool|null $record_new_only Gets or sets a value indicating whether [record new only].
     *
     * @return self
     */
    public function setRecordNewOnly($record_new_only)
    {
        if (is_null($record_new_only)) {
            throw new \InvalidArgumentException('non-nullable record_new_only cannot be null');
        }
        $this->container['record_new_only'] = $record_new_only;

        return $this;
    }

    /**
     * Gets days
     *
     * @return \OpenAPI\Client\Model\DayOfWeek[]|null
     */
    public function getDays()
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param \OpenAPI\Client\Model\DayOfWeek[]|null $days Gets or sets the days.
     *
     * @return self
     */
    public function setDays($days)
    {
        if (is_null($days)) {
            array_push($this->openAPINullablesSetToNull, 'days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets day_pattern
     *
     * @return \OpenAPI\Client\Model\DayPattern|null
     */
    public function getDayPattern()
    {
        return $this->container['day_pattern'];
    }

    /**
     * Sets day_pattern
     *
     * @param \OpenAPI\Client\Model\DayPattern|null $day_pattern day_pattern
     *
     * @return self
     */
    public function setDayPattern($day_pattern)
    {
        if (is_null($day_pattern)) {
            array_push($this->openAPINullablesSetToNull, 'day_pattern');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('day_pattern', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['day_pattern'] = $day_pattern;

        return $this;
    }

    /**
     * Gets image_tags
     *
     * @return array<string,string>|null
     */
    public function getImageTags()
    {
        return $this->container['image_tags'];
    }

    /**
     * Sets image_tags
     *
     * @param array<string,string>|null $image_tags Gets or sets the image tags.
     *
     * @return self
     */
    public function setImageTags($image_tags)
    {
        if (is_null($image_tags)) {
            array_push($this->openAPINullablesSetToNull, 'image_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_tags'] = $image_tags;

        return $this;
    }

    /**
     * Gets parent_thumb_item_id
     *
     * @return string|null
     */
    public function getParentThumbItemId()
    {
        return $this->container['parent_thumb_item_id'];
    }

    /**
     * Sets parent_thumb_item_id
     *
     * @param string|null $parent_thumb_item_id Gets or sets the parent thumb item id.
     *
     * @return self
     */
    public function setParentThumbItemId($parent_thumb_item_id)
    {
        if (is_null($parent_thumb_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_thumb_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_thumb_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_thumb_item_id'] = $parent_thumb_item_id;

        return $this;
    }

    /**
     * Gets parent_thumb_image_tag
     *
     * @return string|null
     */
    public function getParentThumbImageTag()
    {
        return $this->container['parent_thumb_image_tag'];
    }

    /**
     * Sets parent_thumb_image_tag
     *
     * @param string|null $parent_thumb_image_tag Gets or sets the parent thumb image tag.
     *
     * @return self
     */
    public function setParentThumbImageTag($parent_thumb_image_tag)
    {
        if (is_null($parent_thumb_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'parent_thumb_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_thumb_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_thumb_image_tag'] = $parent_thumb_image_tag;

        return $this;
    }

    /**
     * Gets parent_primary_image_item_id
     *
     * @return string|null
     */
    public function getParentPrimaryImageItemId()
    {
        return $this->container['parent_primary_image_item_id'];
    }

    /**
     * Sets parent_primary_image_item_id
     *
     * @param string|null $parent_primary_image_item_id Gets or sets the parent primary image item identifier.
     *
     * @return self
     */
    public function setParentPrimaryImageItemId($parent_primary_image_item_id)
    {
        if (is_null($parent_primary_image_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_primary_image_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_primary_image_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_primary_image_item_id'] = $parent_primary_image_item_id;

        return $this;
    }

    /**
     * Gets parent_primary_image_tag
     *
     * @return string|null
     */
    public function getParentPrimaryImageTag()
    {
        return $this->container['parent_primary_image_tag'];
    }

    /**
     * Sets parent_primary_image_tag
     *
     * @param string|null $parent_primary_image_tag Gets or sets the parent primary image tag.
     *
     * @return self
     */
    public function setParentPrimaryImageTag($parent_primary_image_tag)
    {
        if (is_null($parent_primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'parent_primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_primary_image_tag'] = $parent_primary_image_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


