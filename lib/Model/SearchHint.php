<?php
/**
 * SearchHint
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchHint Class Doc Comment
 *
 * @category Class
 * @description Class SearchHintResult.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchHint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchHint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_id' => 'string',
        'id' => 'string',
        'name' => 'string',
        'matched_term' => 'string',
        'index_number' => 'int',
        'production_year' => 'int',
        'parent_index_number' => 'int',
        'primary_image_tag' => 'string',
        'thumb_image_tag' => 'string',
        'thumb_image_item_id' => 'string',
        'backdrop_image_tag' => 'string',
        'backdrop_image_item_id' => 'string',
        'type' => 'string',
        'is_folder' => 'bool',
        'run_time_ticks' => 'int',
        'media_type' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'series' => 'string',
        'status' => 'string',
        'album' => 'string',
        'album_id' => 'string',
        'album_artist' => 'string',
        'artists' => 'string[]',
        'song_count' => 'int',
        'episode_count' => 'int',
        'channel_id' => 'string',
        'channel_name' => 'string',
        'primary_image_aspect_ratio' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_id' => 'uuid',
        'id' => 'uuid',
        'name' => null,
        'matched_term' => null,
        'index_number' => 'int32',
        'production_year' => 'int32',
        'parent_index_number' => 'int32',
        'primary_image_tag' => null,
        'thumb_image_tag' => null,
        'thumb_image_item_id' => null,
        'backdrop_image_tag' => null,
        'backdrop_image_item_id' => null,
        'type' => null,
        'is_folder' => null,
        'run_time_ticks' => 'int64',
        'media_type' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'series' => null,
        'status' => null,
        'album' => null,
        'album_id' => 'uuid',
        'album_artist' => null,
        'artists' => null,
        'song_count' => 'int32',
        'episode_count' => 'int32',
        'channel_id' => 'uuid',
        'channel_name' => null,
        'primary_image_aspect_ratio' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_id' => false,
		'id' => false,
		'name' => true,
		'matched_term' => true,
		'index_number' => true,
		'production_year' => true,
		'parent_index_number' => true,
		'primary_image_tag' => true,
		'thumb_image_tag' => true,
		'thumb_image_item_id' => true,
		'backdrop_image_tag' => true,
		'backdrop_image_item_id' => true,
		'type' => true,
		'is_folder' => true,
		'run_time_ticks' => true,
		'media_type' => true,
		'start_date' => true,
		'end_date' => true,
		'series' => true,
		'status' => true,
		'album' => true,
		'album_id' => false,
		'album_artist' => true,
		'artists' => true,
		'song_count' => true,
		'episode_count' => true,
		'channel_id' => false,
		'channel_name' => true,
		'primary_image_aspect_ratio' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'ItemId',
        'id' => 'Id',
        'name' => 'Name',
        'matched_term' => 'MatchedTerm',
        'index_number' => 'IndexNumber',
        'production_year' => 'ProductionYear',
        'parent_index_number' => 'ParentIndexNumber',
        'primary_image_tag' => 'PrimaryImageTag',
        'thumb_image_tag' => 'ThumbImageTag',
        'thumb_image_item_id' => 'ThumbImageItemId',
        'backdrop_image_tag' => 'BackdropImageTag',
        'backdrop_image_item_id' => 'BackdropImageItemId',
        'type' => 'Type',
        'is_folder' => 'IsFolder',
        'run_time_ticks' => 'RunTimeTicks',
        'media_type' => 'MediaType',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'series' => 'Series',
        'status' => 'Status',
        'album' => 'Album',
        'album_id' => 'AlbumId',
        'album_artist' => 'AlbumArtist',
        'artists' => 'Artists',
        'song_count' => 'SongCount',
        'episode_count' => 'EpisodeCount',
        'channel_id' => 'ChannelId',
        'channel_name' => 'ChannelName',
        'primary_image_aspect_ratio' => 'PrimaryImageAspectRatio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'id' => 'setId',
        'name' => 'setName',
        'matched_term' => 'setMatchedTerm',
        'index_number' => 'setIndexNumber',
        'production_year' => 'setProductionYear',
        'parent_index_number' => 'setParentIndexNumber',
        'primary_image_tag' => 'setPrimaryImageTag',
        'thumb_image_tag' => 'setThumbImageTag',
        'thumb_image_item_id' => 'setThumbImageItemId',
        'backdrop_image_tag' => 'setBackdropImageTag',
        'backdrop_image_item_id' => 'setBackdropImageItemId',
        'type' => 'setType',
        'is_folder' => 'setIsFolder',
        'run_time_ticks' => 'setRunTimeTicks',
        'media_type' => 'setMediaType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'series' => 'setSeries',
        'status' => 'setStatus',
        'album' => 'setAlbum',
        'album_id' => 'setAlbumId',
        'album_artist' => 'setAlbumArtist',
        'artists' => 'setArtists',
        'song_count' => 'setSongCount',
        'episode_count' => 'setEpisodeCount',
        'channel_id' => 'setChannelId',
        'channel_name' => 'setChannelName',
        'primary_image_aspect_ratio' => 'setPrimaryImageAspectRatio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'id' => 'getId',
        'name' => 'getName',
        'matched_term' => 'getMatchedTerm',
        'index_number' => 'getIndexNumber',
        'production_year' => 'getProductionYear',
        'parent_index_number' => 'getParentIndexNumber',
        'primary_image_tag' => 'getPrimaryImageTag',
        'thumb_image_tag' => 'getThumbImageTag',
        'thumb_image_item_id' => 'getThumbImageItemId',
        'backdrop_image_tag' => 'getBackdropImageTag',
        'backdrop_image_item_id' => 'getBackdropImageItemId',
        'type' => 'getType',
        'is_folder' => 'getIsFolder',
        'run_time_ticks' => 'getRunTimeTicks',
        'media_type' => 'getMediaType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'series' => 'getSeries',
        'status' => 'getStatus',
        'album' => 'getAlbum',
        'album_id' => 'getAlbumId',
        'album_artist' => 'getAlbumArtist',
        'artists' => 'getArtists',
        'song_count' => 'getSongCount',
        'episode_count' => 'getEpisodeCount',
        'channel_id' => 'getChannelId',
        'channel_name' => 'getChannelName',
        'primary_image_aspect_ratio' => 'getPrimaryImageAspectRatio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('matched_term', $data ?? [], null);
        $this->setIfExists('index_number', $data ?? [], null);
        $this->setIfExists('production_year', $data ?? [], null);
        $this->setIfExists('parent_index_number', $data ?? [], null);
        $this->setIfExists('primary_image_tag', $data ?? [], null);
        $this->setIfExists('thumb_image_tag', $data ?? [], null);
        $this->setIfExists('thumb_image_item_id', $data ?? [], null);
        $this->setIfExists('backdrop_image_tag', $data ?? [], null);
        $this->setIfExists('backdrop_image_item_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_folder', $data ?? [], null);
        $this->setIfExists('run_time_ticks', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('series', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('album', $data ?? [], null);
        $this->setIfExists('album_id', $data ?? [], null);
        $this->setIfExists('album_artist', $data ?? [], null);
        $this->setIfExists('artists', $data ?? [], null);
        $this->setIfExists('song_count', $data ?? [], null);
        $this->setIfExists('episode_count', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('channel_name', $data ?? [], null);
        $this->setIfExists('primary_image_aspect_ratio', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id Gets or sets the item id.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets matched_term
     *
     * @return string|null
     */
    public function getMatchedTerm()
    {
        return $this->container['matched_term'];
    }

    /**
     * Sets matched_term
     *
     * @param string|null $matched_term Gets or sets the matched term.
     *
     * @return self
     */
    public function setMatchedTerm($matched_term)
    {
        if (is_null($matched_term)) {
            array_push($this->openAPINullablesSetToNull, 'matched_term');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matched_term', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matched_term'] = $matched_term;

        return $this;
    }

    /**
     * Gets index_number
     *
     * @return int|null
     */
    public function getIndexNumber()
    {
        return $this->container['index_number'];
    }

    /**
     * Sets index_number
     *
     * @param int|null $index_number Gets or sets the index number.
     *
     * @return self
     */
    public function setIndexNumber($index_number)
    {
        if (is_null($index_number)) {
            array_push($this->openAPINullablesSetToNull, 'index_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_number'] = $index_number;

        return $this;
    }

    /**
     * Gets production_year
     *
     * @return int|null
     */
    public function getProductionYear()
    {
        return $this->container['production_year'];
    }

    /**
     * Sets production_year
     *
     * @param int|null $production_year Gets or sets the production year.
     *
     * @return self
     */
    public function setProductionYear($production_year)
    {
        if (is_null($production_year)) {
            array_push($this->openAPINullablesSetToNull, 'production_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('production_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['production_year'] = $production_year;

        return $this;
    }

    /**
     * Gets parent_index_number
     *
     * @return int|null
     */
    public function getParentIndexNumber()
    {
        return $this->container['parent_index_number'];
    }

    /**
     * Sets parent_index_number
     *
     * @param int|null $parent_index_number Gets or sets the parent index number.
     *
     * @return self
     */
    public function setParentIndexNumber($parent_index_number)
    {
        if (is_null($parent_index_number)) {
            array_push($this->openAPINullablesSetToNull, 'parent_index_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_index_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_index_number'] = $parent_index_number;

        return $this;
    }

    /**
     * Gets primary_image_tag
     *
     * @return string|null
     */
    public function getPrimaryImageTag()
    {
        return $this->container['primary_image_tag'];
    }

    /**
     * Sets primary_image_tag
     *
     * @param string|null $primary_image_tag Gets or sets the image tag.
     *
     * @return self
     */
    public function setPrimaryImageTag($primary_image_tag)
    {
        if (is_null($primary_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'primary_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_image_tag'] = $primary_image_tag;

        return $this;
    }

    /**
     * Gets thumb_image_tag
     *
     * @return string|null
     */
    public function getThumbImageTag()
    {
        return $this->container['thumb_image_tag'];
    }

    /**
     * Sets thumb_image_tag
     *
     * @param string|null $thumb_image_tag Gets or sets the thumb image tag.
     *
     * @return self
     */
    public function setThumbImageTag($thumb_image_tag)
    {
        if (is_null($thumb_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'thumb_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumb_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumb_image_tag'] = $thumb_image_tag;

        return $this;
    }

    /**
     * Gets thumb_image_item_id
     *
     * @return string|null
     */
    public function getThumbImageItemId()
    {
        return $this->container['thumb_image_item_id'];
    }

    /**
     * Sets thumb_image_item_id
     *
     * @param string|null $thumb_image_item_id Gets or sets the thumb image item identifier.
     *
     * @return self
     */
    public function setThumbImageItemId($thumb_image_item_id)
    {
        if (is_null($thumb_image_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'thumb_image_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumb_image_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumb_image_item_id'] = $thumb_image_item_id;

        return $this;
    }

    /**
     * Gets backdrop_image_tag
     *
     * @return string|null
     */
    public function getBackdropImageTag()
    {
        return $this->container['backdrop_image_tag'];
    }

    /**
     * Sets backdrop_image_tag
     *
     * @param string|null $backdrop_image_tag Gets or sets the backdrop image tag.
     *
     * @return self
     */
    public function setBackdropImageTag($backdrop_image_tag)
    {
        if (is_null($backdrop_image_tag)) {
            array_push($this->openAPINullablesSetToNull, 'backdrop_image_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backdrop_image_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backdrop_image_tag'] = $backdrop_image_tag;

        return $this;
    }

    /**
     * Gets backdrop_image_item_id
     *
     * @return string|null
     */
    public function getBackdropImageItemId()
    {
        return $this->container['backdrop_image_item_id'];
    }

    /**
     * Sets backdrop_image_item_id
     *
     * @param string|null $backdrop_image_item_id Gets or sets the backdrop image item identifier.
     *
     * @return self
     */
    public function setBackdropImageItemId($backdrop_image_item_id)
    {
        if (is_null($backdrop_image_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'backdrop_image_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backdrop_image_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backdrop_image_item_id'] = $backdrop_image_item_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Gets or sets the type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_folder
     *
     * @return bool|null
     */
    public function getIsFolder()
    {
        return $this->container['is_folder'];
    }

    /**
     * Sets is_folder
     *
     * @param bool|null $is_folder is_folder
     *
     * @return self
     */
    public function setIsFolder($is_folder)
    {
        if (is_null($is_folder)) {
            array_push($this->openAPINullablesSetToNull, 'is_folder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_folder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_folder'] = $is_folder;

        return $this;
    }

    /**
     * Gets run_time_ticks
     *
     * @return int|null
     */
    public function getRunTimeTicks()
    {
        return $this->container['run_time_ticks'];
    }

    /**
     * Sets run_time_ticks
     *
     * @param int|null $run_time_ticks Gets or sets the run time ticks.
     *
     * @return self
     */
    public function setRunTimeTicks($run_time_ticks)
    {
        if (is_null($run_time_ticks)) {
            array_push($this->openAPINullablesSetToNull, 'run_time_ticks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_time_ticks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_time_ticks'] = $run_time_ticks;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string|null $media_type Gets or sets the type of the media.
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            array_push($this->openAPINullablesSetToNull, 'media_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets series
     *
     * @return string|null
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param string|null $series Gets or sets the series.
     *
     * @return self
     */
    public function setSeries($series)
    {
        if (is_null($series)) {
            array_push($this->openAPINullablesSetToNull, 'series');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets album
     *
     * @return string|null
     */
    public function getAlbum()
    {
        return $this->container['album'];
    }

    /**
     * Sets album
     *
     * @param string|null $album Gets or sets the album.
     *
     * @return self
     */
    public function setAlbum($album)
    {
        if (is_null($album)) {
            array_push($this->openAPINullablesSetToNull, 'album');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album'] = $album;

        return $this;
    }

    /**
     * Gets album_id
     *
     * @return string|null
     */
    public function getAlbumId()
    {
        return $this->container['album_id'];
    }

    /**
     * Sets album_id
     *
     * @param string|null $album_id album_id
     *
     * @return self
     */
    public function setAlbumId($album_id)
    {
        if (is_null($album_id)) {
            throw new \InvalidArgumentException('non-nullable album_id cannot be null');
        }
        $this->container['album_id'] = $album_id;

        return $this;
    }

    /**
     * Gets album_artist
     *
     * @return string|null
     */
    public function getAlbumArtist()
    {
        return $this->container['album_artist'];
    }

    /**
     * Sets album_artist
     *
     * @param string|null $album_artist Gets or sets the album artist.
     *
     * @return self
     */
    public function setAlbumArtist($album_artist)
    {
        if (is_null($album_artist)) {
            array_push($this->openAPINullablesSetToNull, 'album_artist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_artist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album_artist'] = $album_artist;

        return $this;
    }

    /**
     * Gets artists
     *
     * @return string[]|null
     */
    public function getArtists()
    {
        return $this->container['artists'];
    }

    /**
     * Sets artists
     *
     * @param string[]|null $artists Gets or sets the artists.
     *
     * @return self
     */
    public function setArtists($artists)
    {
        if (is_null($artists)) {
            array_push($this->openAPINullablesSetToNull, 'artists');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artists', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['artists'] = $artists;

        return $this;
    }

    /**
     * Gets song_count
     *
     * @return int|null
     */
    public function getSongCount()
    {
        return $this->container['song_count'];
    }

    /**
     * Sets song_count
     *
     * @param int|null $song_count Gets or sets the song count.
     *
     * @return self
     */
    public function setSongCount($song_count)
    {
        if (is_null($song_count)) {
            array_push($this->openAPINullablesSetToNull, 'song_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('song_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['song_count'] = $song_count;

        return $this;
    }

    /**
     * Gets episode_count
     *
     * @return int|null
     */
    public function getEpisodeCount()
    {
        return $this->container['episode_count'];
    }

    /**
     * Sets episode_count
     *
     * @param int|null $episode_count Gets or sets the episode count.
     *
     * @return self
     */
    public function setEpisodeCount($episode_count)
    {
        if (is_null($episode_count)) {
            array_push($this->openAPINullablesSetToNull, 'episode_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('episode_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['episode_count'] = $episode_count;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id Gets or sets the channel identifier.
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            throw new \InvalidArgumentException('non-nullable channel_id cannot be null');
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string|null $channel_name Gets or sets the name of the channel.
     *
     * @return self
     */
    public function setChannelName($channel_name)
    {
        if (is_null($channel_name)) {
            array_push($this->openAPINullablesSetToNull, 'channel_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets primary_image_aspect_ratio
     *
     * @return float|null
     */
    public function getPrimaryImageAspectRatio()
    {
        return $this->container['primary_image_aspect_ratio'];
    }

    /**
     * Sets primary_image_aspect_ratio
     *
     * @param float|null $primary_image_aspect_ratio Gets or sets the primary image aspect ratio.
     *
     * @return self
     */
    public function setPrimaryImageAspectRatio($primary_image_aspect_ratio)
    {
        if (is_null($primary_image_aspect_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'primary_image_aspect_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_image_aspect_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_image_aspect_ratio'] = $primary_image_aspect_ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


