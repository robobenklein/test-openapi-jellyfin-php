<?php
/**
 * DisplayPreferencesDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DisplayPreferencesDto Class Doc Comment
 *
 * @category Class
 * @description Defines the display preferences for any item that supports them (usually Folders).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DisplayPreferencesDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DisplayPreferencesDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'view_type' => 'string',
        'sort_by' => 'string',
        'index_by' => 'string',
        'remember_indexing' => 'bool',
        'primary_image_height' => 'int',
        'primary_image_width' => 'int',
        'custom_prefs' => 'array<string,string>',
        'scroll_direction' => '\OpenAPI\Client\Model\ScrollDirection',
        'show_backdrop' => 'bool',
        'remember_sorting' => 'bool',
        'sort_order' => '\OpenAPI\Client\Model\SortOrder',
        'show_sidebar' => 'bool',
        'client' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'view_type' => null,
        'sort_by' => null,
        'index_by' => null,
        'remember_indexing' => null,
        'primary_image_height' => 'int32',
        'primary_image_width' => 'int32',
        'custom_prefs' => null,
        'scroll_direction' => null,
        'show_backdrop' => null,
        'remember_sorting' => null,
        'sort_order' => null,
        'show_sidebar' => null,
        'client' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'view_type' => true,
		'sort_by' => true,
		'index_by' => true,
		'remember_indexing' => false,
		'primary_image_height' => false,
		'primary_image_width' => false,
		'custom_prefs' => false,
		'scroll_direction' => false,
		'show_backdrop' => false,
		'remember_sorting' => false,
		'sort_order' => false,
		'show_sidebar' => false,
		'client' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'view_type' => 'ViewType',
        'sort_by' => 'SortBy',
        'index_by' => 'IndexBy',
        'remember_indexing' => 'RememberIndexing',
        'primary_image_height' => 'PrimaryImageHeight',
        'primary_image_width' => 'PrimaryImageWidth',
        'custom_prefs' => 'CustomPrefs',
        'scroll_direction' => 'ScrollDirection',
        'show_backdrop' => 'ShowBackdrop',
        'remember_sorting' => 'RememberSorting',
        'sort_order' => 'SortOrder',
        'show_sidebar' => 'ShowSidebar',
        'client' => 'Client'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'view_type' => 'setViewType',
        'sort_by' => 'setSortBy',
        'index_by' => 'setIndexBy',
        'remember_indexing' => 'setRememberIndexing',
        'primary_image_height' => 'setPrimaryImageHeight',
        'primary_image_width' => 'setPrimaryImageWidth',
        'custom_prefs' => 'setCustomPrefs',
        'scroll_direction' => 'setScrollDirection',
        'show_backdrop' => 'setShowBackdrop',
        'remember_sorting' => 'setRememberSorting',
        'sort_order' => 'setSortOrder',
        'show_sidebar' => 'setShowSidebar',
        'client' => 'setClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'view_type' => 'getViewType',
        'sort_by' => 'getSortBy',
        'index_by' => 'getIndexBy',
        'remember_indexing' => 'getRememberIndexing',
        'primary_image_height' => 'getPrimaryImageHeight',
        'primary_image_width' => 'getPrimaryImageWidth',
        'custom_prefs' => 'getCustomPrefs',
        'scroll_direction' => 'getScrollDirection',
        'show_backdrop' => 'getShowBackdrop',
        'remember_sorting' => 'getRememberSorting',
        'sort_order' => 'getSortOrder',
        'show_sidebar' => 'getShowSidebar',
        'client' => 'getClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('view_type', $data ?? [], null);
        $this->setIfExists('sort_by', $data ?? [], null);
        $this->setIfExists('index_by', $data ?? [], null);
        $this->setIfExists('remember_indexing', $data ?? [], null);
        $this->setIfExists('primary_image_height', $data ?? [], null);
        $this->setIfExists('primary_image_width', $data ?? [], null);
        $this->setIfExists('custom_prefs', $data ?? [], null);
        $this->setIfExists('scroll_direction', $data ?? [], null);
        $this->setIfExists('show_backdrop', $data ?? [], null);
        $this->setIfExists('remember_sorting', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('show_sidebar', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Gets or sets the user id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets view_type
     *
     * @return string|null
     */
    public function getViewType()
    {
        return $this->container['view_type'];
    }

    /**
     * Sets view_type
     *
     * @param string|null $view_type Gets or sets the type of the view.
     *
     * @return self
     */
    public function setViewType($view_type)
    {
        if (is_null($view_type)) {
            array_push($this->openAPINullablesSetToNull, 'view_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_type'] = $view_type;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string|null
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string|null $sort_by Gets or sets the sort by.
     *
     * @return self
     */
    public function setSortBy($sort_by)
    {
        if (is_null($sort_by)) {
            array_push($this->openAPINullablesSetToNull, 'sort_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets index_by
     *
     * @return string|null
     */
    public function getIndexBy()
    {
        return $this->container['index_by'];
    }

    /**
     * Sets index_by
     *
     * @param string|null $index_by Gets or sets the index by.
     *
     * @return self
     */
    public function setIndexBy($index_by)
    {
        if (is_null($index_by)) {
            array_push($this->openAPINullablesSetToNull, 'index_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_by'] = $index_by;

        return $this;
    }

    /**
     * Gets remember_indexing
     *
     * @return bool|null
     */
    public function getRememberIndexing()
    {
        return $this->container['remember_indexing'];
    }

    /**
     * Sets remember_indexing
     *
     * @param bool|null $remember_indexing Gets or sets a value indicating whether [remember indexing].
     *
     * @return self
     */
    public function setRememberIndexing($remember_indexing)
    {
        if (is_null($remember_indexing)) {
            throw new \InvalidArgumentException('non-nullable remember_indexing cannot be null');
        }
        $this->container['remember_indexing'] = $remember_indexing;

        return $this;
    }

    /**
     * Gets primary_image_height
     *
     * @return int|null
     */
    public function getPrimaryImageHeight()
    {
        return $this->container['primary_image_height'];
    }

    /**
     * Sets primary_image_height
     *
     * @param int|null $primary_image_height Gets or sets the height of the primary image.
     *
     * @return self
     */
    public function setPrimaryImageHeight($primary_image_height)
    {
        if (is_null($primary_image_height)) {
            throw new \InvalidArgumentException('non-nullable primary_image_height cannot be null');
        }
        $this->container['primary_image_height'] = $primary_image_height;

        return $this;
    }

    /**
     * Gets primary_image_width
     *
     * @return int|null
     */
    public function getPrimaryImageWidth()
    {
        return $this->container['primary_image_width'];
    }

    /**
     * Sets primary_image_width
     *
     * @param int|null $primary_image_width Gets or sets the width of the primary image.
     *
     * @return self
     */
    public function setPrimaryImageWidth($primary_image_width)
    {
        if (is_null($primary_image_width)) {
            throw new \InvalidArgumentException('non-nullable primary_image_width cannot be null');
        }
        $this->container['primary_image_width'] = $primary_image_width;

        return $this;
    }

    /**
     * Gets custom_prefs
     *
     * @return array<string,string>|null
     */
    public function getCustomPrefs()
    {
        return $this->container['custom_prefs'];
    }

    /**
     * Sets custom_prefs
     *
     * @param array<string,string>|null $custom_prefs Gets or sets the custom prefs.
     *
     * @return self
     */
    public function setCustomPrefs($custom_prefs)
    {
        if (is_null($custom_prefs)) {
            throw new \InvalidArgumentException('non-nullable custom_prefs cannot be null');
        }
        $this->container['custom_prefs'] = $custom_prefs;

        return $this;
    }

    /**
     * Gets scroll_direction
     *
     * @return \OpenAPI\Client\Model\ScrollDirection|null
     */
    public function getScrollDirection()
    {
        return $this->container['scroll_direction'];
    }

    /**
     * Sets scroll_direction
     *
     * @param \OpenAPI\Client\Model\ScrollDirection|null $scroll_direction scroll_direction
     *
     * @return self
     */
    public function setScrollDirection($scroll_direction)
    {
        if (is_null($scroll_direction)) {
            throw new \InvalidArgumentException('non-nullable scroll_direction cannot be null');
        }
        $this->container['scroll_direction'] = $scroll_direction;

        return $this;
    }

    /**
     * Gets show_backdrop
     *
     * @return bool|null
     */
    public function getShowBackdrop()
    {
        return $this->container['show_backdrop'];
    }

    /**
     * Sets show_backdrop
     *
     * @param bool|null $show_backdrop Gets or sets a value indicating whether to show backdrops on this item.
     *
     * @return self
     */
    public function setShowBackdrop($show_backdrop)
    {
        if (is_null($show_backdrop)) {
            throw new \InvalidArgumentException('non-nullable show_backdrop cannot be null');
        }
        $this->container['show_backdrop'] = $show_backdrop;

        return $this;
    }

    /**
     * Gets remember_sorting
     *
     * @return bool|null
     */
    public function getRememberSorting()
    {
        return $this->container['remember_sorting'];
    }

    /**
     * Sets remember_sorting
     *
     * @param bool|null $remember_sorting Gets or sets a value indicating whether [remember sorting].
     *
     * @return self
     */
    public function setRememberSorting($remember_sorting)
    {
        if (is_null($remember_sorting)) {
            throw new \InvalidArgumentException('non-nullable remember_sorting cannot be null');
        }
        $this->container['remember_sorting'] = $remember_sorting;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return \OpenAPI\Client\Model\SortOrder|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param \OpenAPI\Client\Model\SortOrder|null $sort_order sort_order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets show_sidebar
     *
     * @return bool|null
     */
    public function getShowSidebar()
    {
        return $this->container['show_sidebar'];
    }

    /**
     * Sets show_sidebar
     *
     * @param bool|null $show_sidebar Gets or sets a value indicating whether [show sidebar].
     *
     * @return self
     */
    public function setShowSidebar($show_sidebar)
    {
        if (is_null($show_sidebar)) {
            throw new \InvalidArgumentException('non-nullable show_sidebar cannot be null');
        }
        $this->container['show_sidebar'] = $show_sidebar;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string|null $client Gets or sets the client.
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            array_push($this->openAPINullablesSetToNull, 'client');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['client'] = $client;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


