<?php
/**
 * ConfigImageTypes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConfigImageTypes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigImageTypes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConfigImageTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backdrop_sizes' => 'string[]',
        'base_url' => 'string',
        'logo_sizes' => 'string[]',
        'poster_sizes' => 'string[]',
        'profile_sizes' => 'string[]',
        'secure_base_url' => 'string',
        'still_sizes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backdrop_sizes' => null,
        'base_url' => null,
        'logo_sizes' => null,
        'poster_sizes' => null,
        'profile_sizes' => null,
        'secure_base_url' => null,
        'still_sizes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'backdrop_sizes' => true,
		'base_url' => true,
		'logo_sizes' => true,
		'poster_sizes' => true,
		'profile_sizes' => true,
		'secure_base_url' => true,
		'still_sizes' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backdrop_sizes' => 'BackdropSizes',
        'base_url' => 'BaseUrl',
        'logo_sizes' => 'LogoSizes',
        'poster_sizes' => 'PosterSizes',
        'profile_sizes' => 'ProfileSizes',
        'secure_base_url' => 'SecureBaseUrl',
        'still_sizes' => 'StillSizes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backdrop_sizes' => 'setBackdropSizes',
        'base_url' => 'setBaseUrl',
        'logo_sizes' => 'setLogoSizes',
        'poster_sizes' => 'setPosterSizes',
        'profile_sizes' => 'setProfileSizes',
        'secure_base_url' => 'setSecureBaseUrl',
        'still_sizes' => 'setStillSizes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backdrop_sizes' => 'getBackdropSizes',
        'base_url' => 'getBaseUrl',
        'logo_sizes' => 'getLogoSizes',
        'poster_sizes' => 'getPosterSizes',
        'profile_sizes' => 'getProfileSizes',
        'secure_base_url' => 'getSecureBaseUrl',
        'still_sizes' => 'getStillSizes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('backdrop_sizes', $data ?? [], null);
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('logo_sizes', $data ?? [], null);
        $this->setIfExists('poster_sizes', $data ?? [], null);
        $this->setIfExists('profile_sizes', $data ?? [], null);
        $this->setIfExists('secure_base_url', $data ?? [], null);
        $this->setIfExists('still_sizes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backdrop_sizes
     *
     * @return string[]|null
     */
    public function getBackdropSizes()
    {
        return $this->container['backdrop_sizes'];
    }

    /**
     * Sets backdrop_sizes
     *
     * @param string[]|null $backdrop_sizes backdrop_sizes
     *
     * @return self
     */
    public function setBackdropSizes($backdrop_sizes)
    {
        if (is_null($backdrop_sizes)) {
            array_push($this->openAPINullablesSetToNull, 'backdrop_sizes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backdrop_sizes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backdrop_sizes'] = $backdrop_sizes;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url base_url
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            array_push($this->openAPINullablesSetToNull, 'base_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets logo_sizes
     *
     * @return string[]|null
     */
    public function getLogoSizes()
    {
        return $this->container['logo_sizes'];
    }

    /**
     * Sets logo_sizes
     *
     * @param string[]|null $logo_sizes logo_sizes
     *
     * @return self
     */
    public function setLogoSizes($logo_sizes)
    {
        if (is_null($logo_sizes)) {
            array_push($this->openAPINullablesSetToNull, 'logo_sizes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_sizes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_sizes'] = $logo_sizes;

        return $this;
    }

    /**
     * Gets poster_sizes
     *
     * @return string[]|null
     */
    public function getPosterSizes()
    {
        return $this->container['poster_sizes'];
    }

    /**
     * Sets poster_sizes
     *
     * @param string[]|null $poster_sizes poster_sizes
     *
     * @return self
     */
    public function setPosterSizes($poster_sizes)
    {
        if (is_null($poster_sizes)) {
            array_push($this->openAPINullablesSetToNull, 'poster_sizes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('poster_sizes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['poster_sizes'] = $poster_sizes;

        return $this;
    }

    /**
     * Gets profile_sizes
     *
     * @return string[]|null
     */
    public function getProfileSizes()
    {
        return $this->container['profile_sizes'];
    }

    /**
     * Sets profile_sizes
     *
     * @param string[]|null $profile_sizes profile_sizes
     *
     * @return self
     */
    public function setProfileSizes($profile_sizes)
    {
        if (is_null($profile_sizes)) {
            array_push($this->openAPINullablesSetToNull, 'profile_sizes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_sizes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_sizes'] = $profile_sizes;

        return $this;
    }

    /**
     * Gets secure_base_url
     *
     * @return string|null
     */
    public function getSecureBaseUrl()
    {
        return $this->container['secure_base_url'];
    }

    /**
     * Sets secure_base_url
     *
     * @param string|null $secure_base_url secure_base_url
     *
     * @return self
     */
    public function setSecureBaseUrl($secure_base_url)
    {
        if (is_null($secure_base_url)) {
            array_push($this->openAPINullablesSetToNull, 'secure_base_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secure_base_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secure_base_url'] = $secure_base_url;

        return $this;
    }

    /**
     * Gets still_sizes
     *
     * @return string[]|null
     */
    public function getStillSizes()
    {
        return $this->container['still_sizes'];
    }

    /**
     * Sets still_sizes
     *
     * @param string[]|null $still_sizes still_sizes
     *
     * @return self
     */
    public function setStillSizes($still_sizes)
    {
        if (is_null($still_sizes)) {
            array_push($this->openAPINullablesSetToNull, 'still_sizes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('still_sizes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['still_sizes'] = $still_sizes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


